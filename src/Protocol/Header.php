<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : global.proto
 */


namespace EncryptServer\Protocol;
/**
 * Protobuf message : EncryptServer.command.Header
 */
class Header extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * command required uint32 = 1
     *
     * @var int
     */
    protected $command = null;

    /**
     * command_seq optional uint32 = 2
     *
     * @var int
     */
    protected $command_seq = null;

    /**
     * route optional enum = 3
     *
     * @var \EncryptServer\Protocol\Header\Route
     */
    protected $route = null;

    /**
     * transit optional bool = 4
     *
     * @var bool
     */
    protected $transit = null;

    /**
     * sender optional message = 5
     *
     * @var \EncryptServer\Protocol\Address
     */
    protected $sender = null;

    /**
     * receiver optional message = 6
     *
     * @var \EncryptServer\Protocol\Address
     */
    protected $receiver = null;

    /**
     * cluster optional string = 7
     *
     * @var string
     */
    protected $cluster = null;

    /**
     * foreign_host optional string = 8
     *
     * @var string
     */
    protected $foreign_host = null;

    /**
     * responsed_command_seq optional uint32 = 9
     *
     * @var int
     */
    protected $responsed_command_seq = null;

    /**
     * content_guid optional string = 10
     *
     * @var string
     */
    protected $content_guid = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->route = \EncryptServer\Protocol\Header\Route::ROUTE_LOCAL();
        $this->transit = false;
        $this->responsed_command_seq = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'command' has a value
     *
     * @return bool
     */
    public function hasCommand()
    {
        return $this->command !== null;
    }

    /**
     * Get 'command' value
     *
     * @return int
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * Set 'command' value
     *
     * @param int $value
     */
    public function setCommand($value)
    {
        $this->command = $value;
    }

    /**
     * Check if 'command_seq' has a value
     *
     * @return bool
     */
    public function hasCommandSeq()
    {
        return $this->command_seq !== null;
    }

    /**
     * Get 'command_seq' value
     *
     * @return int
     */
    public function getCommandSeq()
    {
        return $this->command_seq;
    }

    /**
     * Set 'command_seq' value
     *
     * @param int $value
     */
    public function setCommandSeq($value = null)
    {
        $this->command_seq = $value;
    }

    /**
     * Check if 'route' has a value
     *
     * @return bool
     */
    public function hasRoute()
    {
        return $this->route !== null;
    }

    /**
     * Get 'route' value
     *
     * @return \EncryptServer\Protocol\Header\Route
     */
    public function getRoute()
    {
        return $this->route;
    }

    /**
     * Set 'route' value
     *
     * @param \EncryptServer\Protocol\Header\Route $value
     */
    public function setRoute(\EncryptServer\Protocol\Header\Route $value = null)
    {
        $this->route = $value;
    }

    /**
     * Check if 'transit' has a value
     *
     * @return bool
     */
    public function hasTransit()
    {
        return $this->transit !== null;
    }

    /**
     * Get 'transit' value
     *
     * @return bool
     */
    public function getTransit()
    {
        return $this->transit;
    }

    /**
     * Set 'transit' value
     *
     * @param bool $value
     */
    public function setTransit($value = null)
    {
        $this->transit = $value;
    }

    /**
     * Check if 'sender' has a value
     *
     * @return bool
     */
    public function hasSender()
    {
        return $this->sender !== null;
    }

    /**
     * Get 'sender' value
     *
     * @return \EncryptServer\Protocol\Address
     */
    public function getSender()
    {
        return $this->sender;
    }

    /**
     * Set 'sender' value
     *
     * @param \EncryptServer\Protocol\Address $value
     */
    public function setSender(\EncryptServer\Protocol\Address $value = null)
    {
        $this->sender = $value;
    }

    /**
     * Check if 'receiver' has a value
     *
     * @return bool
     */
    public function hasReceiver()
    {
        return $this->receiver !== null;
    }

    /**
     * Get 'receiver' value
     *
     * @return \EncryptServer\Protocol\Address
     */
    public function getReceiver()
    {
        return $this->receiver;
    }

    /**
     * Set 'receiver' value
     *
     * @param \EncryptServer\Protocol\Address $value
     */
    public function setReceiver(\EncryptServer\Protocol\Address $value = null)
    {
        $this->receiver = $value;
    }

    /**
     * Check if 'cluster' has a value
     *
     * @return bool
     */
    public function hasCluster()
    {
        return $this->cluster !== null;
    }

    /**
     * Get 'cluster' value
     *
     * @return string
     */
    public function getCluster()
    {
        return $this->cluster;
    }

    /**
     * Set 'cluster' value
     *
     * @param string $value
     */
    public function setCluster($value = null)
    {
        $this->cluster = $value;
    }

    /**
     * Check if 'foreign_host' has a value
     *
     * @return bool
     */
    public function hasForeignHost()
    {
        return $this->foreign_host !== null;
    }

    /**
     * Get 'foreign_host' value
     *
     * @return string
     */
    public function getForeignHost()
    {
        return $this->foreign_host;
    }

    /**
     * Set 'foreign_host' value
     *
     * @param string $value
     */
    public function setForeignHost($value = null)
    {
        $this->foreign_host = $value;
    }

    /**
     * Check if 'responsed_command_seq' has a value
     *
     * @return bool
     */
    public function hasResponsedCommandSeq()
    {
        return $this->responsed_command_seq !== null;
    }

    /**
     * Get 'responsed_command_seq' value
     *
     * @return int
     */
    public function getResponsedCommandSeq()
    {
        return $this->responsed_command_seq;
    }

    /**
     * Set 'responsed_command_seq' value
     *
     * @param int $value
     */
    public function setResponsedCommandSeq($value = null)
    {
        $this->responsed_command_seq = $value;
    }

    /**
     * Check if 'content_guid' has a value
     *
     * @return bool
     */
    public function hasContentGuid()
    {
        return $this->content_guid !== null;
    }

    /**
     * Get 'content_guid' value
     *
     * @return string
     */
    public function getContentGuid()
    {
        return $this->content_guid;
    }

    /**
     * Set 'content_guid' value
     *
     * @param string $value
     */
    public function setContentGuid($value = null)
    {
        $this->content_guid = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['command'])) {
            throw new \InvalidArgumentException('Field "command" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'command_seq' => null,
            'route' => \EncryptServer\Protocol\Header\Route::ROUTE_LOCAL(),
            'transit' => false,
            'sender' => null,
            'receiver' => null,
            'cluster' => null,
            'foreign_host' => null,
            'responsed_command_seq' => '0',
            'content_guid' => null
        ], $values);

        $message->setCommand($values['command']);
        $message->setCommandSeq($values['command_seq']);
        $message->setRoute($values['route']);
        $message->setTransit($values['transit']);
        $message->setSender($values['sender']);
        $message->setReceiver($values['receiver']);
        $message->setCluster($values['cluster']);
        $message->setForeignHost($values['foreign_host']);
        $message->setResponsedCommandSeq($values['responsed_command_seq']);
        $message->setContentGuid($values['content_guid']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Header',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'command',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'command_seq',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'route',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.vipole.command.Header.Route',
                    'default_value' => \EncryptServer\Protocol\Header\Route::ROUTE_LOCAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'transit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sender',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.vipole.command.Address'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'receiver',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.vipole.command.Address'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'cluster',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'foreign_host',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'responsed_command_seq',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'content_guid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->command === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Header#command" (tag 1) is required but has no value.');
        }

        if ($this->command !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->command);
        }

        if ($this->command_seq !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->command_seq);
        }

        if ($this->route !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->route->value());
        }

        if ($this->transit !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->transit);
        }

        if ($this->sender !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->sender->serializedSize($sizeContext));
            $this->sender->writeTo($context);
        }

        if ($this->receiver !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->receiver->serializedSize($sizeContext));
            $this->receiver->writeTo($context);
        }

        if ($this->cluster !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->cluster);
        }

        if ($this->foreign_host !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->foreign_host);
        }

        if ($this->responsed_command_seq !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->responsed_command_seq);
        }

        if ($this->content_guid !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->content_guid);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->command = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->command_seq = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->route = \EncryptServer\Protocol\Header\Route::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->transit = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Address();

                $this->sender = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Address();

                $this->receiver = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cluster = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->foreign_host = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->responsed_command_seq = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->content_guid = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->command !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->command);
        }

        if ($this->command_seq !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->command_seq);
        }

        if ($this->route !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->route->value());
        }

        if ($this->transit !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->sender !== null) {
            $innerSize = $this->sender->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->receiver !== null) {
            $innerSize = $this->receiver->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->cluster !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cluster);
        }

        if ($this->foreign_host !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->foreign_host);
        }

        if ($this->responsed_command_seq !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->responsed_command_seq);
        }

        if ($this->content_guid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->content_guid);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->command = null;
        $this->command_seq = null;
        $this->route = \EncryptServer\Protocol\Header\Route::ROUTE_LOCAL();
        $this->transit = false;
        $this->sender = null;
        $this->receiver = null;
        $this->cluster = null;
        $this->foreign_host = null;
        $this->responsed_command_seq = '0';
        $this->content_guid = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Header) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->command = ($message->command !== null) ? $message->command : $this->command;
        $this->command_seq = ($message->command_seq !== null) ? $message->command_seq : $this->command_seq;
        $this->route = ($message->route !== null) ? $message->route : $this->route;
        $this->transit = ($message->transit !== null) ? $message->transit : $this->transit;
        $this->sender = ($message->sender !== null) ? $message->sender : $this->sender;
        $this->receiver = ($message->receiver !== null) ? $message->receiver : $this->receiver;
        $this->cluster = ($message->cluster !== null) ? $message->cluster : $this->cluster;
        $this->foreign_host = ($message->foreign_host !== null) ? $message->foreign_host : $this->foreign_host;
        $this->responsed_command_seq = ($message->responsed_command_seq !== null) ? $message->responsed_command_seq : $this->responsed_command_seq;
        $this->content_guid = ($message->content_guid !== null) ? $message->content_guid : $this->content_guid;
    }


}


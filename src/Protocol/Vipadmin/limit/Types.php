<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin\limit;

/**
 * Protobuf enum : EncryptServer.Protocol.Vipadmin.limit.Types
 */
class Types extends \Protobuf\Enum
{

    /**
     * TYPE_INT = 1
     */
    const TYPE_INT_VALUE = 1;

    /**
     * TYPE_STR = 2
     */
    const TYPE_STR_VALUE = 2;

    /**
     * TYPE_FLOAT = 3
     */
    const TYPE_FLOAT_VALUE = 3;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    protected static $TYPE_INT = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    protected static $TYPE_STR = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    protected static $TYPE_FLOAT = null;

    /**
     * @return \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    public static function TYPE_INT()
    {
        if (self::$TYPE_INT !== null) {
            return self::$TYPE_INT;
        }

        return self::$TYPE_INT = new self('TYPE_INT', self::TYPE_INT_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    public static function TYPE_STR()
    {
        if (self::$TYPE_STR !== null) {
            return self::$TYPE_STR;
        }

        return self::$TYPE_STR = new self('TYPE_STR', self::TYPE_STR_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    public static function TYPE_FLOAT()
    {
        if (self::$TYPE_FLOAT !== null) {
            return self::$TYPE_FLOAT;
        }

        return self::$TYPE_FLOAT = new self('TYPE_FLOAT', self::TYPE_FLOAT_VALUE);
    }

    /**
     * @param int $value
     * @return \EncryptServer\Protocol\Vipadmin\limit\Types
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::TYPE_INT();
            case 2: return self::TYPE_STR();
            case 3: return self::TYPE_FLOAT();
            default: return null;
        }
    }


}


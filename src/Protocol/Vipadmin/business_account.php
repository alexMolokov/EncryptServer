<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.business_account
 */
class business_account extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required string = 1
     *
     * @var string
     */
    protected $id = null;

    /**
     * name optional string = 2
     *
     * @var string
     */
    protected $name = null;

    /**
     * access optional int32 = 3
     *
     * @var int
     */
    protected $access = null;

    /**
     * keys optional string = 4
     *
     * @var string
     */
    protected $keys = null;

    /**
     * owner optional string = 5
     *
     * @var string
     */
    protected $owner = null;

    /**
     * details optional string = 6
     *
     * @var string
     */
    protected $details = null;

    /**
     * blocked optional bool = 7
     *
     * @var bool
     */
    protected $blocked = null;

    /**
     * user_count optional int32 = 8
     *
     * @var int
     */
    protected $user_count = null;

    /**
     * user_limit optional int32 = 9
     *
     * @var int
     */
    protected $user_limit = null;

    /**
     * tags repeated string = 10
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * security_templates repeated message = 11
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityTemplate>
     */
    protected $security_templates = null;

    /**
     * contactlist_templates repeated message = 12
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ContactlistTemplate>
     */
    protected $contactlist_templates = null;

    /**
     * dynamic_contactlist_groups repeated message = 13
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup>
     */
    protected $dynamic_contactlist_groups = null;

    /**
     * account_id optional int32 = 14
     *
     * @var int
     */
    protected $account_id = null;

    /**
     * balance optional float = 15
     *
     * @var float
     */
    protected $balance = null;

    /**
     * packets repeated message = 16
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\user_packet>
     */
    protected $packets = null;

    /**
     * join_requests repeated string = 17
     *
     * @var \Protobuf\Collection
     */
    protected $join_requests = null;

    /**
     * user_pack_enabled optional bool = 18
     *
     * @var bool
     */
    protected $user_pack_enabled = null;

    /**
     * validate_login optional bool = 19
     *
     * @var bool
     */
    protected $validate_login = null;

    /**
     * sip_admin_enabled optional bool = 20
     *
     * @var bool
     */
    protected $sip_admin_enabled = null;

    /**
     * ldap_base_dn optional string = 21
     *
     * @var string
     */
    protected $ldap_base_dn = null;

    /**
     * pregenerated_keys_available optional int32 = 22
     *
     * @var int
     */
    protected $pregenerated_keys_available = null;

    /**
     * pregenerated_keys_used optional int32 = 23
     *
     * @var int
     */
    protected $pregenerated_keys_used = null;

    /**
     * pregenerated_keys_exported optional int32 = 24
     *
     * @var int
     */
    protected $pregenerated_keys_exported = null;

    /**
     * accounts_waiting_initialization optional int32 = 25
     *
     * @var int
     */
    protected $accounts_waiting_initialization = null;

    /**
     * ldap_policy optional message = 26
     *
     * @var \EncryptServer\Protocol\Vipadmin\ba_ldap_policy
     */
    protected $ldap_policy = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->blocked = false;
        $this->user_pack_enabled = true;
        $this->validate_login = true;
        $this->sip_admin_enabled = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param string $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'access' has a value
     *
     * @return bool
     */
    public function hasAccess()
    {
        return $this->access !== null;
    }

    /**
     * Get 'access' value
     *
     * @return int
     */
    public function getAccess()
    {
        return $this->access;
    }

    /**
     * Set 'access' value
     *
     * @param int $value
     */
    public function setAccess($value = null)
    {
        $this->access = $value;
    }

    /**
     * Check if 'keys' has a value
     *
     * @return bool
     */
    public function hasKeys()
    {
        return $this->keys !== null;
    }

    /**
     * Get 'keys' value
     *
     * @return string
     */
    public function getKeys()
    {
        return $this->keys;
    }

    /**
     * Set 'keys' value
     *
     * @param string $value
     */
    public function setKeys($value = null)
    {
        $this->keys = $value;
    }

    /**
     * Check if 'owner' has a value
     *
     * @return bool
     */
    public function hasOwner()
    {
        return $this->owner !== null;
    }

    /**
     * Get 'owner' value
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->owner;
    }

    /**
     * Set 'owner' value
     *
     * @param string $value
     */
    public function setOwner($value = null)
    {
        $this->owner = $value;
    }

    /**
     * Check if 'details' has a value
     *
     * @return bool
     */
    public function hasDetails()
    {
        return $this->details !== null;
    }

    /**
     * Get 'details' value
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->details;
    }

    /**
     * Set 'details' value
     *
     * @param string $value
     */
    public function setDetails($value = null)
    {
        $this->details = $value;
    }

    /**
     * Check if 'blocked' has a value
     *
     * @return bool
     */
    public function hasBlocked()
    {
        return $this->blocked !== null;
    }

    /**
     * Get 'blocked' value
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->blocked;
    }

    /**
     * Set 'blocked' value
     *
     * @param bool $value
     */
    public function setBlocked($value = null)
    {
        $this->blocked = $value;
    }

    /**
     * Check if 'user_count' has a value
     *
     * @return bool
     */
    public function hasUserCount()
    {
        return $this->user_count !== null;
    }

    /**
     * Get 'user_count' value
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->user_count;
    }

    /**
     * Set 'user_count' value
     *
     * @param int $value
     */
    public function setUserCount($value = null)
    {
        $this->user_count = $value;
    }

    /**
     * Check if 'user_limit' has a value
     *
     * @return bool
     */
    public function hasUserLimit()
    {
        return $this->user_limit !== null;
    }

    /**
     * Get 'user_limit' value
     *
     * @return int
     */
    public function getUserLimit()
    {
        return $this->user_limit;
    }

    /**
     * Set 'user_limit' value
     *
     * @param int $value
     */
    public function setUserLimit($value = null)
    {
        $this->user_limit = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'security_templates' has a value
     *
     * @return bool
     */
    public function hasSecurityTemplatesList()
    {
        return $this->security_templates !== null;
    }

    /**
     * Get 'security_templates' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityTemplate>
     */
    public function getSecurityTemplatesList()
    {
        return $this->security_templates;
    }

    /**
     * Set 'security_templates' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityTemplate> $value
     */
    public function setSecurityTemplatesList(\Protobuf\Collection $value = null)
    {
        $this->security_templates = $value;
    }

    /**
     * Add a new element to 'security_templates'
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityTemplate $value
     */
    public function addSecurityTemplates(\EncryptServer\Protocol\Vipadmin\SecurityTemplate $value)
    {
        if ($this->security_templates === null) {
            $this->security_templates = new \Protobuf\MessageCollection();
        }

        $this->security_templates->add($value);
    }

    /**
     * Check if 'contactlist_templates' has a value
     *
     * @return bool
     */
    public function hasContactlistTemplatesList()
    {
        return $this->contactlist_templates !== null;
    }

    /**
     * Get 'contactlist_templates' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ContactlistTemplate>
     */
    public function getContactlistTemplatesList()
    {
        return $this->contactlist_templates;
    }

    /**
     * Set 'contactlist_templates' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ContactlistTemplate> $value
     */
    public function setContactlistTemplatesList(\Protobuf\Collection $value = null)
    {
        $this->contactlist_templates = $value;
    }

    /**
     * Add a new element to 'contactlist_templates'
     *
     * @param \EncryptServer\Protocol\Vipadmin\ContactlistTemplate $value
     */
    public function addContactlistTemplates(\EncryptServer\Protocol\Vipadmin\ContactlistTemplate $value)
    {
        if ($this->contactlist_templates === null) {
            $this->contactlist_templates = new \Protobuf\MessageCollection();
        }

        $this->contactlist_templates->add($value);
    }

    /**
     * Check if 'dynamic_contactlist_groups' has a value
     *
     * @return bool
     */
    public function hasDynamicContactlistGroupsList()
    {
        return $this->dynamic_contactlist_groups !== null;
    }

    /**
     * Get 'dynamic_contactlist_groups' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup>
     */
    public function getDynamicContactlistGroupsList()
    {
        return $this->dynamic_contactlist_groups;
    }

    /**
     * Set 'dynamic_contactlist_groups' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup> $value
     */
    public function setDynamicContactlistGroupsList(\Protobuf\Collection $value = null)
    {
        $this->dynamic_contactlist_groups = $value;
    }

    /**
     * Add a new element to 'dynamic_contactlist_groups'
     *
     * @param \EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup $value
     */
    public function addDynamicContactlistGroups(\EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup $value)
    {
        if ($this->dynamic_contactlist_groups === null) {
            $this->dynamic_contactlist_groups = new \Protobuf\MessageCollection();
        }

        $this->dynamic_contactlist_groups->add($value);
    }

    /**
     * Check if 'account_id' has a value
     *
     * @return bool
     */
    public function hasAccountId()
    {
        return $this->account_id !== null;
    }

    /**
     * Get 'account_id' value
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->account_id;
    }

    /**
     * Set 'account_id' value
     *
     * @param int $value
     */
    public function setAccountId($value = null)
    {
        $this->account_id = $value;
    }

    /**
     * Check if 'balance' has a value
     *
     * @return bool
     */
    public function hasBalance()
    {
        return $this->balance !== null;
    }

    /**
     * Get 'balance' value
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * Set 'balance' value
     *
     * @param float $value
     */
    public function setBalance($value = null)
    {
        $this->balance = $value;
    }

    /**
     * Check if 'packets' has a value
     *
     * @return bool
     */
    public function hasPacketsList()
    {
        return $this->packets !== null;
    }

    /**
     * Get 'packets' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\user_packet>
     */
    public function getPacketsList()
    {
        return $this->packets;
    }

    /**
     * Set 'packets' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\user_packet> $value
     */
    public function setPacketsList(\Protobuf\Collection $value = null)
    {
        $this->packets = $value;
    }

    /**
     * Add a new element to 'packets'
     *
     * @param \EncryptServer\Protocol\Vipadmin\user_packet $value
     */
    public function addPackets(\EncryptServer\Protocol\Vipadmin\user_packet $value)
    {
        if ($this->packets === null) {
            $this->packets = new \Protobuf\MessageCollection();
        }

        $this->packets->add($value);
    }

    /**
     * Check if 'join_requests' has a value
     *
     * @return bool
     */
    public function hasJoinRequestsList()
    {
        return $this->join_requests !== null;
    }

    /**
     * Get 'join_requests' value
     *
     * @return \Protobuf\Collection
     */
    public function getJoinRequestsList()
    {
        return $this->join_requests;
    }

    /**
     * Set 'join_requests' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setJoinRequestsList(\Protobuf\Collection $value = null)
    {
        $this->join_requests = $value;
    }

    /**
     * Add a new element to 'join_requests'
     *
     * @param string $value
     */
    public function addJoinRequests($value)
    {
        if ($this->join_requests === null) {
            $this->join_requests = new \Protobuf\ScalarCollection();
        }

        $this->join_requests->add($value);
    }

    /**
     * Check if 'user_pack_enabled' has a value
     *
     * @return bool
     */
    public function hasUserPackEnabled()
    {
        return $this->user_pack_enabled !== null;
    }

    /**
     * Get 'user_pack_enabled' value
     *
     * @return bool
     */
    public function getUserPackEnabled()
    {
        return $this->user_pack_enabled;
    }

    /**
     * Set 'user_pack_enabled' value
     *
     * @param bool $value
     */
    public function setUserPackEnabled($value = null)
    {
        $this->user_pack_enabled = $value;
    }

    /**
     * Check if 'validate_login' has a value
     *
     * @return bool
     */
    public function hasValidateLogin()
    {
        return $this->validate_login !== null;
    }

    /**
     * Get 'validate_login' value
     *
     * @return bool
     */
    public function getValidateLogin()
    {
        return $this->validate_login;
    }

    /**
     * Set 'validate_login' value
     *
     * @param bool $value
     */
    public function setValidateLogin($value = null)
    {
        $this->validate_login = $value;
    }

    /**
     * Check if 'sip_admin_enabled' has a value
     *
     * @return bool
     */
    public function hasSipAdminEnabled()
    {
        return $this->sip_admin_enabled !== null;
    }

    /**
     * Get 'sip_admin_enabled' value
     *
     * @return bool
     */
    public function getSipAdminEnabled()
    {
        return $this->sip_admin_enabled;
    }

    /**
     * Set 'sip_admin_enabled' value
     *
     * @param bool $value
     */
    public function setSipAdminEnabled($value = null)
    {
        $this->sip_admin_enabled = $value;
    }

    /**
     * Check if 'ldap_base_dn' has a value
     *
     * @return bool
     */
    public function hasLdapBaseDn()
    {
        return $this->ldap_base_dn !== null;
    }

    /**
     * Get 'ldap_base_dn' value
     *
     * @return string
     */
    public function getLdapBaseDn()
    {
        return $this->ldap_base_dn;
    }

    /**
     * Set 'ldap_base_dn' value
     *
     * @param string $value
     */
    public function setLdapBaseDn($value = null)
    {
        $this->ldap_base_dn = $value;
    }

    /**
     * Check if 'pregenerated_keys_available' has a value
     *
     * @return bool
     */
    public function hasPregeneratedKeysAvailable()
    {
        return $this->pregenerated_keys_available !== null;
    }

    /**
     * Get 'pregenerated_keys_available' value
     *
     * @return int
     */
    public function getPregeneratedKeysAvailable()
    {
        return $this->pregenerated_keys_available;
    }

    /**
     * Set 'pregenerated_keys_available' value
     *
     * @param int $value
     */
    public function setPregeneratedKeysAvailable($value = null)
    {
        $this->pregenerated_keys_available = $value;
    }

    /**
     * Check if 'pregenerated_keys_used' has a value
     *
     * @return bool
     */
    public function hasPregeneratedKeysUsed()
    {
        return $this->pregenerated_keys_used !== null;
    }

    /**
     * Get 'pregenerated_keys_used' value
     *
     * @return int
     */
    public function getPregeneratedKeysUsed()
    {
        return $this->pregenerated_keys_used;
    }

    /**
     * Set 'pregenerated_keys_used' value
     *
     * @param int $value
     */
    public function setPregeneratedKeysUsed($value = null)
    {
        $this->pregenerated_keys_used = $value;
    }

    /**
     * Check if 'pregenerated_keys_exported' has a value
     *
     * @return bool
     */
    public function hasPregeneratedKeysExported()
    {
        return $this->pregenerated_keys_exported !== null;
    }

    /**
     * Get 'pregenerated_keys_exported' value
     *
     * @return int
     */
    public function getPregeneratedKeysExported()
    {
        return $this->pregenerated_keys_exported;
    }

    /**
     * Set 'pregenerated_keys_exported' value
     *
     * @param int $value
     */
    public function setPregeneratedKeysExported($value = null)
    {
        $this->pregenerated_keys_exported = $value;
    }

    /**
     * Check if 'accounts_waiting_initialization' has a value
     *
     * @return bool
     */
    public function hasAccountsWaitingInitialization()
    {
        return $this->accounts_waiting_initialization !== null;
    }

    /**
     * Get 'accounts_waiting_initialization' value
     *
     * @return int
     */
    public function getAccountsWaitingInitialization()
    {
        return $this->accounts_waiting_initialization;
    }

    /**
     * Set 'accounts_waiting_initialization' value
     *
     * @param int $value
     */
    public function setAccountsWaitingInitialization($value = null)
    {
        $this->accounts_waiting_initialization = $value;
    }

    /**
     * Check if 'ldap_policy' has a value
     *
     * @return bool
     */
    public function hasLdapPolicy()
    {
        return $this->ldap_policy !== null;
    }

    /**
     * Get 'ldap_policy' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\ba_ldap_policy
     */
    public function getLdapPolicy()
    {
        return $this->ldap_policy;
    }

    /**
     * Set 'ldap_policy' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\ba_ldap_policy $value
     */
    public function setLdapPolicy(\EncryptServer\Protocol\Vipadmin\ba_ldap_policy $value = null)
    {
        $this->ldap_policy = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'name' => null,
            'access' => null,
            'keys' => null,
            'owner' => null,
            'details' => null,
            'blocked' => false,
            'user_count' => null,
            'user_limit' => null,
            'tags' => [],
            'security_templates' => [],
            'contactlist_templates' => [],
            'dynamic_contactlist_groups' => [],
            'account_id' => null,
            'balance' => null,
            'packets' => [],
            'join_requests' => [],
            'user_pack_enabled' => true,
            'validate_login' => true,
            'sip_admin_enabled' => false,
            'ldap_base_dn' => null,
            'pregenerated_keys_available' => null,
            'pregenerated_keys_used' => null,
            'pregenerated_keys_exported' => null,
            'accounts_waiting_initialization' => null,
            'ldap_policy' => null
        ], $values);

        $message->setId($values['id']);
        $message->setName($values['name']);
        $message->setAccess($values['access']);
        $message->setKeys($values['keys']);
        $message->setOwner($values['owner']);
        $message->setDetails($values['details']);
        $message->setBlocked($values['blocked']);
        $message->setUserCount($values['user_count']);
        $message->setUserLimit($values['user_limit']);
        $message->setAccountId($values['account_id']);
        $message->setBalance($values['balance']);
        $message->setUserPackEnabled($values['user_pack_enabled']);
        $message->setValidateLogin($values['validate_login']);
        $message->setSipAdminEnabled($values['sip_admin_enabled']);
        $message->setLdapBaseDn($values['ldap_base_dn']);
        $message->setPregeneratedKeysAvailable($values['pregenerated_keys_available']);
        $message->setPregeneratedKeysUsed($values['pregenerated_keys_used']);
        $message->setPregeneratedKeysExported($values['pregenerated_keys_exported']);
        $message->setAccountsWaitingInitialization($values['accounts_waiting_initialization']);
        $message->setLdapPolicy($values['ldap_policy']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        foreach ($values['security_templates'] as $item) {
            $message->addSecurityTemplates($item);
        }

        foreach ($values['contactlist_templates'] as $item) {
            $message->addContactlistTemplates($item);
        }

        foreach ($values['dynamic_contactlist_groups'] as $item) {
            $message->addDynamicContactlistGroups($item);
        }

        foreach ($values['packets'] as $item) {
            $message->addPackets($item);
        }

        foreach ($values['join_requests'] as $item) {
            $message->addJoinRequests($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'business_account',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'access',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'keys',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'owner',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'details',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'blocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'user_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'user_limit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'security_templates',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.SecurityTemplate'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'contactlist_templates',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ContactlistTemplate'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'dynamic_contactlist_groups',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.DynamicContactlistGroup'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'balance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'packets',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.user_packet'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'join_requests',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'user_pack_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'validate_login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'sip_admin_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'ldap_base_dn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'pregenerated_keys_available',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'pregenerated_keys_used',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'pregenerated_keys_exported',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'accounts_waiting_initialization',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'ldap_policy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ba_ldap_policy'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\business_account#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->id);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->name);
        }

        if ($this->access !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->access);
        }

        if ($this->keys !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->keys);
        }

        if ($this->owner !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->owner);
        }

        if ($this->details !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->details);
        }

        if ($this->blocked !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->blocked);
        }

        if ($this->user_count !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->user_count);
        }

        if ($this->user_limit !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->user_limit);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->security_templates !== null) {
            foreach ($this->security_templates as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->contactlist_templates !== null) {
            foreach ($this->contactlist_templates as $val) {
                $writer->writeVarint($stream, 98);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->dynamic_contactlist_groups !== null) {
            foreach ($this->dynamic_contactlist_groups as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->account_id !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->account_id);
        }

        if ($this->balance !== null) {
            $writer->writeVarint($stream, 125);
            $writer->writeFloat($stream, $this->balance);
        }

        if ($this->packets !== null) {
            foreach ($this->packets as $val) {
                $writer->writeVarint($stream, 130);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->join_requests !== null) {
            foreach ($this->join_requests as $val) {
                $writer->writeVarint($stream, 138);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->user_pack_enabled !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->user_pack_enabled);
        }

        if ($this->validate_login !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->validate_login);
        }

        if ($this->sip_admin_enabled !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->sip_admin_enabled);
        }

        if ($this->ldap_base_dn !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeString($stream, $this->ldap_base_dn);
        }

        if ($this->pregenerated_keys_available !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->pregenerated_keys_available);
        }

        if ($this->pregenerated_keys_used !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeVarint($stream, $this->pregenerated_keys_used);
        }

        if ($this->pregenerated_keys_exported !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->pregenerated_keys_exported);
        }

        if ($this->accounts_waiting_initialization !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeVarint($stream, $this->accounts_waiting_initialization);
        }

        if ($this->ldap_policy !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeVarint($stream, $this->ldap_policy->serializedSize($sizeContext));
            $this->ldap_policy->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->access = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->keys = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->owner = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->details = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->user_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->user_limit = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityTemplate();

                if ($this->security_templates === null) {
                    $this->security_templates = new \Protobuf\MessageCollection();
                }

                $this->security_templates->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ContactlistTemplate();

                if ($this->contactlist_templates === null) {
                    $this->contactlist_templates = new \Protobuf\MessageCollection();
                }

                $this->contactlist_templates->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\DynamicContactlistGroup();

                if ($this->dynamic_contactlist_groups === null) {
                    $this->dynamic_contactlist_groups = new \Protobuf\MessageCollection();
                }

                $this->dynamic_contactlist_groups->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->account_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->balance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\user_packet();

                if ($this->packets === null) {
                    $this->packets = new \Protobuf\MessageCollection();
                }

                $this->packets->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->join_requests === null) {
                    $this->join_requests = new \Protobuf\ScalarCollection();
                }

                $this->join_requests->add($reader->readString($stream));

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->user_pack_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->validate_login = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sip_admin_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ldap_base_dn = $reader->readString($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pregenerated_keys_available = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pregenerated_keys_used = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pregenerated_keys_exported = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->accounts_waiting_initialization = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ba_ldap_policy();

                $this->ldap_policy = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->id);
        }

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->access !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->access);
        }

        if ($this->keys !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->keys);
        }

        if ($this->owner !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->owner);
        }

        if ($this->details !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->details);
        }

        if ($this->blocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->user_count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->user_count);
        }

        if ($this->user_limit !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->user_limit);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->security_templates !== null) {
            foreach ($this->security_templates as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->contactlist_templates !== null) {
            foreach ($this->contactlist_templates as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->dynamic_contactlist_groups !== null) {
            foreach ($this->dynamic_contactlist_groups as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->account_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_id);
        }

        if ($this->balance !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->packets !== null) {
            foreach ($this->packets as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->join_requests !== null) {
            foreach ($this->join_requests as $val) {
                $size += 2;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->user_pack_enabled !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->validate_login !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sip_admin_enabled !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->ldap_base_dn !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ldap_base_dn);
        }

        if ($this->pregenerated_keys_available !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->pregenerated_keys_available);
        }

        if ($this->pregenerated_keys_used !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->pregenerated_keys_used);
        }

        if ($this->pregenerated_keys_exported !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->pregenerated_keys_exported);
        }

        if ($this->accounts_waiting_initialization !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->accounts_waiting_initialization);
        }

        if ($this->ldap_policy !== null) {
            $innerSize = $this->ldap_policy->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->name = null;
        $this->access = null;
        $this->keys = null;
        $this->owner = null;
        $this->details = null;
        $this->blocked = false;
        $this->user_count = null;
        $this->user_limit = null;
        $this->tags = null;
        $this->security_templates = null;
        $this->contactlist_templates = null;
        $this->dynamic_contactlist_groups = null;
        $this->account_id = null;
        $this->balance = null;
        $this->packets = null;
        $this->join_requests = null;
        $this->user_pack_enabled = true;
        $this->validate_login = true;
        $this->sip_admin_enabled = false;
        $this->ldap_base_dn = null;
        $this->pregenerated_keys_available = null;
        $this->pregenerated_keys_used = null;
        $this->pregenerated_keys_exported = null;
        $this->accounts_waiting_initialization = null;
        $this->ldap_policy = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\business_account) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->access = ($message->access !== null) ? $message->access : $this->access;
        $this->keys = ($message->keys !== null) ? $message->keys : $this->keys;
        $this->owner = ($message->owner !== null) ? $message->owner : $this->owner;
        $this->details = ($message->details !== null) ? $message->details : $this->details;
        $this->blocked = ($message->blocked !== null) ? $message->blocked : $this->blocked;
        $this->user_count = ($message->user_count !== null) ? $message->user_count : $this->user_count;
        $this->user_limit = ($message->user_limit !== null) ? $message->user_limit : $this->user_limit;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->security_templates = ($message->security_templates !== null) ? $message->security_templates : $this->security_templates;
        $this->contactlist_templates = ($message->contactlist_templates !== null) ? $message->contactlist_templates : $this->contactlist_templates;
        $this->dynamic_contactlist_groups = ($message->dynamic_contactlist_groups !== null) ? $message->dynamic_contactlist_groups : $this->dynamic_contactlist_groups;
        $this->account_id = ($message->account_id !== null) ? $message->account_id : $this->account_id;
        $this->balance = ($message->balance !== null) ? $message->balance : $this->balance;
        $this->packets = ($message->packets !== null) ? $message->packets : $this->packets;
        $this->join_requests = ($message->join_requests !== null) ? $message->join_requests : $this->join_requests;
        $this->user_pack_enabled = ($message->user_pack_enabled !== null) ? $message->user_pack_enabled : $this->user_pack_enabled;
        $this->validate_login = ($message->validate_login !== null) ? $message->validate_login : $this->validate_login;
        $this->sip_admin_enabled = ($message->sip_admin_enabled !== null) ? $message->sip_admin_enabled : $this->sip_admin_enabled;
        $this->ldap_base_dn = ($message->ldap_base_dn !== null) ? $message->ldap_base_dn : $this->ldap_base_dn;
        $this->pregenerated_keys_available = ($message->pregenerated_keys_available !== null) ? $message->pregenerated_keys_available : $this->pregenerated_keys_available;
        $this->pregenerated_keys_used = ($message->pregenerated_keys_used !== null) ? $message->pregenerated_keys_used : $this->pregenerated_keys_used;
        $this->pregenerated_keys_exported = ($message->pregenerated_keys_exported !== null) ? $message->pregenerated_keys_exported : $this->pregenerated_keys_exported;
        $this->accounts_waiting_initialization = ($message->accounts_waiting_initialization !== null) ? $message->accounts_waiting_initialization : $this->accounts_waiting_initialization;
        $this->ldap_policy = ($message->ldap_policy !== null) ? $message->ldap_policy : $this->ldap_policy;
    }


}


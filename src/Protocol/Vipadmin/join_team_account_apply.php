<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.join_team_account_apply
 */
class join_team_account_apply extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * domain_id optional string = 2
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * business_account_id optional string = 3
     *
     * @var string
     */
    protected $business_account_id = null;

    /**
     * login optional string = 4
     *
     * @var string
     */
    protected $login = null;

    /**
     * contactlist_template_id optional string = 7
     *
     * @var string
     */
    protected $contactlist_template_id = null;

    /**
     * contactlist_dynamic_group optional string = 8
     *
     * @var string
     */
    protected $contactlist_dynamic_group = null;

    /**
     * security_template optional message = 9
     *
     * @var \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    protected $security_template = null;

    /**
     * tags repeated string = 10
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * security_template_id optional string = 11
     *
     * @var string
     */
    protected $security_template_id = null;

    /**
     * comments optional string = 12
     *
     * @var string
     */
    protected $comments = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'business_account_id' has a value
     *
     * @return bool
     */
    public function hasBusinessAccountId()
    {
        return $this->business_account_id !== null;
    }

    /**
     * Get 'business_account_id' value
     *
     * @return string
     */
    public function getBusinessAccountId()
    {
        return $this->business_account_id;
    }

    /**
     * Set 'business_account_id' value
     *
     * @param string $value
     */
    public function setBusinessAccountId($value = null)
    {
        $this->business_account_id = $value;
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value = null)
    {
        $this->login = $value;
    }

    /**
     * Check if 'contactlist_template_id' has a value
     *
     * @return bool
     */
    public function hasContactlistTemplateId()
    {
        return $this->contactlist_template_id !== null;
    }

    /**
     * Get 'contactlist_template_id' value
     *
     * @return string
     */
    public function getContactlistTemplateId()
    {
        return $this->contactlist_template_id;
    }

    /**
     * Set 'contactlist_template_id' value
     *
     * @param string $value
     */
    public function setContactlistTemplateId($value = null)
    {
        $this->contactlist_template_id = $value;
    }

    /**
     * Check if 'contactlist_dynamic_group' has a value
     *
     * @return bool
     */
    public function hasContactlistDynamicGroup()
    {
        return $this->contactlist_dynamic_group !== null;
    }

    /**
     * Get 'contactlist_dynamic_group' value
     *
     * @return string
     */
    public function getContactlistDynamicGroup()
    {
        return $this->contactlist_dynamic_group;
    }

    /**
     * Set 'contactlist_dynamic_group' value
     *
     * @param string $value
     */
    public function setContactlistDynamicGroup($value = null)
    {
        $this->contactlist_dynamic_group = $value;
    }

    /**
     * Check if 'security_template' has a value
     *
     * @return bool
     */
    public function hasSecurityTemplate()
    {
        return $this->security_template !== null;
    }

    /**
     * Get 'security_template' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    public function getSecurityTemplate()
    {
        return $this->security_template;
    }

    /**
     * Set 'security_template' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityTemplate $value
     */
    public function setSecurityTemplate(\EncryptServer\Protocol\Vipadmin\SecurityTemplate $value = null)
    {
        $this->security_template = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'security_template_id' has a value
     *
     * @return bool
     */
    public function hasSecurityTemplateId()
    {
        return $this->security_template_id !== null;
    }

    /**
     * Get 'security_template_id' value
     *
     * @return string
     */
    public function getSecurityTemplateId()
    {
        return $this->security_template_id;
    }

    /**
     * Set 'security_template_id' value
     *
     * @param string $value
     */
    public function setSecurityTemplateId($value = null)
    {
        $this->security_template_id = $value;
    }

    /**
     * Check if 'comments' has a value
     *
     * @return bool
     */
    public function hasComments()
    {
        return $this->comments !== null;
    }

    /**
     * Get 'comments' value
     *
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Set 'comments' value
     *
     * @param string $value
     */
    public function setComments($value = null)
    {
        $this->comments = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'domain_id' => null,
            'business_account_id' => null,
            'login' => null,
            'contactlist_template_id' => null,
            'contactlist_dynamic_group' => null,
            'security_template' => null,
            'tags' => [],
            'security_template_id' => null,
            'comments' => null
        ], $values);

        $message->setId($values['id']);
        $message->setDomainId($values['domain_id']);
        $message->setBusinessAccountId($values['business_account_id']);
        $message->setLogin($values['login']);
        $message->setContactlistTemplateId($values['contactlist_template_id']);
        $message->setContactlistDynamicGroup($values['contactlist_dynamic_group']);
        $message->setSecurityTemplate($values['security_template']);
        $message->setSecurityTemplateId($values['security_template_id']);
        $message->setComments($values['comments']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'join_team_account_apply',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'business_account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'contactlist_template_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'contactlist_dynamic_group',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'security_template',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.SecurityTemplate'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'security_template_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'comments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\join_team_account_apply#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->business_account_id);
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->login);
        }

        if ($this->contactlist_template_id !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->contactlist_template_id);
        }

        if ($this->contactlist_dynamic_group !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->contactlist_dynamic_group);
        }

        if ($this->security_template !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->security_template->serializedSize($sizeContext));
            $this->security_template->writeTo($context);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->security_template_id !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->security_template_id);
        }

        if ($this->comments !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->comments);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->business_account_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->contactlist_template_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->contactlist_dynamic_group = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityTemplate();

                $this->security_template = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->security_template_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->comments = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->business_account_id);
        }

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->contactlist_template_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->contactlist_template_id);
        }

        if ($this->contactlist_dynamic_group !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->contactlist_dynamic_group);
        }

        if ($this->security_template !== null) {
            $innerSize = $this->security_template->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->security_template_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->security_template_id);
        }

        if ($this->comments !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->comments);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->domain_id = null;
        $this->business_account_id = null;
        $this->login = null;
        $this->contactlist_template_id = null;
        $this->contactlist_dynamic_group = null;
        $this->security_template = null;
        $this->tags = null;
        $this->security_template_id = null;
        $this->comments = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\join_team_account_apply) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->business_account_id = ($message->business_account_id !== null) ? $message->business_account_id : $this->business_account_id;
        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->contactlist_template_id = ($message->contactlist_template_id !== null) ? $message->contactlist_template_id : $this->contactlist_template_id;
        $this->contactlist_dynamic_group = ($message->contactlist_dynamic_group !== null) ? $message->contactlist_dynamic_group : $this->contactlist_dynamic_group;
        $this->security_template = ($message->security_template !== null) ? $message->security_template : $this->security_template;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->security_template_id = ($message->security_template_id !== null) ? $message->security_template_id : $this->security_template_id;
        $this->comments = ($message->comments !== null) ? $message->comments : $this->comments;
    }


}


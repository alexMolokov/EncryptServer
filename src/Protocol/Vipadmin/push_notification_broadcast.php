<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.push_notification_broadcast
 */
class push_notification_broadcast extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * domain_id optional string = 2
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * class optional string = 3
     *
     * @var string
     */
    protected $class = null;

    /**
     * text optional string = 4
     *
     * @var string
     */
    protected $text = null;

    /**
     * min_client_build optional int32 = 5
     *
     * @var int
     */
    protected $min_client_build = null;

    /**
     * max_client_build optional int32 = 6
     *
     * @var int
     */
    protected $max_client_build = null;

    /**
     * localization_key optional string = 7
     *
     * @var string
     */
    protected $localization_key = null;

    /**
     * category optional string = 8
     *
     * @var string
     */
    protected $category = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'class' has a value
     *
     * @return bool
     */
    public function hasClass()
    {
        return $this->class !== null;
    }

    /**
     * Get 'class' value
     *
     * @return string
     */
    public function getClass()
    {
        return $this->class;
    }

    /**
     * Set 'class' value
     *
     * @param string $value
     */
    public function setClass($value = null)
    {
        $this->class = $value;
    }

    /**
     * Check if 'text' has a value
     *
     * @return bool
     */
    public function hasText()
    {
        return $this->text !== null;
    }

    /**
     * Get 'text' value
     *
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * Set 'text' value
     *
     * @param string $value
     */
    public function setText($value = null)
    {
        $this->text = $value;
    }

    /**
     * Check if 'min_client_build' has a value
     *
     * @return bool
     */
    public function hasMinClientBuild()
    {
        return $this->min_client_build !== null;
    }

    /**
     * Get 'min_client_build' value
     *
     * @return int
     */
    public function getMinClientBuild()
    {
        return $this->min_client_build;
    }

    /**
     * Set 'min_client_build' value
     *
     * @param int $value
     */
    public function setMinClientBuild($value = null)
    {
        $this->min_client_build = $value;
    }

    /**
     * Check if 'max_client_build' has a value
     *
     * @return bool
     */
    public function hasMaxClientBuild()
    {
        return $this->max_client_build !== null;
    }

    /**
     * Get 'max_client_build' value
     *
     * @return int
     */
    public function getMaxClientBuild()
    {
        return $this->max_client_build;
    }

    /**
     * Set 'max_client_build' value
     *
     * @param int $value
     */
    public function setMaxClientBuild($value = null)
    {
        $this->max_client_build = $value;
    }

    /**
     * Check if 'localization_key' has a value
     *
     * @return bool
     */
    public function hasLocalizationKey()
    {
        return $this->localization_key !== null;
    }

    /**
     * Get 'localization_key' value
     *
     * @return string
     */
    public function getLocalizationKey()
    {
        return $this->localization_key;
    }

    /**
     * Set 'localization_key' value
     *
     * @param string $value
     */
    public function setLocalizationKey($value = null)
    {
        $this->localization_key = $value;
    }

    /**
     * Check if 'category' has a value
     *
     * @return bool
     */
    public function hasCategory()
    {
        return $this->category !== null;
    }

    /**
     * Get 'category' value
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set 'category' value
     *
     * @param string $value
     */
    public function setCategory($value = null)
    {
        $this->category = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'domain_id' => null,
            'class' => null,
            'text' => null,
            'min_client_build' => null,
            'max_client_build' => null,
            'localization_key' => null,
            'category' => null
        ], $values);

        $message->setId($values['id']);
        $message->setDomainId($values['domain_id']);
        $message->setClass($values['class']);
        $message->setText($values['text']);
        $message->setMinClientBuild($values['min_client_build']);
        $message->setMaxClientBuild($values['max_client_build']);
        $message->setLocalizationKey($values['localization_key']);
        $message->setCategory($values['category']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'push_notification_broadcast',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'class',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'text',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'min_client_build',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'max_client_build',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'localization_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'category',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\push_notification_broadcast#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->class !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->class);
        }

        if ($this->text !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->text);
        }

        if ($this->min_client_build !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->min_client_build);
        }

        if ($this->max_client_build !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->max_client_build);
        }

        if ($this->localization_key !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->localization_key);
        }

        if ($this->category !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->category);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->class = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->text = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->min_client_build = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_client_build = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->localization_key = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->category = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->class !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->class);
        }

        if ($this->text !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->text);
        }

        if ($this->min_client_build !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->min_client_build);
        }

        if ($this->max_client_build !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_client_build);
        }

        if ($this->localization_key !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->localization_key);
        }

        if ($this->category !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->category);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->domain_id = null;
        $this->class = null;
        $this->text = null;
        $this->min_client_build = null;
        $this->max_client_build = null;
        $this->localization_key = null;
        $this->category = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\push_notification_broadcast) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->class = ($message->class !== null) ? $message->class : $this->class;
        $this->text = ($message->text !== null) ? $message->text : $this->text;
        $this->min_client_build = ($message->min_client_build !== null) ? $message->min_client_build : $this->min_client_build;
        $this->max_client_build = ($message->max_client_build !== null) ? $message->max_client_build : $this->max_client_build;
        $this->localization_key = ($message->localization_key !== null) ? $message->localization_key : $this->localization_key;
        $this->category = ($message->category !== null) ? $message->category : $this->category;
    }


}


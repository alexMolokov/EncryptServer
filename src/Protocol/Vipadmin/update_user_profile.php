<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.update_user_profile
 */
class update_user_profile extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * nickname optional string = 1
     *
     * @var string
     */
    protected $nickname = null;

    /**
     * name1 optional string = 2
     *
     * @var string
     */
    protected $name1 = null;

    /**
     * name2 optional string = 3
     *
     * @var string
     */
    protected $name2 = null;

    /**
     * name3 optional string = 4
     *
     * @var string
     */
    protected $name3 = null;

    /**
     * vcard optional string = 5
     *
     * @var string
     */
    protected $vcard = null;

    /**
     * image optional string = 6
     *
     * @var string
     */
    protected $image = null;

    /**
     * Check if 'nickname' has a value
     *
     * @return bool
     */
    public function hasNickname()
    {
        return $this->nickname !== null;
    }

    /**
     * Get 'nickname' value
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set 'nickname' value
     *
     * @param string $value
     */
    public function setNickname($value = null)
    {
        $this->nickname = $value;
    }

    /**
     * Check if 'name1' has a value
     *
     * @return bool
     */
    public function hasName1()
    {
        return $this->name1 !== null;
    }

    /**
     * Get 'name1' value
     *
     * @return string
     */
    public function getName1()
    {
        return $this->name1;
    }

    /**
     * Set 'name1' value
     *
     * @param string $value
     */
    public function setName1($value = null)
    {
        $this->name1 = $value;
    }

    /**
     * Check if 'name2' has a value
     *
     * @return bool
     */
    public function hasName2()
    {
        return $this->name2 !== null;
    }

    /**
     * Get 'name2' value
     *
     * @return string
     */
    public function getName2()
    {
        return $this->name2;
    }

    /**
     * Set 'name2' value
     *
     * @param string $value
     */
    public function setName2($value = null)
    {
        $this->name2 = $value;
    }

    /**
     * Check if 'name3' has a value
     *
     * @return bool
     */
    public function hasName3()
    {
        return $this->name3 !== null;
    }

    /**
     * Get 'name3' value
     *
     * @return string
     */
    public function getName3()
    {
        return $this->name3;
    }

    /**
     * Set 'name3' value
     *
     * @param string $value
     */
    public function setName3($value = null)
    {
        $this->name3 = $value;
    }

    /**
     * Check if 'vcard' has a value
     *
     * @return bool
     */
    public function hasVcard()
    {
        return $this->vcard !== null;
    }

    /**
     * Get 'vcard' value
     *
     * @return string
     */
    public function getVcard()
    {
        return $this->vcard;
    }

    /**
     * Set 'vcard' value
     *
     * @param string $value
     */
    public function setVcard($value = null)
    {
        $this->vcard = $value;
    }

    /**
     * Check if 'image' has a value
     *
     * @return bool
     */
    public function hasImage()
    {
        return $this->image !== null;
    }

    /**
     * Get 'image' value
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Set 'image' value
     *
     * @param string $value
     */
    public function setImage($value = null)
    {
        $this->image = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'nickname' => null,
            'name1' => null,
            'name2' => null,
            'name3' => null,
            'vcard' => null,
            'image' => null
        ], $values);

        $message->setNickname($values['nickname']);
        $message->setName1($values['name1']);
        $message->setName2($values['name2']);
        $message->setName3($values['name3']);
        $message->setVcard($values['vcard']);
        $message->setImage($values['image']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'update_user_profile',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'nickname',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'name1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'name2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'name3',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'vcard',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'image',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->nickname !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->nickname);
        }

        if ($this->name1 !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->name1);
        }

        if ($this->name2 !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->name2);
        }

        if ($this->name3 !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->name3);
        }

        if ($this->vcard !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->vcard);
        }

        if ($this->image !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->image);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->nickname = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name1 = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name2 = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name3 = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vcard = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->image = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->nickname !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->nickname);
        }

        if ($this->name1 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name1);
        }

        if ($this->name2 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name2);
        }

        if ($this->name3 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name3);
        }

        if ($this->vcard !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vcard);
        }

        if ($this->image !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->image);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->nickname = null;
        $this->name1 = null;
        $this->name2 = null;
        $this->name3 = null;
        $this->vcard = null;
        $this->image = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\update_user_profile) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->nickname = ($message->nickname !== null) ? $message->nickname : $this->nickname;
        $this->name1 = ($message->name1 !== null) ? $message->name1 : $this->name1;
        $this->name2 = ($message->name2 !== null) ? $message->name2 : $this->name2;
        $this->name3 = ($message->name3 !== null) ? $message->name3 : $this->name3;
        $this->vcard = ($message->vcard !== null) ? $message->vcard : $this->vcard;
        $this->image = ($message->image !== null) ? $message->image : $this->image;
    }


}


<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.UserCommand
 */
class UserCommand extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * password optional string = 1
     *
     * @var string
     */
    protected $password = null;

    /**
     * email optional string = 2
     *
     * @var string
     */
    protected $email = null;

    /**
     * name1 optional string = 3
     *
     * @var string
     */
    protected $name1 = null;

    /**
     * name2 optional string = 4
     *
     * @var string
     */
    protected $name2 = null;

    /**
     * name3 optional string = 5
     *
     * @var string
     */
    protected $name3 = null;

    /**
     * blocked optional bool = 6
     *
     * @var bool
     */
    protected $blocked = null;

    /**
     * nickname optional string = 7
     *
     * @var string
     */
    protected $nickname = null;

    /**
     * sip optional message = 8
     *
     * @var \EncryptServer\Protocol\Vipadmin\sip_parameters
     */
    protected $sip = null;

    /**
     * subscriprions repeated message = 9
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\subscription>
     */
    protected $subscriprions = null;

    /**
     * limits repeated message = 10
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\limit>
     */
    protected $limits = null;

    /**
     * comments optional string = 11
     *
     * @var string
     */
    protected $comments = null;

    /**
     * encrypted_fake_secret optional string = 12
     *
     * @var string
     */
    protected $encrypted_fake_secret = null;

    /**
     * encrypted_unlock_code optional string = 13
     *
     * @var string
     */
    protected $encrypted_unlock_code = null;

    /**
     * encrypted_password optional string = 14
     *
     * @var string
     */
    protected $encrypted_password = null;

    /**
     * fake_checkdata optional string = 15
     *
     * @var string
     */
    protected $fake_checkdata = null;

    /**
     * unlock_code optional string = 16
     *
     * @var string
     */
    protected $unlock_code = null;

    /**
     * password_hex optional string = 17
     *
     * @var string
     */
    protected $password_hex = null;

    /**
     * ldap_dn optional string = 18
     *
     * @var string
     */
    protected $ldap_dn = null;

    /**
     * secret_phrase_mode optional int32 = 19
     *
     * @var int
     */
    protected $secret_phrase_mode = null;

    /**
     * account_keys_state optional int32 = 20
     *
     * @var int
     */
    protected $account_keys_state = null;

    /**
     * preliminary_reset_mode optional int32 = 21
     *
     * @var int
     */
    protected $preliminary_reset_mode = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->secret_phrase_mode = '0';
        $this->account_keys_state = '0';
        $this->preliminary_reset_mode = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'password' has a value
     *
     * @return bool
     */
    public function hasPassword()
    {
        return $this->password !== null;
    }

    /**
     * Get 'password' value
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set 'password' value
     *
     * @param string $value
     */
    public function setPassword($value = null)
    {
        $this->password = $value;
    }

    /**
     * Check if 'email' has a value
     *
     * @return bool
     */
    public function hasEmail()
    {
        return $this->email !== null;
    }

    /**
     * Get 'email' value
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set 'email' value
     *
     * @param string $value
     */
    public function setEmail($value = null)
    {
        $this->email = $value;
    }

    /**
     * Check if 'name1' has a value
     *
     * @return bool
     */
    public function hasName1()
    {
        return $this->name1 !== null;
    }

    /**
     * Get 'name1' value
     *
     * @return string
     */
    public function getName1()
    {
        return $this->name1;
    }

    /**
     * Set 'name1' value
     *
     * @param string $value
     */
    public function setName1($value = null)
    {
        $this->name1 = $value;
    }

    /**
     * Check if 'name2' has a value
     *
     * @return bool
     */
    public function hasName2()
    {
        return $this->name2 !== null;
    }

    /**
     * Get 'name2' value
     *
     * @return string
     */
    public function getName2()
    {
        return $this->name2;
    }

    /**
     * Set 'name2' value
     *
     * @param string $value
     */
    public function setName2($value = null)
    {
        $this->name2 = $value;
    }

    /**
     * Check if 'name3' has a value
     *
     * @return bool
     */
    public function hasName3()
    {
        return $this->name3 !== null;
    }

    /**
     * Get 'name3' value
     *
     * @return string
     */
    public function getName3()
    {
        return $this->name3;
    }

    /**
     * Set 'name3' value
     *
     * @param string $value
     */
    public function setName3($value = null)
    {
        $this->name3 = $value;
    }

    /**
     * Check if 'blocked' has a value
     *
     * @return bool
     */
    public function hasBlocked()
    {
        return $this->blocked !== null;
    }

    /**
     * Get 'blocked' value
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->blocked;
    }

    /**
     * Set 'blocked' value
     *
     * @param bool $value
     */
    public function setBlocked($value = null)
    {
        $this->blocked = $value;
    }

    /**
     * Check if 'nickname' has a value
     *
     * @return bool
     */
    public function hasNickname()
    {
        return $this->nickname !== null;
    }

    /**
     * Get 'nickname' value
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set 'nickname' value
     *
     * @param string $value
     */
    public function setNickname($value = null)
    {
        $this->nickname = $value;
    }

    /**
     * Check if 'sip' has a value
     *
     * @return bool
     */
    public function hasSip()
    {
        return $this->sip !== null;
    }

    /**
     * Get 'sip' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\sip_parameters
     */
    public function getSip()
    {
        return $this->sip;
    }

    /**
     * Set 'sip' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\sip_parameters $value
     */
    public function setSip(\EncryptServer\Protocol\Vipadmin\sip_parameters $value = null)
    {
        $this->sip = $value;
    }

    /**
     * Check if 'subscriprions' has a value
     *
     * @return bool
     */
    public function hasSubscriprionsList()
    {
        return $this->subscriprions !== null;
    }

    /**
     * Get 'subscriprions' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\subscription>
     */
    public function getSubscriprionsList()
    {
        return $this->subscriprions;
    }

    /**
     * Set 'subscriprions' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\subscription> $value
     */
    public function setSubscriprionsList(\Protobuf\Collection $value = null)
    {
        $this->subscriprions = $value;
    }

    /**
     * Add a new element to 'subscriprions'
     *
     * @param \EncryptServer\Protocol\Vipadmin\subscription $value
     */
    public function addSubscriprions(\EncryptServer\Protocol\Vipadmin\subscription $value)
    {
        if ($this->subscriprions === null) {
            $this->subscriprions = new \Protobuf\MessageCollection();
        }

        $this->subscriprions->add($value);
    }

    /**
     * Check if 'limits' has a value
     *
     * @return bool
     */
    public function hasLimitsList()
    {
        return $this->limits !== null;
    }

    /**
     * Get 'limits' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\limit>
     */
    public function getLimitsList()
    {
        return $this->limits;
    }

    /**
     * Set 'limits' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\limit> $value
     */
    public function setLimitsList(\Protobuf\Collection $value = null)
    {
        $this->limits = $value;
    }

    /**
     * Add a new element to 'limits'
     *
     * @param \EncryptServer\Protocol\Vipadmin\limit $value
     */
    public function addLimits(\EncryptServer\Protocol\Vipadmin\limit $value)
    {
        if ($this->limits === null) {
            $this->limits = new \Protobuf\MessageCollection();
        }

        $this->limits->add($value);
    }

    /**
     * Check if 'comments' has a value
     *
     * @return bool
     */
    public function hasComments()
    {
        return $this->comments !== null;
    }

    /**
     * Get 'comments' value
     *
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Set 'comments' value
     *
     * @param string $value
     */
    public function setComments($value = null)
    {
        $this->comments = $value;
    }

    /**
     * Check if 'encrypted_fake_secret' has a value
     *
     * @return bool
     */
    public function hasEncryptedFakeSecret()
    {
        return $this->encrypted_fake_secret !== null;
    }

    /**
     * Get 'encrypted_fake_secret' value
     *
     * @return string
     */
    public function getEncryptedFakeSecret()
    {
        return $this->encrypted_fake_secret;
    }

    /**
     * Set 'encrypted_fake_secret' value
     *
     * @param string $value
     */
    public function setEncryptedFakeSecret($value = null)
    {
        $this->encrypted_fake_secret = $value;
    }

    /**
     * Check if 'encrypted_unlock_code' has a value
     *
     * @return bool
     */
    public function hasEncryptedUnlockCode()
    {
        return $this->encrypted_unlock_code !== null;
    }

    /**
     * Get 'encrypted_unlock_code' value
     *
     * @return string
     */
    public function getEncryptedUnlockCode()
    {
        return $this->encrypted_unlock_code;
    }

    /**
     * Set 'encrypted_unlock_code' value
     *
     * @param string $value
     */
    public function setEncryptedUnlockCode($value = null)
    {
        $this->encrypted_unlock_code = $value;
    }

    /**
     * Check if 'encrypted_password' has a value
     *
     * @return bool
     */
    public function hasEncryptedPassword()
    {
        return $this->encrypted_password !== null;
    }

    /**
     * Get 'encrypted_password' value
     *
     * @return string
     */
    public function getEncryptedPassword()
    {
        return $this->encrypted_password;
    }

    /**
     * Set 'encrypted_password' value
     *
     * @param string $value
     */
    public function setEncryptedPassword($value = null)
    {
        $this->encrypted_password = $value;
    }

    /**
     * Check if 'fake_checkdata' has a value
     *
     * @return bool
     */
    public function hasFakeCheckdata()
    {
        return $this->fake_checkdata !== null;
    }

    /**
     * Get 'fake_checkdata' value
     *
     * @return string
     */
    public function getFakeCheckdata()
    {
        return $this->fake_checkdata;
    }

    /**
     * Set 'fake_checkdata' value
     *
     * @param string $value
     */
    public function setFakeCheckdata($value = null)
    {
        $this->fake_checkdata = $value;
    }

    /**
     * Check if 'unlock_code' has a value
     *
     * @return bool
     */
    public function hasUnlockCode()
    {
        return $this->unlock_code !== null;
    }

    /**
     * Get 'unlock_code' value
     *
     * @return string
     */
    public function getUnlockCode()
    {
        return $this->unlock_code;
    }

    /**
     * Set 'unlock_code' value
     *
     * @param string $value
     */
    public function setUnlockCode($value = null)
    {
        $this->unlock_code = $value;
    }

    /**
     * Check if 'password_hex' has a value
     *
     * @return bool
     */
    public function hasPasswordHex()
    {
        return $this->password_hex !== null;
    }

    /**
     * Get 'password_hex' value
     *
     * @return string
     */
    public function getPasswordHex()
    {
        return $this->password_hex;
    }

    /**
     * Set 'password_hex' value
     *
     * @param string $value
     */
    public function setPasswordHex($value = null)
    {
        $this->password_hex = $value;
    }

    /**
     * Check if 'ldap_dn' has a value
     *
     * @return bool
     */
    public function hasLdapDn()
    {
        return $this->ldap_dn !== null;
    }

    /**
     * Get 'ldap_dn' value
     *
     * @return string
     */
    public function getLdapDn()
    {
        return $this->ldap_dn;
    }

    /**
     * Set 'ldap_dn' value
     *
     * @param string $value
     */
    public function setLdapDn($value = null)
    {
        $this->ldap_dn = $value;
    }

    /**
     * Check if 'secret_phrase_mode' has a value
     *
     * @return bool
     */
    public function hasSecretPhraseMode()
    {
        return $this->secret_phrase_mode !== null;
    }

    /**
     * Get 'secret_phrase_mode' value
     *
     * @return int
     */
    public function getSecretPhraseMode()
    {
        return $this->secret_phrase_mode;
    }

    /**
     * Set 'secret_phrase_mode' value
     *
     * @param int $value
     */
    public function setSecretPhraseMode($value = null)
    {
        $this->secret_phrase_mode = $value;
    }

    /**
     * Check if 'account_keys_state' has a value
     *
     * @return bool
     */
    public function hasAccountKeysState()
    {
        return $this->account_keys_state !== null;
    }

    /**
     * Get 'account_keys_state' value
     *
     * @return int
     */
    public function getAccountKeysState()
    {
        return $this->account_keys_state;
    }

    /**
     * Set 'account_keys_state' value
     *
     * @param int $value
     */
    public function setAccountKeysState($value = null)
    {
        $this->account_keys_state = $value;
    }

    /**
     * Check if 'preliminary_reset_mode' has a value
     *
     * @return bool
     */
    public function hasPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode !== null;
    }

    /**
     * Get 'preliminary_reset_mode' value
     *
     * @return int
     */
    public function getPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode;
    }

    /**
     * Set 'preliminary_reset_mode' value
     *
     * @param int $value
     */
    public function setPreliminaryResetMode($value = null)
    {
        $this->preliminary_reset_mode = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'password' => null,
            'email' => null,
            'name1' => null,
            'name2' => null,
            'name3' => null,
            'blocked' => null,
            'nickname' => null,
            'sip' => null,
            'subscriprions' => [],
            'limits' => [],
            'comments' => null,
            'encrypted_fake_secret' => null,
            'encrypted_unlock_code' => null,
            'encrypted_password' => null,
            'fake_checkdata' => null,
            'unlock_code' => null,
            'password_hex' => null,
            'ldap_dn' => null,
            'secret_phrase_mode' => '0',
            'account_keys_state' => '0',
            'preliminary_reset_mode' => '0'
        ], $values);

        $message->setPassword($values['password']);
        $message->setEmail($values['email']);
        $message->setName1($values['name1']);
        $message->setName2($values['name2']);
        $message->setName3($values['name3']);
        $message->setBlocked($values['blocked']);
        $message->setNickname($values['nickname']);
        $message->setSip($values['sip']);
        $message->setComments($values['comments']);
        $message->setEncryptedFakeSecret($values['encrypted_fake_secret']);
        $message->setEncryptedUnlockCode($values['encrypted_unlock_code']);
        $message->setEncryptedPassword($values['encrypted_password']);
        $message->setFakeCheckdata($values['fake_checkdata']);
        $message->setUnlockCode($values['unlock_code']);
        $message->setPasswordHex($values['password_hex']);
        $message->setLdapDn($values['ldap_dn']);
        $message->setSecretPhraseMode($values['secret_phrase_mode']);
        $message->setAccountKeysState($values['account_keys_state']);
        $message->setPreliminaryResetMode($values['preliminary_reset_mode']);

        foreach ($values['subscriprions'] as $item) {
            $message->addSubscriprions($item);
        }

        foreach ($values['limits'] as $item) {
            $message->addLimits($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UserCommand',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'name1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'name2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'name3',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'blocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'nickname',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'sip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.sip_parameters'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'subscriprions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.subscription'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'limits',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.limit'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'comments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'encrypted_fake_secret',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'encrypted_unlock_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'encrypted_password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'fake_checkdata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'unlock_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'password_hex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'ldap_dn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'secret_phrase_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'account_keys_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'preliminary_reset_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->password !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->password);
        }

        if ($this->email !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->email);
        }

        if ($this->name1 !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->name1);
        }

        if ($this->name2 !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->name2);
        }

        if ($this->name3 !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->name3);
        }

        if ($this->blocked !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->blocked);
        }

        if ($this->nickname !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->nickname);
        }

        if ($this->sip !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->sip->serializedSize($sizeContext));
            $this->sip->writeTo($context);
        }

        if ($this->subscriprions !== null) {
            foreach ($this->subscriprions as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->limits !== null) {
            foreach ($this->limits as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->comments !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->comments);
        }

        if ($this->encrypted_fake_secret !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->encrypted_fake_secret);
        }

        if ($this->encrypted_unlock_code !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->encrypted_unlock_code);
        }

        if ($this->encrypted_password !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->encrypted_password);
        }

        if ($this->fake_checkdata !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->fake_checkdata);
        }

        if ($this->unlock_code !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->unlock_code);
        }

        if ($this->password_hex !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->password_hex);
        }

        if ($this->ldap_dn !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->ldap_dn);
        }

        if ($this->secret_phrase_mode !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->preliminary_reset_mode);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->password = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name1 = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name2 = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name3 = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->nickname = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\sip_parameters();

                $this->sip = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\subscription();

                if ($this->subscriprions === null) {
                    $this->subscriprions = new \Protobuf\MessageCollection();
                }

                $this->subscriprions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\limit();

                if ($this->limits === null) {
                    $this->limits = new \Protobuf\MessageCollection();
                }

                $this->limits->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->comments = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->encrypted_fake_secret = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->encrypted_unlock_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->encrypted_password = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->fake_checkdata = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->unlock_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->password_hex = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ldap_dn = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->secret_phrase_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->account_keys_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->preliminary_reset_mode = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->password !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->password);
        }

        if ($this->email !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email);
        }

        if ($this->name1 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name1);
        }

        if ($this->name2 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name2);
        }

        if ($this->name3 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name3);
        }

        if ($this->blocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->nickname !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->nickname);
        }

        if ($this->sip !== null) {
            $innerSize = $this->sip->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->subscriprions !== null) {
            foreach ($this->subscriprions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->limits !== null) {
            foreach ($this->limits as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->comments !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->comments);
        }

        if ($this->encrypted_fake_secret !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->encrypted_fake_secret);
        }

        if ($this->encrypted_unlock_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->encrypted_unlock_code);
        }

        if ($this->encrypted_password !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->encrypted_password);
        }

        if ($this->fake_checkdata !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->fake_checkdata);
        }

        if ($this->unlock_code !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->unlock_code);
        }

        if ($this->password_hex !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->password_hex);
        }

        if ($this->ldap_dn !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ldap_dn);
        }

        if ($this->secret_phrase_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->preliminary_reset_mode);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->password = null;
        $this->email = null;
        $this->name1 = null;
        $this->name2 = null;
        $this->name3 = null;
        $this->blocked = null;
        $this->nickname = null;
        $this->sip = null;
        $this->subscriprions = null;
        $this->limits = null;
        $this->comments = null;
        $this->encrypted_fake_secret = null;
        $this->encrypted_unlock_code = null;
        $this->encrypted_password = null;
        $this->fake_checkdata = null;
        $this->unlock_code = null;
        $this->password_hex = null;
        $this->ldap_dn = null;
        $this->secret_phrase_mode = '0';
        $this->account_keys_state = '0';
        $this->preliminary_reset_mode = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\UserCommand) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->password = ($message->password !== null) ? $message->password : $this->password;
        $this->email = ($message->email !== null) ? $message->email : $this->email;
        $this->name1 = ($message->name1 !== null) ? $message->name1 : $this->name1;
        $this->name2 = ($message->name2 !== null) ? $message->name2 : $this->name2;
        $this->name3 = ($message->name3 !== null) ? $message->name3 : $this->name3;
        $this->blocked = ($message->blocked !== null) ? $message->blocked : $this->blocked;
        $this->nickname = ($message->nickname !== null) ? $message->nickname : $this->nickname;
        $this->sip = ($message->sip !== null) ? $message->sip : $this->sip;
        $this->subscriprions = ($message->subscriprions !== null) ? $message->subscriprions : $this->subscriprions;
        $this->limits = ($message->limits !== null) ? $message->limits : $this->limits;
        $this->comments = ($message->comments !== null) ? $message->comments : $this->comments;
        $this->encrypted_fake_secret = ($message->encrypted_fake_secret !== null) ? $message->encrypted_fake_secret : $this->encrypted_fake_secret;
        $this->encrypted_unlock_code = ($message->encrypted_unlock_code !== null) ? $message->encrypted_unlock_code : $this->encrypted_unlock_code;
        $this->encrypted_password = ($message->encrypted_password !== null) ? $message->encrypted_password : $this->encrypted_password;
        $this->fake_checkdata = ($message->fake_checkdata !== null) ? $message->fake_checkdata : $this->fake_checkdata;
        $this->unlock_code = ($message->unlock_code !== null) ? $message->unlock_code : $this->unlock_code;
        $this->password_hex = ($message->password_hex !== null) ? $message->password_hex : $this->password_hex;
        $this->ldap_dn = ($message->ldap_dn !== null) ? $message->ldap_dn : $this->ldap_dn;
        $this->secret_phrase_mode = ($message->secret_phrase_mode !== null) ? $message->secret_phrase_mode : $this->secret_phrase_mode;
        $this->account_keys_state = ($message->account_keys_state !== null) ? $message->account_keys_state : $this->account_keys_state;
        $this->preliminary_reset_mode = ($message->preliminary_reset_mode !== null) ? $message->preliminary_reset_mode : $this->preliminary_reset_mode;
    }


}


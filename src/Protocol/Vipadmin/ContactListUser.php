<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.ContactListUser
 */
class ContactListUser extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * vid required string = 1
     *
     * @var string
     */
    protected $vid = null;

    /**
     * self_auth optional int32 = 2
     *
     * @var int
     */
    protected $self_auth = null;

    /**
     * peer_auth optional int32 = 3
     *
     * @var int
     */
    protected $peer_auth = null;

    /**
     * deleted optional bool = 4
     *
     * @var bool
     */
    protected $deleted = null;

    /**
     * blacklist optional bool = 5
     *
     * @var bool
     */
    protected $blacklist = null;

    /**
     * visibility optional int32 = 6
     *
     * @var int
     */
    protected $visibility = null;

    /**
     * events optional int32 = 7
     *
     * @var int
     */
    protected $events = null;

    /**
     * group_id optional string = 8
     *
     * @var string
     */
    protected $group_id = null;

    /**
     * sent_events optional int32 = 9
     *
     * @var int
     */
    protected $sent_events = null;

    /**
     * Check if 'vid' has a value
     *
     * @return bool
     */
    public function hasVid()
    {
        return $this->vid !== null;
    }

    /**
     * Get 'vid' value
     *
     * @return string
     */
    public function getVid()
    {
        return $this->vid;
    }

    /**
     * Set 'vid' value
     *
     * @param string $value
     */
    public function setVid($value)
    {
        $this->vid = $value;
    }

    /**
     * Check if 'self_auth' has a value
     *
     * @return bool
     */
    public function hasSelfAuth()
    {
        return $this->self_auth !== null;
    }

    /**
     * Get 'self_auth' value
     *
     * @return int
     */
    public function getSelfAuth()
    {
        return $this->self_auth;
    }

    /**
     * Set 'self_auth' value
     *
     * @param int $value
     */
    public function setSelfAuth($value = null)
    {
        $this->self_auth = $value;
    }

    /**
     * Check if 'peer_auth' has a value
     *
     * @return bool
     */
    public function hasPeerAuth()
    {
        return $this->peer_auth !== null;
    }

    /**
     * Get 'peer_auth' value
     *
     * @return int
     */
    public function getPeerAuth()
    {
        return $this->peer_auth;
    }

    /**
     * Set 'peer_auth' value
     *
     * @param int $value
     */
    public function setPeerAuth($value = null)
    {
        $this->peer_auth = $value;
    }

    /**
     * Check if 'deleted' has a value
     *
     * @return bool
     */
    public function hasDeleted()
    {
        return $this->deleted !== null;
    }

    /**
     * Get 'deleted' value
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * Set 'deleted' value
     *
     * @param bool $value
     */
    public function setDeleted($value = null)
    {
        $this->deleted = $value;
    }

    /**
     * Check if 'blacklist' has a value
     *
     * @return bool
     */
    public function hasBlacklist()
    {
        return $this->blacklist !== null;
    }

    /**
     * Get 'blacklist' value
     *
     * @return bool
     */
    public function getBlacklist()
    {
        return $this->blacklist;
    }

    /**
     * Set 'blacklist' value
     *
     * @param bool $value
     */
    public function setBlacklist($value = null)
    {
        $this->blacklist = $value;
    }

    /**
     * Check if 'visibility' has a value
     *
     * @return bool
     */
    public function hasVisibility()
    {
        return $this->visibility !== null;
    }

    /**
     * Get 'visibility' value
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Set 'visibility' value
     *
     * @param int $value
     */
    public function setVisibility($value = null)
    {
        $this->visibility = $value;
    }

    /**
     * Check if 'events' has a value
     *
     * @return bool
     */
    public function hasEvents()
    {
        return $this->events !== null;
    }

    /**
     * Get 'events' value
     *
     * @return int
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * Set 'events' value
     *
     * @param int $value
     */
    public function setEvents($value = null)
    {
        $this->events = $value;
    }

    /**
     * Check if 'group_id' has a value
     *
     * @return bool
     */
    public function hasGroupId()
    {
        return $this->group_id !== null;
    }

    /**
     * Get 'group_id' value
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * Set 'group_id' value
     *
     * @param string $value
     */
    public function setGroupId($value = null)
    {
        $this->group_id = $value;
    }

    /**
     * Check if 'sent_events' has a value
     *
     * @return bool
     */
    public function hasSentEvents()
    {
        return $this->sent_events !== null;
    }

    /**
     * Get 'sent_events' value
     *
     * @return int
     */
    public function getSentEvents()
    {
        return $this->sent_events;
    }

    /**
     * Set 'sent_events' value
     *
     * @param int $value
     */
    public function setSentEvents($value = null)
    {
        $this->sent_events = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['vid'])) {
            throw new \InvalidArgumentException('Field "vid" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'self_auth' => null,
            'peer_auth' => null,
            'deleted' => null,
            'blacklist' => null,
            'visibility' => null,
            'events' => null,
            'group_id' => null,
            'sent_events' => null
        ], $values);

        $message->setVid($values['vid']);
        $message->setSelfAuth($values['self_auth']);
        $message->setPeerAuth($values['peer_auth']);
        $message->setDeleted($values['deleted']);
        $message->setBlacklist($values['blacklist']);
        $message->setVisibility($values['visibility']);
        $message->setEvents($values['events']);
        $message->setGroupId($values['group_id']);
        $message->setSentEvents($values['sent_events']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ContactListUser',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'vid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'self_auth',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'peer_auth',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'deleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'blacklist',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'visibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'events',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'group_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'sent_events',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->vid === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\ContactListUser#vid" (tag 1) is required but has no value.');
        }

        if ($this->vid !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->vid);
        }

        if ($this->self_auth !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->self_auth);
        }

        if ($this->peer_auth !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->peer_auth);
        }

        if ($this->deleted !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->deleted);
        }

        if ($this->blacklist !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->blacklist);
        }

        if ($this->visibility !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->visibility);
        }

        if ($this->events !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->events);
        }

        if ($this->group_id !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->group_id);
        }

        if ($this->sent_events !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->sent_events);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vid = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->self_auth = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->peer_auth = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->deleted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blacklist = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->visibility = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->events = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->group_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->sent_events = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->vid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vid);
        }

        if ($this->self_auth !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->self_auth);
        }

        if ($this->peer_auth !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->peer_auth);
        }

        if ($this->deleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->blacklist !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->visibility !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->visibility);
        }

        if ($this->events !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->events);
        }

        if ($this->group_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->group_id);
        }

        if ($this->sent_events !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sent_events);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->vid = null;
        $this->self_auth = null;
        $this->peer_auth = null;
        $this->deleted = null;
        $this->blacklist = null;
        $this->visibility = null;
        $this->events = null;
        $this->group_id = null;
        $this->sent_events = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\ContactListUser) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->vid = ($message->vid !== null) ? $message->vid : $this->vid;
        $this->self_auth = ($message->self_auth !== null) ? $message->self_auth : $this->self_auth;
        $this->peer_auth = ($message->peer_auth !== null) ? $message->peer_auth : $this->peer_auth;
        $this->deleted = ($message->deleted !== null) ? $message->deleted : $this->deleted;
        $this->blacklist = ($message->blacklist !== null) ? $message->blacklist : $this->blacklist;
        $this->visibility = ($message->visibility !== null) ? $message->visibility : $this->visibility;
        $this->events = ($message->events !== null) ? $message->events : $this->events;
        $this->group_id = ($message->group_id !== null) ? $message->group_id : $this->group_id;
        $this->sent_events = ($message->sent_events !== null) ? $message->sent_events : $this->sent_events;
    }


}


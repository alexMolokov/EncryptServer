<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.get_user_profile_response
 */
class get_user_profile_response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * domain_id optional string = 2
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * business_account_id optional string = 3
     *
     * @var string
     */
    protected $business_account_id = null;

    /**
     * status optional int32 = 4
     *
     * @var int
     */
    protected $status = null;

    /**
     * nickname optional string = 5
     *
     * @var string
     */
    protected $nickname = null;

    /**
     * name1 optional string = 6
     *
     * @var string
     */
    protected $name1 = null;

    /**
     * name2 optional string = 7
     *
     * @var string
     */
    protected $name2 = null;

    /**
     * name3 optional string = 8
     *
     * @var string
     */
    protected $name3 = null;

    /**
     * vcard optional string = 9
     *
     * @var string
     */
    protected $vcard = null;

    /**
     * image optional string = 10
     *
     * @var string
     */
    protected $image = null;

    /**
     * login optional string = 12
     *
     * @var string
     */
    protected $login = null;

    /**
     * desired_login optional string = 13
     *
     * @var string
     */
    protected $desired_login = null;

    /**
     * email optional string = 14
     *
     * @var string
     */
    protected $email = null;

    /**
     * comments optional string = 15
     *
     * @var string
     */
    protected $comments = null;

    /**
     * subscription optional string = 16
     *
     * @var string
     */
    protected $subscription = null;

    /**
     * subscription_code optional int32 = 17
     *
     * @var int
     */
    protected $subscription_code = null;

    /**
     * tags repeated string = 18
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * security_parameters optional message = 19
     *
     * @var \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    protected $security_parameters = null;

    /**
     * passwords repeated message = 20
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserPassword>
     */
    protected $passwords = null;

    /**
     * blocked optional bool = 21
     *
     * @var bool
     */
    protected $blocked = null;

    /**
     * blocked_in_business_account optional bool = 22
     *
     * @var bool
     */
    protected $blocked_in_business_account = null;

    /**
     * crypt_record_id optional string = 23
     *
     * @var string
     */
    protected $crypt_record_id = null;

    /**
     * user_pack_id optional string = 24
     *
     * @var string
     */
    protected $user_pack_id = null;

    /**
     * sip_registration optional bool = 25
     *
     * @var bool
     */
    protected $sip_registration = null;

    /**
     * sip_login optional string = 26
     *
     * @var string
     */
    protected $sip_login = null;

    /**
     * sip_password optional string = 27
     *
     * @var string
     */
    protected $sip_password = null;

    /**
     * balance optional float = 28
     *
     * @var float
     */
    protected $balance = null;

    /**
     * ba_balance_limit optional float = 29
     *
     * @var float
     */
    protected $ba_balance_limit = null;

    /**
     * ba_balance_used optional float = 30
     *
     * @var float
     */
    protected $ba_balance_used = null;

    /**
     * keys repeated message = 31
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserKeys>
     */
    protected $keys = null;

    /**
     * last_security_change_date optional string = 32
     *
     * @var string
     */
    protected $last_security_change_date = null;

    /**
     * last_password_change_date optional string = 33
     *
     * @var string
     */
    protected $last_password_change_date = null;

    /**
     * active_certificate optional string = 34
     *
     * @var string
     */
    protected $active_certificate = null;

    /**
     * ldap_dn optional string = 35
     *
     * @var string
     */
    protected $ldap_dn = null;

    /**
     * secret_phrase_mode optional int32 = 36
     *
     * @var int
     */
    protected $secret_phrase_mode = null;

    /**
     * account_keys_state optional int32 = 37
     *
     * @var int
     */
    protected $account_keys_state = null;

    /**
     * preliminary_reset_mode optional int32 = 38
     *
     * @var int
     */
    protected $preliminary_reset_mode = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->balance = '0';
        $this->ba_balance_limit = '-1';
        $this->ba_balance_used = '0';
        $this->account_keys_state = '0';
        $this->preliminary_reset_mode = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'business_account_id' has a value
     *
     * @return bool
     */
    public function hasBusinessAccountId()
    {
        return $this->business_account_id !== null;
    }

    /**
     * Get 'business_account_id' value
     *
     * @return string
     */
    public function getBusinessAccountId()
    {
        return $this->business_account_id;
    }

    /**
     * Set 'business_account_id' value
     *
     * @param string $value
     */
    public function setBusinessAccountId($value = null)
    {
        $this->business_account_id = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param int $value
     */
    public function setStatus($value = null)
    {
        $this->status = $value;
    }

    /**
     * Check if 'nickname' has a value
     *
     * @return bool
     */
    public function hasNickname()
    {
        return $this->nickname !== null;
    }

    /**
     * Get 'nickname' value
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set 'nickname' value
     *
     * @param string $value
     */
    public function setNickname($value = null)
    {
        $this->nickname = $value;
    }

    /**
     * Check if 'name1' has a value
     *
     * @return bool
     */
    public function hasName1()
    {
        return $this->name1 !== null;
    }

    /**
     * Get 'name1' value
     *
     * @return string
     */
    public function getName1()
    {
        return $this->name1;
    }

    /**
     * Set 'name1' value
     *
     * @param string $value
     */
    public function setName1($value = null)
    {
        $this->name1 = $value;
    }

    /**
     * Check if 'name2' has a value
     *
     * @return bool
     */
    public function hasName2()
    {
        return $this->name2 !== null;
    }

    /**
     * Get 'name2' value
     *
     * @return string
     */
    public function getName2()
    {
        return $this->name2;
    }

    /**
     * Set 'name2' value
     *
     * @param string $value
     */
    public function setName2($value = null)
    {
        $this->name2 = $value;
    }

    /**
     * Check if 'name3' has a value
     *
     * @return bool
     */
    public function hasName3()
    {
        return $this->name3 !== null;
    }

    /**
     * Get 'name3' value
     *
     * @return string
     */
    public function getName3()
    {
        return $this->name3;
    }

    /**
     * Set 'name3' value
     *
     * @param string $value
     */
    public function setName3($value = null)
    {
        $this->name3 = $value;
    }

    /**
     * Check if 'vcard' has a value
     *
     * @return bool
     */
    public function hasVcard()
    {
        return $this->vcard !== null;
    }

    /**
     * Get 'vcard' value
     *
     * @return string
     */
    public function getVcard()
    {
        return $this->vcard;
    }

    /**
     * Set 'vcard' value
     *
     * @param string $value
     */
    public function setVcard($value = null)
    {
        $this->vcard = $value;
    }

    /**
     * Check if 'image' has a value
     *
     * @return bool
     */
    public function hasImage()
    {
        return $this->image !== null;
    }

    /**
     * Get 'image' value
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Set 'image' value
     *
     * @param string $value
     */
    public function setImage($value = null)
    {
        $this->image = $value;
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value = null)
    {
        $this->login = $value;
    }

    /**
     * Check if 'desired_login' has a value
     *
     * @return bool
     */
    public function hasDesiredLogin()
    {
        return $this->desired_login !== null;
    }

    /**
     * Get 'desired_login' value
     *
     * @return string
     */
    public function getDesiredLogin()
    {
        return $this->desired_login;
    }

    /**
     * Set 'desired_login' value
     *
     * @param string $value
     */
    public function setDesiredLogin($value = null)
    {
        $this->desired_login = $value;
    }

    /**
     * Check if 'email' has a value
     *
     * @return bool
     */
    public function hasEmail()
    {
        return $this->email !== null;
    }

    /**
     * Get 'email' value
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set 'email' value
     *
     * @param string $value
     */
    public function setEmail($value = null)
    {
        $this->email = $value;
    }

    /**
     * Check if 'comments' has a value
     *
     * @return bool
     */
    public function hasComments()
    {
        return $this->comments !== null;
    }

    /**
     * Get 'comments' value
     *
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Set 'comments' value
     *
     * @param string $value
     */
    public function setComments($value = null)
    {
        $this->comments = $value;
    }

    /**
     * Check if 'subscription' has a value
     *
     * @return bool
     */
    public function hasSubscription()
    {
        return $this->subscription !== null;
    }

    /**
     * Get 'subscription' value
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->subscription;
    }

    /**
     * Set 'subscription' value
     *
     * @param string $value
     */
    public function setSubscription($value = null)
    {
        $this->subscription = $value;
    }

    /**
     * Check if 'subscription_code' has a value
     *
     * @return bool
     */
    public function hasSubscriptionCode()
    {
        return $this->subscription_code !== null;
    }

    /**
     * Get 'subscription_code' value
     *
     * @return int
     */
    public function getSubscriptionCode()
    {
        return $this->subscription_code;
    }

    /**
     * Set 'subscription_code' value
     *
     * @param int $value
     */
    public function setSubscriptionCode($value = null)
    {
        $this->subscription_code = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'security_parameters' has a value
     *
     * @return bool
     */
    public function hasSecurityParameters()
    {
        return $this->security_parameters !== null;
    }

    /**
     * Get 'security_parameters' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    public function getSecurityParameters()
    {
        return $this->security_parameters;
    }

    /**
     * Set 'security_parameters' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityTemplate $value
     */
    public function setSecurityParameters(\EncryptServer\Protocol\Vipadmin\SecurityTemplate $value = null)
    {
        $this->security_parameters = $value;
    }

    /**
     * Check if 'passwords' has a value
     *
     * @return bool
     */
    public function hasPasswordsList()
    {
        return $this->passwords !== null;
    }

    /**
     * Get 'passwords' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserPassword>
     */
    public function getPasswordsList()
    {
        return $this->passwords;
    }

    /**
     * Set 'passwords' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserPassword> $value
     */
    public function setPasswordsList(\Protobuf\Collection $value = null)
    {
        $this->passwords = $value;
    }

    /**
     * Add a new element to 'passwords'
     *
     * @param \EncryptServer\Protocol\Vipadmin\UserPassword $value
     */
    public function addPasswords(\EncryptServer\Protocol\Vipadmin\UserPassword $value)
    {
        if ($this->passwords === null) {
            $this->passwords = new \Protobuf\MessageCollection();
        }

        $this->passwords->add($value);
    }

    /**
     * Check if 'blocked' has a value
     *
     * @return bool
     */
    public function hasBlocked()
    {
        return $this->blocked !== null;
    }

    /**
     * Get 'blocked' value
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->blocked;
    }

    /**
     * Set 'blocked' value
     *
     * @param bool $value
     */
    public function setBlocked($value = null)
    {
        $this->blocked = $value;
    }

    /**
     * Check if 'blocked_in_business_account' has a value
     *
     * @return bool
     */
    public function hasBlockedInBusinessAccount()
    {
        return $this->blocked_in_business_account !== null;
    }

    /**
     * Get 'blocked_in_business_account' value
     *
     * @return bool
     */
    public function getBlockedInBusinessAccount()
    {
        return $this->blocked_in_business_account;
    }

    /**
     * Set 'blocked_in_business_account' value
     *
     * @param bool $value
     */
    public function setBlockedInBusinessAccount($value = null)
    {
        $this->blocked_in_business_account = $value;
    }

    /**
     * Check if 'crypt_record_id' has a value
     *
     * @return bool
     */
    public function hasCryptRecordId()
    {
        return $this->crypt_record_id !== null;
    }

    /**
     * Get 'crypt_record_id' value
     *
     * @return string
     */
    public function getCryptRecordId()
    {
        return $this->crypt_record_id;
    }

    /**
     * Set 'crypt_record_id' value
     *
     * @param string $value
     */
    public function setCryptRecordId($value = null)
    {
        $this->crypt_record_id = $value;
    }

    /**
     * Check if 'user_pack_id' has a value
     *
     * @return bool
     */
    public function hasUserPackId()
    {
        return $this->user_pack_id !== null;
    }

    /**
     * Get 'user_pack_id' value
     *
     * @return string
     */
    public function getUserPackId()
    {
        return $this->user_pack_id;
    }

    /**
     * Set 'user_pack_id' value
     *
     * @param string $value
     */
    public function setUserPackId($value = null)
    {
        $this->user_pack_id = $value;
    }

    /**
     * Check if 'sip_registration' has a value
     *
     * @return bool
     */
    public function hasSipRegistration()
    {
        return $this->sip_registration !== null;
    }

    /**
     * Get 'sip_registration' value
     *
     * @return bool
     */
    public function getSipRegistration()
    {
        return $this->sip_registration;
    }

    /**
     * Set 'sip_registration' value
     *
     * @param bool $value
     */
    public function setSipRegistration($value = null)
    {
        $this->sip_registration = $value;
    }

    /**
     * Check if 'sip_login' has a value
     *
     * @return bool
     */
    public function hasSipLogin()
    {
        return $this->sip_login !== null;
    }

    /**
     * Get 'sip_login' value
     *
     * @return string
     */
    public function getSipLogin()
    {
        return $this->sip_login;
    }

    /**
     * Set 'sip_login' value
     *
     * @param string $value
     */
    public function setSipLogin($value = null)
    {
        $this->sip_login = $value;
    }

    /**
     * Check if 'sip_password' has a value
     *
     * @return bool
     */
    public function hasSipPassword()
    {
        return $this->sip_password !== null;
    }

    /**
     * Get 'sip_password' value
     *
     * @return string
     */
    public function getSipPassword()
    {
        return $this->sip_password;
    }

    /**
     * Set 'sip_password' value
     *
     * @param string $value
     */
    public function setSipPassword($value = null)
    {
        $this->sip_password = $value;
    }

    /**
     * Check if 'balance' has a value
     *
     * @return bool
     */
    public function hasBalance()
    {
        return $this->balance !== null;
    }

    /**
     * Get 'balance' value
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * Set 'balance' value
     *
     * @param float $value
     */
    public function setBalance($value = null)
    {
        $this->balance = $value;
    }

    /**
     * Check if 'ba_balance_limit' has a value
     *
     * @return bool
     */
    public function hasBaBalanceLimit()
    {
        return $this->ba_balance_limit !== null;
    }

    /**
     * Get 'ba_balance_limit' value
     *
     * @return float
     */
    public function getBaBalanceLimit()
    {
        return $this->ba_balance_limit;
    }

    /**
     * Set 'ba_balance_limit' value
     *
     * @param float $value
     */
    public function setBaBalanceLimit($value = null)
    {
        $this->ba_balance_limit = $value;
    }

    /**
     * Check if 'ba_balance_used' has a value
     *
     * @return bool
     */
    public function hasBaBalanceUsed()
    {
        return $this->ba_balance_used !== null;
    }

    /**
     * Get 'ba_balance_used' value
     *
     * @return float
     */
    public function getBaBalanceUsed()
    {
        return $this->ba_balance_used;
    }

    /**
     * Set 'ba_balance_used' value
     *
     * @param float $value
     */
    public function setBaBalanceUsed($value = null)
    {
        $this->ba_balance_used = $value;
    }

    /**
     * Check if 'keys' has a value
     *
     * @return bool
     */
    public function hasKeysList()
    {
        return $this->keys !== null;
    }

    /**
     * Get 'keys' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserKeys>
     */
    public function getKeysList()
    {
        return $this->keys;
    }

    /**
     * Set 'keys' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\UserKeys> $value
     */
    public function setKeysList(\Protobuf\Collection $value = null)
    {
        $this->keys = $value;
    }

    /**
     * Add a new element to 'keys'
     *
     * @param \EncryptServer\Protocol\Vipadmin\UserKeys $value
     */
    public function addKeys(\EncryptServer\Protocol\Vipadmin\UserKeys $value)
    {
        if ($this->keys === null) {
            $this->keys = new \Protobuf\MessageCollection();
        }

        $this->keys->add($value);
    }

    /**
     * Check if 'last_security_change_date' has a value
     *
     * @return bool
     */
    public function hasLastSecurityChangeDate()
    {
        return $this->last_security_change_date !== null;
    }

    /**
     * Get 'last_security_change_date' value
     *
     * @return string
     */
    public function getLastSecurityChangeDate()
    {
        return $this->last_security_change_date;
    }

    /**
     * Set 'last_security_change_date' value
     *
     * @param string $value
     */
    public function setLastSecurityChangeDate($value = null)
    {
        $this->last_security_change_date = $value;
    }

    /**
     * Check if 'last_password_change_date' has a value
     *
     * @return bool
     */
    public function hasLastPasswordChangeDate()
    {
        return $this->last_password_change_date !== null;
    }

    /**
     * Get 'last_password_change_date' value
     *
     * @return string
     */
    public function getLastPasswordChangeDate()
    {
        return $this->last_password_change_date;
    }

    /**
     * Set 'last_password_change_date' value
     *
     * @param string $value
     */
    public function setLastPasswordChangeDate($value = null)
    {
        $this->last_password_change_date = $value;
    }

    /**
     * Check if 'active_certificate' has a value
     *
     * @return bool
     */
    public function hasActiveCertificate()
    {
        return $this->active_certificate !== null;
    }

    /**
     * Get 'active_certificate' value
     *
     * @return string
     */
    public function getActiveCertificate()
    {
        return $this->active_certificate;
    }

    /**
     * Set 'active_certificate' value
     *
     * @param string $value
     */
    public function setActiveCertificate($value = null)
    {
        $this->active_certificate = $value;
    }

    /**
     * Check if 'ldap_dn' has a value
     *
     * @return bool
     */
    public function hasLdapDn()
    {
        return $this->ldap_dn !== null;
    }

    /**
     * Get 'ldap_dn' value
     *
     * @return string
     */
    public function getLdapDn()
    {
        return $this->ldap_dn;
    }

    /**
     * Set 'ldap_dn' value
     *
     * @param string $value
     */
    public function setLdapDn($value = null)
    {
        $this->ldap_dn = $value;
    }

    /**
     * Check if 'secret_phrase_mode' has a value
     *
     * @return bool
     */
    public function hasSecretPhraseMode()
    {
        return $this->secret_phrase_mode !== null;
    }

    /**
     * Get 'secret_phrase_mode' value
     *
     * @return int
     */
    public function getSecretPhraseMode()
    {
        return $this->secret_phrase_mode;
    }

    /**
     * Set 'secret_phrase_mode' value
     *
     * @param int $value
     */
    public function setSecretPhraseMode($value = null)
    {
        $this->secret_phrase_mode = $value;
    }

    /**
     * Check if 'account_keys_state' has a value
     *
     * @return bool
     */
    public function hasAccountKeysState()
    {
        return $this->account_keys_state !== null;
    }

    /**
     * Get 'account_keys_state' value
     *
     * @return int
     */
    public function getAccountKeysState()
    {
        return $this->account_keys_state;
    }

    /**
     * Set 'account_keys_state' value
     *
     * @param int $value
     */
    public function setAccountKeysState($value = null)
    {
        $this->account_keys_state = $value;
    }

    /**
     * Check if 'preliminary_reset_mode' has a value
     *
     * @return bool
     */
    public function hasPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode !== null;
    }

    /**
     * Get 'preliminary_reset_mode' value
     *
     * @return int
     */
    public function getPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode;
    }

    /**
     * Set 'preliminary_reset_mode' value
     *
     * @param int $value
     */
    public function setPreliminaryResetMode($value = null)
    {
        $this->preliminary_reset_mode = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'domain_id' => null,
            'business_account_id' => null,
            'status' => null,
            'nickname' => null,
            'name1' => null,
            'name2' => null,
            'name3' => null,
            'vcard' => null,
            'image' => null,
            'login' => null,
            'desired_login' => null,
            'email' => null,
            'comments' => null,
            'subscription' => null,
            'subscription_code' => null,
            'tags' => [],
            'security_parameters' => null,
            'passwords' => [],
            'blocked' => null,
            'blocked_in_business_account' => null,
            'crypt_record_id' => null,
            'user_pack_id' => null,
            'sip_registration' => null,
            'sip_login' => null,
            'sip_password' => null,
            'balance' => '0',
            'ba_balance_limit' => '-1',
            'ba_balance_used' => '0',
            'keys' => [],
            'last_security_change_date' => null,
            'last_password_change_date' => null,
            'active_certificate' => null,
            'ldap_dn' => null,
            'secret_phrase_mode' => null,
            'account_keys_state' => '0',
            'preliminary_reset_mode' => '0'
        ], $values);

        $message->setId($values['id']);
        $message->setDomainId($values['domain_id']);
        $message->setBusinessAccountId($values['business_account_id']);
        $message->setStatus($values['status']);
        $message->setNickname($values['nickname']);
        $message->setName1($values['name1']);
        $message->setName2($values['name2']);
        $message->setName3($values['name3']);
        $message->setVcard($values['vcard']);
        $message->setImage($values['image']);
        $message->setLogin($values['login']);
        $message->setDesiredLogin($values['desired_login']);
        $message->setEmail($values['email']);
        $message->setComments($values['comments']);
        $message->setSubscription($values['subscription']);
        $message->setSubscriptionCode($values['subscription_code']);
        $message->setSecurityParameters($values['security_parameters']);
        $message->setBlocked($values['blocked']);
        $message->setBlockedInBusinessAccount($values['blocked_in_business_account']);
        $message->setCryptRecordId($values['crypt_record_id']);
        $message->setUserPackId($values['user_pack_id']);
        $message->setSipRegistration($values['sip_registration']);
        $message->setSipLogin($values['sip_login']);
        $message->setSipPassword($values['sip_password']);
        $message->setBalance($values['balance']);
        $message->setBaBalanceLimit($values['ba_balance_limit']);
        $message->setBaBalanceUsed($values['ba_balance_used']);
        $message->setLastSecurityChangeDate($values['last_security_change_date']);
        $message->setLastPasswordChangeDate($values['last_password_change_date']);
        $message->setActiveCertificate($values['active_certificate']);
        $message->setLdapDn($values['ldap_dn']);
        $message->setSecretPhraseMode($values['secret_phrase_mode']);
        $message->setAccountKeysState($values['account_keys_state']);
        $message->setPreliminaryResetMode($values['preliminary_reset_mode']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        foreach ($values['passwords'] as $item) {
            $message->addPasswords($item);
        }

        foreach ($values['keys'] as $item) {
            $message->addKeys($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'get_user_profile_response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'business_account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'nickname',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'name1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'name2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'name3',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'vcard',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'image',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'desired_login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'comments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'subscription',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'subscription_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'security_parameters',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.SecurityTemplate'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'passwords',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.UserPassword'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'blocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'blocked_in_business_account',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'crypt_record_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'user_pack_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'sip_registration',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'sip_login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'sip_password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'balance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'ba_balance_limit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '-1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'ba_balance_used',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'keys',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.UserKeys'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'last_security_change_date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 33,
                    'name' => 'last_password_change_date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 34,
                    'name' => 'active_certificate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 35,
                    'name' => 'ldap_dn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 36,
                    'name' => 'secret_phrase_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 37,
                    'name' => 'account_keys_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 38,
                    'name' => 'preliminary_reset_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\get_user_profile_response#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->business_account_id);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->status);
        }

        if ($this->nickname !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->nickname);
        }

        if ($this->name1 !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->name1);
        }

        if ($this->name2 !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->name2);
        }

        if ($this->name3 !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->name3);
        }

        if ($this->vcard !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->vcard);
        }

        if ($this->image !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->image);
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->login);
        }

        if ($this->desired_login !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->desired_login);
        }

        if ($this->email !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->email);
        }

        if ($this->comments !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->comments);
        }

        if ($this->subscription !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->subscription);
        }

        if ($this->subscription_code !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->subscription_code);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 146);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->security_parameters !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeVarint($stream, $this->security_parameters->serializedSize($sizeContext));
            $this->security_parameters->writeTo($context);
        }

        if ($this->passwords !== null) {
            foreach ($this->passwords as $val) {
                $writer->writeVarint($stream, 162);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->blocked !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeBool($stream, $this->blocked);
        }

        if ($this->blocked_in_business_account !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeBool($stream, $this->blocked_in_business_account);
        }

        if ($this->crypt_record_id !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeString($stream, $this->crypt_record_id);
        }

        if ($this->user_pack_id !== null) {
            $writer->writeVarint($stream, 194);
            $writer->writeString($stream, $this->user_pack_id);
        }

        if ($this->sip_registration !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeBool($stream, $this->sip_registration);
        }

        if ($this->sip_login !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeString($stream, $this->sip_login);
        }

        if ($this->sip_password !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeString($stream, $this->sip_password);
        }

        if ($this->balance !== null) {
            $writer->writeVarint($stream, 229);
            $writer->writeFloat($stream, $this->balance);
        }

        if ($this->ba_balance_limit !== null) {
            $writer->writeVarint($stream, 237);
            $writer->writeFloat($stream, $this->ba_balance_limit);
        }

        if ($this->ba_balance_used !== null) {
            $writer->writeVarint($stream, 245);
            $writer->writeFloat($stream, $this->ba_balance_used);
        }

        if ($this->keys !== null) {
            foreach ($this->keys as $val) {
                $writer->writeVarint($stream, 250);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->last_security_change_date !== null) {
            $writer->writeVarint($stream, 258);
            $writer->writeString($stream, $this->last_security_change_date);
        }

        if ($this->last_password_change_date !== null) {
            $writer->writeVarint($stream, 266);
            $writer->writeString($stream, $this->last_password_change_date);
        }

        if ($this->active_certificate !== null) {
            $writer->writeVarint($stream, 274);
            $writer->writeString($stream, $this->active_certificate);
        }

        if ($this->ldap_dn !== null) {
            $writer->writeVarint($stream, 282);
            $writer->writeString($stream, $this->ldap_dn);
        }

        if ($this->secret_phrase_mode !== null) {
            $writer->writeVarint($stream, 288);
            $writer->writeVarint($stream, $this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $writer->writeVarint($stream, 296);
            $writer->writeVarint($stream, $this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $writer->writeVarint($stream, 304);
            $writer->writeVarint($stream, $this->preliminary_reset_mode);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->business_account_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->status = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->nickname = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name1 = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name2 = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name3 = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vcard = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->image = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->desired_login = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->comments = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->subscription = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->subscription_code = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityTemplate();

                $this->security_parameters = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\UserPassword();

                if ($this->passwords === null) {
                    $this->passwords = new \Protobuf\MessageCollection();
                }

                $this->passwords->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blocked_in_business_account = $reader->readBool($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->crypt_record_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->user_pack_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sip_registration = $reader->readBool($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sip_login = $reader->readString($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sip_password = $reader->readString($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->balance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->ba_balance_limit = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->ba_balance_used = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\UserKeys();

                if ($this->keys === null) {
                    $this->keys = new \Protobuf\MessageCollection();
                }

                $this->keys->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->last_security_change_date = $reader->readString($stream);

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->last_password_change_date = $reader->readString($stream);

                continue;
            }

            if ($tag === 34) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->active_certificate = $reader->readString($stream);

                continue;
            }

            if ($tag === 35) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ldap_dn = $reader->readString($stream);

                continue;
            }

            if ($tag === 36) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->secret_phrase_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 37) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->account_keys_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 38) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->preliminary_reset_mode = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->business_account_id);
        }

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->status);
        }

        if ($this->nickname !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->nickname);
        }

        if ($this->name1 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name1);
        }

        if ($this->name2 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name2);
        }

        if ($this->name3 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name3);
        }

        if ($this->vcard !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vcard);
        }

        if ($this->image !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->image);
        }

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->desired_login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->desired_login);
        }

        if ($this->email !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email);
        }

        if ($this->comments !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->comments);
        }

        if ($this->subscription !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->subscription);
        }

        if ($this->subscription_code !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->subscription_code);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 2;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->security_parameters !== null) {
            $innerSize = $this->security_parameters->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->passwords !== null) {
            foreach ($this->passwords as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->blocked !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->blocked_in_business_account !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->crypt_record_id !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->crypt_record_id);
        }

        if ($this->user_pack_id !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->user_pack_id);
        }

        if ($this->sip_registration !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sip_login !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->sip_login);
        }

        if ($this->sip_password !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->sip_password);
        }

        if ($this->balance !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->ba_balance_limit !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->ba_balance_used !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->keys !== null) {
            foreach ($this->keys as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->last_security_change_date !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->last_security_change_date);
        }

        if ($this->last_password_change_date !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->last_password_change_date);
        }

        if ($this->active_certificate !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->active_certificate);
        }

        if ($this->ldap_dn !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ldap_dn);
        }

        if ($this->secret_phrase_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->preliminary_reset_mode);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->domain_id = null;
        $this->business_account_id = null;
        $this->status = null;
        $this->nickname = null;
        $this->name1 = null;
        $this->name2 = null;
        $this->name3 = null;
        $this->vcard = null;
        $this->image = null;
        $this->login = null;
        $this->desired_login = null;
        $this->email = null;
        $this->comments = null;
        $this->subscription = null;
        $this->subscription_code = null;
        $this->tags = null;
        $this->security_parameters = null;
        $this->passwords = null;
        $this->blocked = null;
        $this->blocked_in_business_account = null;
        $this->crypt_record_id = null;
        $this->user_pack_id = null;
        $this->sip_registration = null;
        $this->sip_login = null;
        $this->sip_password = null;
        $this->balance = '0';
        $this->ba_balance_limit = '-1';
        $this->ba_balance_used = '0';
        $this->keys = null;
        $this->last_security_change_date = null;
        $this->last_password_change_date = null;
        $this->active_certificate = null;
        $this->ldap_dn = null;
        $this->secret_phrase_mode = null;
        $this->account_keys_state = '0';
        $this->preliminary_reset_mode = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\get_user_profile_response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->business_account_id = ($message->business_account_id !== null) ? $message->business_account_id : $this->business_account_id;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
        $this->nickname = ($message->nickname !== null) ? $message->nickname : $this->nickname;
        $this->name1 = ($message->name1 !== null) ? $message->name1 : $this->name1;
        $this->name2 = ($message->name2 !== null) ? $message->name2 : $this->name2;
        $this->name3 = ($message->name3 !== null) ? $message->name3 : $this->name3;
        $this->vcard = ($message->vcard !== null) ? $message->vcard : $this->vcard;
        $this->image = ($message->image !== null) ? $message->image : $this->image;
        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->desired_login = ($message->desired_login !== null) ? $message->desired_login : $this->desired_login;
        $this->email = ($message->email !== null) ? $message->email : $this->email;
        $this->comments = ($message->comments !== null) ? $message->comments : $this->comments;
        $this->subscription = ($message->subscription !== null) ? $message->subscription : $this->subscription;
        $this->subscription_code = ($message->subscription_code !== null) ? $message->subscription_code : $this->subscription_code;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->security_parameters = ($message->security_parameters !== null) ? $message->security_parameters : $this->security_parameters;
        $this->passwords = ($message->passwords !== null) ? $message->passwords : $this->passwords;
        $this->blocked = ($message->blocked !== null) ? $message->blocked : $this->blocked;
        $this->blocked_in_business_account = ($message->blocked_in_business_account !== null) ? $message->blocked_in_business_account : $this->blocked_in_business_account;
        $this->crypt_record_id = ($message->crypt_record_id !== null) ? $message->crypt_record_id : $this->crypt_record_id;
        $this->user_pack_id = ($message->user_pack_id !== null) ? $message->user_pack_id : $this->user_pack_id;
        $this->sip_registration = ($message->sip_registration !== null) ? $message->sip_registration : $this->sip_registration;
        $this->sip_login = ($message->sip_login !== null) ? $message->sip_login : $this->sip_login;
        $this->sip_password = ($message->sip_password !== null) ? $message->sip_password : $this->sip_password;
        $this->balance = ($message->balance !== null) ? $message->balance : $this->balance;
        $this->ba_balance_limit = ($message->ba_balance_limit !== null) ? $message->ba_balance_limit : $this->ba_balance_limit;
        $this->ba_balance_used = ($message->ba_balance_used !== null) ? $message->ba_balance_used : $this->ba_balance_used;
        $this->keys = ($message->keys !== null) ? $message->keys : $this->keys;
        $this->last_security_change_date = ($message->last_security_change_date !== null) ? $message->last_security_change_date : $this->last_security_change_date;
        $this->last_password_change_date = ($message->last_password_change_date !== null) ? $message->last_password_change_date : $this->last_password_change_date;
        $this->active_certificate = ($message->active_certificate !== null) ? $message->active_certificate : $this->active_certificate;
        $this->ldap_dn = ($message->ldap_dn !== null) ? $message->ldap_dn : $this->ldap_dn;
        $this->secret_phrase_mode = ($message->secret_phrase_mode !== null) ? $message->secret_phrase_mode : $this->secret_phrase_mode;
        $this->account_keys_state = ($message->account_keys_state !== null) ? $message->account_keys_state : $this->account_keys_state;
        $this->preliminary_reset_mode = ($message->preliminary_reset_mode !== null) ? $message->preliminary_reset_mode : $this->preliminary_reset_mode;
    }


}


<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.CryptRecord
 */
class CryptRecord extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * cert optional string = 1
     *
     * @var string
     */
    protected $cert = null;

    /**
     * pk optional string = 2
     *
     * @var string
     */
    protected $pk = null;

    /**
     * pph optional string = 3
     *
     * @var string
     */
    protected $pph = null;

    /**
     * salg optional string = 4
     *
     * @var string
     */
    protected $salg = null;

    /**
     * salgkey optional int32 = 5
     *
     * @var int
     */
    protected $salgkey = null;

    /**
     * aalg optional string = 6
     *
     * @var string
     */
    protected $aalg = null;

    /**
     * aalgkey optional int32 = 7
     *
     * @var int
     */
    protected $aalgkey = null;

    /**
     * iv optional string = 8
     *
     * @var string
     */
    protected $iv = null;

    /**
     * halg optional string = 9
     *
     * @var string
     */
    protected $halg = null;

    /**
     * Check if 'cert' has a value
     *
     * @return bool
     */
    public function hasCert()
    {
        return $this->cert !== null;
    }

    /**
     * Get 'cert' value
     *
     * @return string
     */
    public function getCert()
    {
        return $this->cert;
    }

    /**
     * Set 'cert' value
     *
     * @param string $value
     */
    public function setCert($value = null)
    {
        $this->cert = $value;
    }

    /**
     * Check if 'pk' has a value
     *
     * @return bool
     */
    public function hasPk()
    {
        return $this->pk !== null;
    }

    /**
     * Get 'pk' value
     *
     * @return string
     */
    public function getPk()
    {
        return $this->pk;
    }

    /**
     * Set 'pk' value
     *
     * @param string $value
     */
    public function setPk($value = null)
    {
        $this->pk = $value;
    }

    /**
     * Check if 'pph' has a value
     *
     * @return bool
     */
    public function hasPph()
    {
        return $this->pph !== null;
    }

    /**
     * Get 'pph' value
     *
     * @return string
     */
    public function getPph()
    {
        return $this->pph;
    }

    /**
     * Set 'pph' value
     *
     * @param string $value
     */
    public function setPph($value = null)
    {
        $this->pph = $value;
    }

    /**
     * Check if 'salg' has a value
     *
     * @return bool
     */
    public function hasSalg()
    {
        return $this->salg !== null;
    }

    /**
     * Get 'salg' value
     *
     * @return string
     */
    public function getSalg()
    {
        return $this->salg;
    }

    /**
     * Set 'salg' value
     *
     * @param string $value
     */
    public function setSalg($value = null)
    {
        $this->salg = $value;
    }

    /**
     * Check if 'salgkey' has a value
     *
     * @return bool
     */
    public function hasSalgkey()
    {
        return $this->salgkey !== null;
    }

    /**
     * Get 'salgkey' value
     *
     * @return int
     */
    public function getSalgkey()
    {
        return $this->salgkey;
    }

    /**
     * Set 'salgkey' value
     *
     * @param int $value
     */
    public function setSalgkey($value = null)
    {
        $this->salgkey = $value;
    }

    /**
     * Check if 'aalg' has a value
     *
     * @return bool
     */
    public function hasAalg()
    {
        return $this->aalg !== null;
    }

    /**
     * Get 'aalg' value
     *
     * @return string
     */
    public function getAalg()
    {
        return $this->aalg;
    }

    /**
     * Set 'aalg' value
     *
     * @param string $value
     */
    public function setAalg($value = null)
    {
        $this->aalg = $value;
    }

    /**
     * Check if 'aalgkey' has a value
     *
     * @return bool
     */
    public function hasAalgkey()
    {
        return $this->aalgkey !== null;
    }

    /**
     * Get 'aalgkey' value
     *
     * @return int
     */
    public function getAalgkey()
    {
        return $this->aalgkey;
    }

    /**
     * Set 'aalgkey' value
     *
     * @param int $value
     */
    public function setAalgkey($value = null)
    {
        $this->aalgkey = $value;
    }

    /**
     * Check if 'iv' has a value
     *
     * @return bool
     */
    public function hasIv()
    {
        return $this->iv !== null;
    }

    /**
     * Get 'iv' value
     *
     * @return string
     */
    public function getIv()
    {
        return $this->iv;
    }

    /**
     * Set 'iv' value
     *
     * @param string $value
     */
    public function setIv($value = null)
    {
        $this->iv = $value;
    }

    /**
     * Check if 'halg' has a value
     *
     * @return bool
     */
    public function hasHalg()
    {
        return $this->halg !== null;
    }

    /**
     * Get 'halg' value
     *
     * @return string
     */
    public function getHalg()
    {
        return $this->halg;
    }

    /**
     * Set 'halg' value
     *
     * @param string $value
     */
    public function setHalg($value = null)
    {
        $this->halg = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'cert' => null,
            'pk' => null,
            'pph' => null,
            'salg' => null,
            'salgkey' => null,
            'aalg' => null,
            'aalgkey' => null,
            'iv' => null,
            'halg' => null
        ], $values);

        $message->setCert($values['cert']);
        $message->setPk($values['pk']);
        $message->setPph($values['pph']);
        $message->setSalg($values['salg']);
        $message->setSalgkey($values['salgkey']);
        $message->setAalg($values['aalg']);
        $message->setAalgkey($values['aalgkey']);
        $message->setIv($values['iv']);
        $message->setHalg($values['halg']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CryptRecord',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'cert',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'pk',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'pph',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'salg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'salgkey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'aalg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'aalgkey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'iv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'halg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->cert !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->cert);
        }

        if ($this->pk !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->pk);
        }

        if ($this->pph !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->pph);
        }

        if ($this->salg !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->salg);
        }

        if ($this->salgkey !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->salgkey);
        }

        if ($this->aalg !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->aalg);
        }

        if ($this->aalgkey !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->aalgkey);
        }

        if ($this->iv !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->iv);
        }

        if ($this->halg !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->halg);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cert = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->pk = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->pph = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->salg = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->salgkey = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->aalg = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->aalgkey = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->iv = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->halg = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->cert !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cert);
        }

        if ($this->pk !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->pk);
        }

        if ($this->pph !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->pph);
        }

        if ($this->salg !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->salg);
        }

        if ($this->salgkey !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->salgkey);
        }

        if ($this->aalg !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->aalg);
        }

        if ($this->aalgkey !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->aalgkey);
        }

        if ($this->iv !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->iv);
        }

        if ($this->halg !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->halg);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->cert = null;
        $this->pk = null;
        $this->pph = null;
        $this->salg = null;
        $this->salgkey = null;
        $this->aalg = null;
        $this->aalgkey = null;
        $this->iv = null;
        $this->halg = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\CryptRecord) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->cert = ($message->cert !== null) ? $message->cert : $this->cert;
        $this->pk = ($message->pk !== null) ? $message->pk : $this->pk;
        $this->pph = ($message->pph !== null) ? $message->pph : $this->pph;
        $this->salg = ($message->salg !== null) ? $message->salg : $this->salg;
        $this->salgkey = ($message->salgkey !== null) ? $message->salgkey : $this->salgkey;
        $this->aalg = ($message->aalg !== null) ? $message->aalg : $this->aalg;
        $this->aalgkey = ($message->aalgkey !== null) ? $message->aalgkey : $this->aalgkey;
        $this->iv = ($message->iv !== null) ? $message->iv : $this->iv;
        $this->halg = ($message->halg !== null) ? $message->halg : $this->halg;
    }


}


<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin\auth_request_response;

/**
 * Protobuf enum : EncryptServer.Protocol.Vipadmin.auth_request_response.Status
 */
class Status extends \Protobuf\Enum
{

    /**
     * OK = 1
     */
    const OK_VALUE = 1;

    /**
     * RETRY = 2
     */
    const RETRY_VALUE = 2;

    /**
     * BAD_AUTH = 3
     */
    const BAD_AUTH_VALUE = 3;

    /**
     * NOT_ALLOWED = 4
     */
    const NOT_ALLOWED_VALUE = 4;

    /**
     * NOT_FOUND = 5
     */
    const NOT_FOUND_VALUE = 5;

    /**
     * ADMIN_WITHOUT_PASSWORD = 6
     */
    const ADMIN_WITHOUT_PASSWORD_VALUE = 6;

    /**
     * LOGIN_EXISTS = 7
     */
    const LOGIN_EXISTS_VALUE = 7;

    /**
     * INVALID_LOGIN = 8
     */
    const INVALID_LOGIN_VALUE = 8;

    /**
     * INVALID_EMAIL = 9
     */
    const INVALID_EMAIL_VALUE = 9;

    /**
     * USER_LIMITS_REACHED = 10
     */
    const USER_LIMITS_REACHED_VALUE = 10;

    /**
     * CONTACTLIST_OP_FAILED = 11
     */
    const CONTACTLIST_OP_FAILED_VALUE = 11;

    /**
     * INVALID_PARAMETER = 12
     */
    const INVALID_PARAMETER_VALUE = 12;

    /**
     * EMAIL_EXISTS = 13
     */
    const EMAIL_EXISTS_VALUE = 13;

    /**
     * INTERNAL_SERVER_ERROR = 14
     */
    const INTERNAL_SERVER_ERROR_VALUE = 14;

    /**
     * INVALID_USER_PACK_ID = 15
     */
    const INVALID_USER_PACK_ID_VALUE = 15;

    /**
     * USER_PACK_LIMIT_REACHED = 16
     */
    const USER_PACK_LIMIT_REACHED_VALUE = 16;

    /**
     * USER_PACK_BLOCKED = 17
     */
    const USER_PACK_BLOCKED_VALUE = 17;

    /**
     * NO_ADMIN_SECTION = 18
     */
    const NO_ADMIN_SECTION_VALUE = 18;

    /**
     * INVALID_LDAP_DN = 19
     */
    const INVALID_LDAP_DN_VALUE = 19;

    /**
     * KEYS_LIMIT_REACHED = 20
     */
    const KEYS_LIMIT_REACHED_VALUE = 20;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $OK = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $RETRY = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $BAD_AUTH = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $NOT_ALLOWED = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $NOT_FOUND = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $ADMIN_WITHOUT_PASSWORD = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $LOGIN_EXISTS = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INVALID_LOGIN = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INVALID_EMAIL = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $USER_LIMITS_REACHED = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $CONTACTLIST_OP_FAILED = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INVALID_PARAMETER = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $EMAIL_EXISTS = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INTERNAL_SERVER_ERROR = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INVALID_USER_PACK_ID = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $USER_PACK_LIMIT_REACHED = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $USER_PACK_BLOCKED = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $NO_ADMIN_SECTION = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $INVALID_LDAP_DN = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    protected static $KEYS_LIMIT_REACHED = null;

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function OK()
    {
        if (self::$OK !== null) {
            return self::$OK;
        }

        return self::$OK = new self('OK', self::OK_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function RETRY()
    {
        if (self::$RETRY !== null) {
            return self::$RETRY;
        }

        return self::$RETRY = new self('RETRY', self::RETRY_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function BAD_AUTH()
    {
        if (self::$BAD_AUTH !== null) {
            return self::$BAD_AUTH;
        }

        return self::$BAD_AUTH = new self('BAD_AUTH', self::BAD_AUTH_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function NOT_ALLOWED()
    {
        if (self::$NOT_ALLOWED !== null) {
            return self::$NOT_ALLOWED;
        }

        return self::$NOT_ALLOWED = new self('NOT_ALLOWED', self::NOT_ALLOWED_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function NOT_FOUND()
    {
        if (self::$NOT_FOUND !== null) {
            return self::$NOT_FOUND;
        }

        return self::$NOT_FOUND = new self('NOT_FOUND', self::NOT_FOUND_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function ADMIN_WITHOUT_PASSWORD()
    {
        if (self::$ADMIN_WITHOUT_PASSWORD !== null) {
            return self::$ADMIN_WITHOUT_PASSWORD;
        }

        return self::$ADMIN_WITHOUT_PASSWORD = new self('ADMIN_WITHOUT_PASSWORD', self::ADMIN_WITHOUT_PASSWORD_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function LOGIN_EXISTS()
    {
        if (self::$LOGIN_EXISTS !== null) {
            return self::$LOGIN_EXISTS;
        }

        return self::$LOGIN_EXISTS = new self('LOGIN_EXISTS', self::LOGIN_EXISTS_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INVALID_LOGIN()
    {
        if (self::$INVALID_LOGIN !== null) {
            return self::$INVALID_LOGIN;
        }

        return self::$INVALID_LOGIN = new self('INVALID_LOGIN', self::INVALID_LOGIN_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INVALID_EMAIL()
    {
        if (self::$INVALID_EMAIL !== null) {
            return self::$INVALID_EMAIL;
        }

        return self::$INVALID_EMAIL = new self('INVALID_EMAIL', self::INVALID_EMAIL_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function USER_LIMITS_REACHED()
    {
        if (self::$USER_LIMITS_REACHED !== null) {
            return self::$USER_LIMITS_REACHED;
        }

        return self::$USER_LIMITS_REACHED = new self('USER_LIMITS_REACHED', self::USER_LIMITS_REACHED_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function CONTACTLIST_OP_FAILED()
    {
        if (self::$CONTACTLIST_OP_FAILED !== null) {
            return self::$CONTACTLIST_OP_FAILED;
        }

        return self::$CONTACTLIST_OP_FAILED = new self('CONTACTLIST_OP_FAILED', self::CONTACTLIST_OP_FAILED_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INVALID_PARAMETER()
    {
        if (self::$INVALID_PARAMETER !== null) {
            return self::$INVALID_PARAMETER;
        }

        return self::$INVALID_PARAMETER = new self('INVALID_PARAMETER', self::INVALID_PARAMETER_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function EMAIL_EXISTS()
    {
        if (self::$EMAIL_EXISTS !== null) {
            return self::$EMAIL_EXISTS;
        }

        return self::$EMAIL_EXISTS = new self('EMAIL_EXISTS', self::EMAIL_EXISTS_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INTERNAL_SERVER_ERROR()
    {
        if (self::$INTERNAL_SERVER_ERROR !== null) {
            return self::$INTERNAL_SERVER_ERROR;
        }

        return self::$INTERNAL_SERVER_ERROR = new self('INTERNAL_SERVER_ERROR', self::INTERNAL_SERVER_ERROR_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INVALID_USER_PACK_ID()
    {
        if (self::$INVALID_USER_PACK_ID !== null) {
            return self::$INVALID_USER_PACK_ID;
        }

        return self::$INVALID_USER_PACK_ID = new self('INVALID_USER_PACK_ID', self::INVALID_USER_PACK_ID_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function USER_PACK_LIMIT_REACHED()
    {
        if (self::$USER_PACK_LIMIT_REACHED !== null) {
            return self::$USER_PACK_LIMIT_REACHED;
        }

        return self::$USER_PACK_LIMIT_REACHED = new self('USER_PACK_LIMIT_REACHED', self::USER_PACK_LIMIT_REACHED_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function USER_PACK_BLOCKED()
    {
        if (self::$USER_PACK_BLOCKED !== null) {
            return self::$USER_PACK_BLOCKED;
        }

        return self::$USER_PACK_BLOCKED = new self('USER_PACK_BLOCKED', self::USER_PACK_BLOCKED_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function NO_ADMIN_SECTION()
    {
        if (self::$NO_ADMIN_SECTION !== null) {
            return self::$NO_ADMIN_SECTION;
        }

        return self::$NO_ADMIN_SECTION = new self('NO_ADMIN_SECTION', self::NO_ADMIN_SECTION_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function INVALID_LDAP_DN()
    {
        if (self::$INVALID_LDAP_DN !== null) {
            return self::$INVALID_LDAP_DN;
        }

        return self::$INVALID_LDAP_DN = new self('INVALID_LDAP_DN', self::INVALID_LDAP_DN_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function KEYS_LIMIT_REACHED()
    {
        if (self::$KEYS_LIMIT_REACHED !== null) {
            return self::$KEYS_LIMIT_REACHED;
        }

        return self::$KEYS_LIMIT_REACHED = new self('KEYS_LIMIT_REACHED', self::KEYS_LIMIT_REACHED_VALUE);
    }

    /**
     * @param int $value
     * @return \EncryptServer\Protocol\Vipadmin\auth_request_response\Status
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::OK();
            case 2: return self::RETRY();
            case 3: return self::BAD_AUTH();
            case 4: return self::NOT_ALLOWED();
            case 5: return self::NOT_FOUND();
            case 6: return self::ADMIN_WITHOUT_PASSWORD();
            case 7: return self::LOGIN_EXISTS();
            case 8: return self::INVALID_LOGIN();
            case 9: return self::INVALID_EMAIL();
            case 10: return self::USER_LIMITS_REACHED();
            case 11: return self::CONTACTLIST_OP_FAILED();
            case 12: return self::INVALID_PARAMETER();
            case 13: return self::EMAIL_EXISTS();
            case 14: return self::INTERNAL_SERVER_ERROR();
            case 15: return self::INVALID_USER_PACK_ID();
            case 16: return self::USER_PACK_LIMIT_REACHED();
            case 17: return self::USER_PACK_BLOCKED();
            case 18: return self::NO_ADMIN_SECTION();
            case 19: return self::INVALID_LDAP_DN();
            case 20: return self::KEYS_LIMIT_REACHED();
            default: return null;
        }
    }


}


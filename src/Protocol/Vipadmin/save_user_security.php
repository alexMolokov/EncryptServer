<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.save_user_security
 */
class save_user_security extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * domain_id optional string = 2
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * business_account_id optional string = 3
     *
     * @var string
     */
    protected $business_account_id = null;

    /**
     * login optional string = 4
     *
     * @var string
     */
    protected $login = null;

    /**
     * operation optional int32 = 5
     *
     * @var int
     */
    protected $operation = null;

    /**
     * block optional bool = 6
     *
     * @var bool
     */
    protected $block = null;

    /**
     * ba_block optional bool = 7
     *
     * @var bool
     */
    protected $ba_block = null;

    /**
     * fields repeated message = 8
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    protected $fields = null;

    /**
     * crypt_record optional message = 9
     *
     * @var \EncryptServer\Protocol\Vipadmin\CryptRecord
     */
    protected $crypt_record = null;

    /**
     * old_pph optional string = 10
     *
     * @var string
     */
    protected $old_pph = null;

    /**
     * old_record_id optional string = 11
     *
     * @var string
     */
    protected $old_record_id = null;

    /**
     * secret_phrase_mode optional int32 = 12
     *
     * @var int
     */
    protected $secret_phrase_mode = null;

    /**
     * account_keys_state optional int32 = 13
     *
     * @var int
     */
    protected $account_keys_state = null;

    /**
     * preliminary_reset_mode optional int32 = 14
     *
     * @var int
     */
    protected $preliminary_reset_mode = null;

    /**
     * phash optional string = 15
     *
     * @var string
     */
    protected $phash = null;

    /**
     * phash_hex optional string = 16
     *
     * @var string
     */
    protected $phash_hex = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'business_account_id' has a value
     *
     * @return bool
     */
    public function hasBusinessAccountId()
    {
        return $this->business_account_id !== null;
    }

    /**
     * Get 'business_account_id' value
     *
     * @return string
     */
    public function getBusinessAccountId()
    {
        return $this->business_account_id;
    }

    /**
     * Set 'business_account_id' value
     *
     * @param string $value
     */
    public function setBusinessAccountId($value = null)
    {
        $this->business_account_id = $value;
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value = null)
    {
        $this->login = $value;
    }

    /**
     * Check if 'operation' has a value
     *
     * @return bool
     */
    public function hasOperation()
    {
        return $this->operation !== null;
    }

    /**
     * Get 'operation' value
     *
     * @return int
     */
    public function getOperation()
    {
        return $this->operation;
    }

    /**
     * Set 'operation' value
     *
     * @param int $value
     */
    public function setOperation($value = null)
    {
        $this->operation = $value;
    }

    /**
     * Check if 'block' has a value
     *
     * @return bool
     */
    public function hasBlock()
    {
        return $this->block !== null;
    }

    /**
     * Get 'block' value
     *
     * @return bool
     */
    public function getBlock()
    {
        return $this->block;
    }

    /**
     * Set 'block' value
     *
     * @param bool $value
     */
    public function setBlock($value = null)
    {
        $this->block = $value;
    }

    /**
     * Check if 'ba_block' has a value
     *
     * @return bool
     */
    public function hasBaBlock()
    {
        return $this->ba_block !== null;
    }

    /**
     * Get 'ba_block' value
     *
     * @return bool
     */
    public function getBaBlock()
    {
        return $this->ba_block;
    }

    /**
     * Set 'ba_block' value
     *
     * @param bool $value
     */
    public function setBaBlock($value = null)
    {
        $this->ba_block = $value;
    }

    /**
     * Check if 'fields' has a value
     *
     * @return bool
     */
    public function hasFieldsList()
    {
        return $this->fields !== null;
    }

    /**
     * Get 'fields' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    public function getFieldsList()
    {
        return $this->fields;
    }

    /**
     * Set 'fields' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField> $value
     */
    public function setFieldsList(\Protobuf\Collection $value = null)
    {
        $this->fields = $value;
    }

    /**
     * Add a new element to 'fields'
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityField $value
     */
    public function addFields(\EncryptServer\Protocol\Vipadmin\SecurityField $value)
    {
        if ($this->fields === null) {
            $this->fields = new \Protobuf\MessageCollection();
        }

        $this->fields->add($value);
    }

    /**
     * Check if 'crypt_record' has a value
     *
     * @return bool
     */
    public function hasCryptRecord()
    {
        return $this->crypt_record !== null;
    }

    /**
     * Get 'crypt_record' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\CryptRecord
     */
    public function getCryptRecord()
    {
        return $this->crypt_record;
    }

    /**
     * Set 'crypt_record' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\CryptRecord $value
     */
    public function setCryptRecord(\EncryptServer\Protocol\Vipadmin\CryptRecord $value = null)
    {
        $this->crypt_record = $value;
    }

    /**
     * Check if 'old_pph' has a value
     *
     * @return bool
     */
    public function hasOldPph()
    {
        return $this->old_pph !== null;
    }

    /**
     * Get 'old_pph' value
     *
     * @return string
     */
    public function getOldPph()
    {
        return $this->old_pph;
    }

    /**
     * Set 'old_pph' value
     *
     * @param string $value
     */
    public function setOldPph($value = null)
    {
        $this->old_pph = $value;
    }

    /**
     * Check if 'old_record_id' has a value
     *
     * @return bool
     */
    public function hasOldRecordId()
    {
        return $this->old_record_id !== null;
    }

    /**
     * Get 'old_record_id' value
     *
     * @return string
     */
    public function getOldRecordId()
    {
        return $this->old_record_id;
    }

    /**
     * Set 'old_record_id' value
     *
     * @param string $value
     */
    public function setOldRecordId($value = null)
    {
        $this->old_record_id = $value;
    }

    /**
     * Check if 'secret_phrase_mode' has a value
     *
     * @return bool
     */
    public function hasSecretPhraseMode()
    {
        return $this->secret_phrase_mode !== null;
    }

    /**
     * Get 'secret_phrase_mode' value
     *
     * @return int
     */
    public function getSecretPhraseMode()
    {
        return $this->secret_phrase_mode;
    }

    /**
     * Set 'secret_phrase_mode' value
     *
     * @param int $value
     */
    public function setSecretPhraseMode($value = null)
    {
        $this->secret_phrase_mode = $value;
    }

    /**
     * Check if 'account_keys_state' has a value
     *
     * @return bool
     */
    public function hasAccountKeysState()
    {
        return $this->account_keys_state !== null;
    }

    /**
     * Get 'account_keys_state' value
     *
     * @return int
     */
    public function getAccountKeysState()
    {
        return $this->account_keys_state;
    }

    /**
     * Set 'account_keys_state' value
     *
     * @param int $value
     */
    public function setAccountKeysState($value = null)
    {
        $this->account_keys_state = $value;
    }

    /**
     * Check if 'preliminary_reset_mode' has a value
     *
     * @return bool
     */
    public function hasPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode !== null;
    }

    /**
     * Get 'preliminary_reset_mode' value
     *
     * @return int
     */
    public function getPreliminaryResetMode()
    {
        return $this->preliminary_reset_mode;
    }

    /**
     * Set 'preliminary_reset_mode' value
     *
     * @param int $value
     */
    public function setPreliminaryResetMode($value = null)
    {
        $this->preliminary_reset_mode = $value;
    }

    /**
     * Check if 'phash' has a value
     *
     * @return bool
     */
    public function hasPhash()
    {
        return $this->phash !== null;
    }

    /**
     * Get 'phash' value
     *
     * @return string
     */
    public function getPhash()
    {
        return $this->phash;
    }

    /**
     * Set 'phash' value
     *
     * @param string $value
     */
    public function setPhash($value = null)
    {
        $this->phash = $value;
    }

    /**
     * Check if 'phash_hex' has a value
     *
     * @return bool
     */
    public function hasPhashHex()
    {
        return $this->phash_hex !== null;
    }

    /**
     * Get 'phash_hex' value
     *
     * @return string
     */
    public function getPhashHex()
    {
        return $this->phash_hex;
    }

    /**
     * Set 'phash_hex' value
     *
     * @param string $value
     */
    public function setPhashHex($value = null)
    {
        $this->phash_hex = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'domain_id' => null,
            'business_account_id' => null,
            'login' => null,
            'operation' => null,
            'block' => null,
            'ba_block' => null,
            'fields' => [],
            'crypt_record' => null,
            'old_pph' => null,
            'old_record_id' => null,
            'secret_phrase_mode' => null,
            'account_keys_state' => null,
            'preliminary_reset_mode' => null,
            'phash' => null,
            'phash_hex' => null
        ], $values);

        $message->setId($values['id']);
        $message->setDomainId($values['domain_id']);
        $message->setBusinessAccountId($values['business_account_id']);
        $message->setLogin($values['login']);
        $message->setOperation($values['operation']);
        $message->setBlock($values['block']);
        $message->setBaBlock($values['ba_block']);
        $message->setCryptRecord($values['crypt_record']);
        $message->setOldPph($values['old_pph']);
        $message->setOldRecordId($values['old_record_id']);
        $message->setSecretPhraseMode($values['secret_phrase_mode']);
        $message->setAccountKeysState($values['account_keys_state']);
        $message->setPreliminaryResetMode($values['preliminary_reset_mode']);
        $message->setPhash($values['phash']);
        $message->setPhashHex($values['phash_hex']);

        foreach ($values['fields'] as $item) {
            $message->addFields($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'save_user_security',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'business_account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'operation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'block',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ba_block',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'fields',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.SecurityField'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'crypt_record',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.CryptRecord'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'old_pph',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'old_record_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'secret_phrase_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'account_keys_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'preliminary_reset_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'phash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'phash_hex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\save_user_security#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->business_account_id);
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->login);
        }

        if ($this->operation !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->operation);
        }

        if ($this->block !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->block);
        }

        if ($this->ba_block !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->ba_block);
        }

        if ($this->fields !== null) {
            foreach ($this->fields as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->crypt_record !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->crypt_record->serializedSize($sizeContext));
            $this->crypt_record->writeTo($context);
        }

        if ($this->old_pph !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->old_pph);
        }

        if ($this->old_record_id !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->old_record_id);
        }

        if ($this->secret_phrase_mode !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->preliminary_reset_mode);
        }

        if ($this->phash !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->phash);
        }

        if ($this->phash_hex !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->phash_hex);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->business_account_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->operation = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->block = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ba_block = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityField();

                if ($this->fields === null) {
                    $this->fields = new \Protobuf\MessageCollection();
                }

                $this->fields->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\CryptRecord();

                $this->crypt_record = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->old_pph = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->old_record_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->secret_phrase_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->account_keys_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->preliminary_reset_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->phash = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->phash_hex = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->business_account_id);
        }

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->operation !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->operation);
        }

        if ($this->block !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ba_block !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->fields !== null) {
            foreach ($this->fields as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->crypt_record !== null) {
            $innerSize = $this->crypt_record->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->old_pph !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->old_pph);
        }

        if ($this->old_record_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->old_record_id);
        }

        if ($this->secret_phrase_mode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_keys_state);
        }

        if ($this->preliminary_reset_mode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->preliminary_reset_mode);
        }

        if ($this->phash !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->phash);
        }

        if ($this->phash_hex !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->phash_hex);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->domain_id = null;
        $this->business_account_id = null;
        $this->login = null;
        $this->operation = null;
        $this->block = null;
        $this->ba_block = null;
        $this->fields = null;
        $this->crypt_record = null;
        $this->old_pph = null;
        $this->old_record_id = null;
        $this->secret_phrase_mode = null;
        $this->account_keys_state = null;
        $this->preliminary_reset_mode = null;
        $this->phash = null;
        $this->phash_hex = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\save_user_security) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->business_account_id = ($message->business_account_id !== null) ? $message->business_account_id : $this->business_account_id;
        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->operation = ($message->operation !== null) ? $message->operation : $this->operation;
        $this->block = ($message->block !== null) ? $message->block : $this->block;
        $this->ba_block = ($message->ba_block !== null) ? $message->ba_block : $this->ba_block;
        $this->fields = ($message->fields !== null) ? $message->fields : $this->fields;
        $this->crypt_record = ($message->crypt_record !== null) ? $message->crypt_record : $this->crypt_record;
        $this->old_pph = ($message->old_pph !== null) ? $message->old_pph : $this->old_pph;
        $this->old_record_id = ($message->old_record_id !== null) ? $message->old_record_id : $this->old_record_id;
        $this->secret_phrase_mode = ($message->secret_phrase_mode !== null) ? $message->secret_phrase_mode : $this->secret_phrase_mode;
        $this->account_keys_state = ($message->account_keys_state !== null) ? $message->account_keys_state : $this->account_keys_state;
        $this->preliminary_reset_mode = ($message->preliminary_reset_mode !== null) ? $message->preliminary_reset_mode : $this->preliminary_reset_mode;
        $this->phash = ($message->phash !== null) ? $message->phash : $this->phash;
        $this->phash_hex = ($message->phash_hex !== null) ? $message->phash_hex : $this->phash_hex;
    }


}


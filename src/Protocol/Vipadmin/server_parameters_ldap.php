<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.server_parameters_ldap
 */
class server_parameters_ldap extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * enabled required bool = 1
     *
     * @var bool
     */
    protected $enabled = null;

    /**
     * uri optional string = 2
     *
     * @var string
     */
    protected $uri = null;

    /**
     * admin_dn optional string = 3
     *
     * @var string
     */
    protected $admin_dn = null;

    /**
     * admin_password optional string = 4
     *
     * @var string
     */
    protected $admin_password = null;

    /**
     * base_dns optional string = 5
     *
     * @var string
     */
    protected $base_dns = null;

    /**
     * tls optional bool = 6
     *
     * @var bool
     */
    protected $tls = null;

    /**
     * user_map repeated message = 7
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map>
     */
    protected $user_map = null;

    /**
     * enable_search optional bool = 8
     *
     * @var bool
     */
    protected $enable_search = null;

    /**
     * exclude_search_filter optional string = 9
     *
     * @var string
     */
    protected $exclude_search_filter = null;

    /**
     * directory_map repeated message = 10
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map>
     */
    protected $directory_map = null;

    /**
     * user_filter optional string = 11
     *
     * @var string
     */
    protected $user_filter = null;

    /**
     * directory_filter optional string = 12
     *
     * @var string
     */
    protected $directory_filter = null;

    /**
     * max_results_per_search optional int32 = 13
     *
     * @var int
     */
    protected $max_results_per_search = null;

    /**
     * blocked_user_filter optional string = 14
     *
     * @var string
     */
    protected $blocked_user_filter = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->max_results_per_search = '1000';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'enabled' has a value
     *
     * @return bool
     */
    public function hasEnabled()
    {
        return $this->enabled !== null;
    }

    /**
     * Get 'enabled' value
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Set 'enabled' value
     *
     * @param bool $value
     */
    public function setEnabled($value)
    {
        $this->enabled = $value;
    }

    /**
     * Check if 'uri' has a value
     *
     * @return bool
     */
    public function hasUri()
    {
        return $this->uri !== null;
    }

    /**
     * Get 'uri' value
     *
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Set 'uri' value
     *
     * @param string $value
     */
    public function setUri($value = null)
    {
        $this->uri = $value;
    }

    /**
     * Check if 'admin_dn' has a value
     *
     * @return bool
     */
    public function hasAdminDn()
    {
        return $this->admin_dn !== null;
    }

    /**
     * Get 'admin_dn' value
     *
     * @return string
     */
    public function getAdminDn()
    {
        return $this->admin_dn;
    }

    /**
     * Set 'admin_dn' value
     *
     * @param string $value
     */
    public function setAdminDn($value = null)
    {
        $this->admin_dn = $value;
    }

    /**
     * Check if 'admin_password' has a value
     *
     * @return bool
     */
    public function hasAdminPassword()
    {
        return $this->admin_password !== null;
    }

    /**
     * Get 'admin_password' value
     *
     * @return string
     */
    public function getAdminPassword()
    {
        return $this->admin_password;
    }

    /**
     * Set 'admin_password' value
     *
     * @param string $value
     */
    public function setAdminPassword($value = null)
    {
        $this->admin_password = $value;
    }

    /**
     * Check if 'base_dns' has a value
     *
     * @return bool
     */
    public function hasBaseDns()
    {
        return $this->base_dns !== null;
    }

    /**
     * Get 'base_dns' value
     *
     * @return string
     */
    public function getBaseDns()
    {
        return $this->base_dns;
    }

    /**
     * Set 'base_dns' value
     *
     * @param string $value
     */
    public function setBaseDns($value = null)
    {
        $this->base_dns = $value;
    }

    /**
     * Check if 'tls' has a value
     *
     * @return bool
     */
    public function hasTls()
    {
        return $this->tls !== null;
    }

    /**
     * Get 'tls' value
     *
     * @return bool
     */
    public function getTls()
    {
        return $this->tls;
    }

    /**
     * Set 'tls' value
     *
     * @param bool $value
     */
    public function setTls($value = null)
    {
        $this->tls = $value;
    }

    /**
     * Check if 'user_map' has a value
     *
     * @return bool
     */
    public function hasUserMapList()
    {
        return $this->user_map !== null;
    }

    /**
     * Get 'user_map' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map>
     */
    public function getUserMapList()
    {
        return $this->user_map;
    }

    /**
     * Set 'user_map' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map> $value
     */
    public function setUserMapList(\Protobuf\Collection $value = null)
    {
        $this->user_map = $value;
    }

    /**
     * Add a new element to 'user_map'
     *
     * @param \EncryptServer\Protocol\Vipadmin\ldap_field_map $value
     */
    public function addUserMap(\EncryptServer\Protocol\Vipadmin\ldap_field_map $value)
    {
        if ($this->user_map === null) {
            $this->user_map = new \Protobuf\MessageCollection();
        }

        $this->user_map->add($value);
    }

    /**
     * Check if 'enable_search' has a value
     *
     * @return bool
     */
    public function hasEnableSearch()
    {
        return $this->enable_search !== null;
    }

    /**
     * Get 'enable_search' value
     *
     * @return bool
     */
    public function getEnableSearch()
    {
        return $this->enable_search;
    }

    /**
     * Set 'enable_search' value
     *
     * @param bool $value
     */
    public function setEnableSearch($value = null)
    {
        $this->enable_search = $value;
    }

    /**
     * Check if 'exclude_search_filter' has a value
     *
     * @return bool
     */
    public function hasExcludeSearchFilter()
    {
        return $this->exclude_search_filter !== null;
    }

    /**
     * Get 'exclude_search_filter' value
     *
     * @return string
     */
    public function getExcludeSearchFilter()
    {
        return $this->exclude_search_filter;
    }

    /**
     * Set 'exclude_search_filter' value
     *
     * @param string $value
     */
    public function setExcludeSearchFilter($value = null)
    {
        $this->exclude_search_filter = $value;
    }

    /**
     * Check if 'directory_map' has a value
     *
     * @return bool
     */
    public function hasDirectoryMapList()
    {
        return $this->directory_map !== null;
    }

    /**
     * Get 'directory_map' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map>
     */
    public function getDirectoryMapList()
    {
        return $this->directory_map;
    }

    /**
     * Set 'directory_map' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_field_map> $value
     */
    public function setDirectoryMapList(\Protobuf\Collection $value = null)
    {
        $this->directory_map = $value;
    }

    /**
     * Add a new element to 'directory_map'
     *
     * @param \EncryptServer\Protocol\Vipadmin\ldap_field_map $value
     */
    public function addDirectoryMap(\EncryptServer\Protocol\Vipadmin\ldap_field_map $value)
    {
        if ($this->directory_map === null) {
            $this->directory_map = new \Protobuf\MessageCollection();
        }

        $this->directory_map->add($value);
    }

    /**
     * Check if 'user_filter' has a value
     *
     * @return bool
     */
    public function hasUserFilter()
    {
        return $this->user_filter !== null;
    }

    /**
     * Get 'user_filter' value
     *
     * @return string
     */
    public function getUserFilter()
    {
        return $this->user_filter;
    }

    /**
     * Set 'user_filter' value
     *
     * @param string $value
     */
    public function setUserFilter($value = null)
    {
        $this->user_filter = $value;
    }

    /**
     * Check if 'directory_filter' has a value
     *
     * @return bool
     */
    public function hasDirectoryFilter()
    {
        return $this->directory_filter !== null;
    }

    /**
     * Get 'directory_filter' value
     *
     * @return string
     */
    public function getDirectoryFilter()
    {
        return $this->directory_filter;
    }

    /**
     * Set 'directory_filter' value
     *
     * @param string $value
     */
    public function setDirectoryFilter($value = null)
    {
        $this->directory_filter = $value;
    }

    /**
     * Check if 'max_results_per_search' has a value
     *
     * @return bool
     */
    public function hasMaxResultsPerSearch()
    {
        return $this->max_results_per_search !== null;
    }

    /**
     * Get 'max_results_per_search' value
     *
     * @return int
     */
    public function getMaxResultsPerSearch()
    {
        return $this->max_results_per_search;
    }

    /**
     * Set 'max_results_per_search' value
     *
     * @param int $value
     */
    public function setMaxResultsPerSearch($value = null)
    {
        $this->max_results_per_search = $value;
    }

    /**
     * Check if 'blocked_user_filter' has a value
     *
     * @return bool
     */
    public function hasBlockedUserFilter()
    {
        return $this->blocked_user_filter !== null;
    }

    /**
     * Get 'blocked_user_filter' value
     *
     * @return string
     */
    public function getBlockedUserFilter()
    {
        return $this->blocked_user_filter;
    }

    /**
     * Set 'blocked_user_filter' value
     *
     * @param string $value
     */
    public function setBlockedUserFilter($value = null)
    {
        $this->blocked_user_filter = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['enabled'])) {
            throw new \InvalidArgumentException('Field "enabled" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'uri' => null,
            'admin_dn' => null,
            'admin_password' => null,
            'base_dns' => null,
            'tls' => null,
            'user_map' => [],
            'enable_search' => null,
            'exclude_search_filter' => null,
            'directory_map' => [],
            'user_filter' => null,
            'directory_filter' => null,
            'max_results_per_search' => '1000',
            'blocked_user_filter' => null
        ], $values);

        $message->setEnabled($values['enabled']);
        $message->setUri($values['uri']);
        $message->setAdminDn($values['admin_dn']);
        $message->setAdminPassword($values['admin_password']);
        $message->setBaseDns($values['base_dns']);
        $message->setTls($values['tls']);
        $message->setEnableSearch($values['enable_search']);
        $message->setExcludeSearchFilter($values['exclude_search_filter']);
        $message->setUserFilter($values['user_filter']);
        $message->setDirectoryFilter($values['directory_filter']);
        $message->setMaxResultsPerSearch($values['max_results_per_search']);
        $message->setBlockedUserFilter($values['blocked_user_filter']);

        foreach ($values['user_map'] as $item) {
            $message->addUserMap($item);
        }

        foreach ($values['directory_map'] as $item) {
            $message->addDirectoryMap($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'server_parameters_ldap',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'uri',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'admin_dn',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'admin_password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'base_dns',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'tls',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'user_map',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ldap_field_map'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'enable_search',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'exclude_search_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'directory_map',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ldap_field_map'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'user_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'directory_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'max_results_per_search',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1000'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'blocked_user_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->enabled === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\server_parameters_ldap#enabled" (tag 1) is required but has no value.');
        }

        if ($this->enabled !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->enabled);
        }

        if ($this->uri !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->uri);
        }

        if ($this->admin_dn !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->admin_dn);
        }

        if ($this->admin_password !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->admin_password);
        }

        if ($this->base_dns !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->base_dns);
        }

        if ($this->tls !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->tls);
        }

        if ($this->user_map !== null) {
            foreach ($this->user_map as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->enable_search !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->enable_search);
        }

        if ($this->exclude_search_filter !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->exclude_search_filter);
        }

        if ($this->directory_map !== null) {
            foreach ($this->directory_map as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->user_filter !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->user_filter);
        }

        if ($this->directory_filter !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->directory_filter);
        }

        if ($this->max_results_per_search !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->max_results_per_search);
        }

        if ($this->blocked_user_filter !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->blocked_user_filter);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->uri = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->admin_dn = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->admin_password = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->base_dns = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->tls = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ldap_field_map();

                if ($this->user_map === null) {
                    $this->user_map = new \Protobuf\MessageCollection();
                }

                $this->user_map->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->enable_search = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->exclude_search_filter = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ldap_field_map();

                if ($this->directory_map === null) {
                    $this->directory_map = new \Protobuf\MessageCollection();
                }

                $this->directory_map->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->user_filter = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->directory_filter = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_results_per_search = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->blocked_user_filter = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->enabled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->uri !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->uri);
        }

        if ($this->admin_dn !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->admin_dn);
        }

        if ($this->admin_password !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->admin_password);
        }

        if ($this->base_dns !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->base_dns);
        }

        if ($this->tls !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->user_map !== null) {
            foreach ($this->user_map as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->enable_search !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->exclude_search_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->exclude_search_filter);
        }

        if ($this->directory_map !== null) {
            foreach ($this->directory_map as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->user_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->user_filter);
        }

        if ($this->directory_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->directory_filter);
        }

        if ($this->max_results_per_search !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_results_per_search);
        }

        if ($this->blocked_user_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->blocked_user_filter);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->enabled = null;
        $this->uri = null;
        $this->admin_dn = null;
        $this->admin_password = null;
        $this->base_dns = null;
        $this->tls = null;
        $this->user_map = null;
        $this->enable_search = null;
        $this->exclude_search_filter = null;
        $this->directory_map = null;
        $this->user_filter = null;
        $this->directory_filter = null;
        $this->max_results_per_search = '1000';
        $this->blocked_user_filter = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\server_parameters_ldap) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->enabled = ($message->enabled !== null) ? $message->enabled : $this->enabled;
        $this->uri = ($message->uri !== null) ? $message->uri : $this->uri;
        $this->admin_dn = ($message->admin_dn !== null) ? $message->admin_dn : $this->admin_dn;
        $this->admin_password = ($message->admin_password !== null) ? $message->admin_password : $this->admin_password;
        $this->base_dns = ($message->base_dns !== null) ? $message->base_dns : $this->base_dns;
        $this->tls = ($message->tls !== null) ? $message->tls : $this->tls;
        $this->user_map = ($message->user_map !== null) ? $message->user_map : $this->user_map;
        $this->enable_search = ($message->enable_search !== null) ? $message->enable_search : $this->enable_search;
        $this->exclude_search_filter = ($message->exclude_search_filter !== null) ? $message->exclude_search_filter : $this->exclude_search_filter;
        $this->directory_map = ($message->directory_map !== null) ? $message->directory_map : $this->directory_map;
        $this->user_filter = ($message->user_filter !== null) ? $message->user_filter : $this->user_filter;
        $this->directory_filter = ($message->directory_filter !== null) ? $message->directory_filter : $this->directory_filter;
        $this->max_results_per_search = ($message->max_results_per_search !== null) ? $message->max_results_per_search : $this->max_results_per_search;
        $this->blocked_user_filter = ($message->blocked_user_filter !== null) ? $message->blocked_user_filter : $this->blocked_user_filter;
    }


}


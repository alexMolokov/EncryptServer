<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin\save_ba_parameters;

/**
 * Protobuf enum : EncryptServer.Protocol.Vipadmin.save_ba_parameters.Param
 */
class Param extends \Protobuf\Enum
{

    /**
     * PARAM_NAME = 3
     */
    const PARAM_NAME_VALUE = 3;

    /**
     * PARAM_DETAILS = 4
     */
    const PARAM_DETAILS_VALUE = 4;

    /**
     * PARAM_USER_LIMIT = 5
     */
    const PARAM_USER_LIMIT_VALUE = 5;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    protected static $PARAM_NAME = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    protected static $PARAM_DETAILS = null;

    /**
     * @var \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    protected static $PARAM_USER_LIMIT = null;

    /**
     * @return \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    public static function PARAM_NAME()
    {
        if (self::$PARAM_NAME !== null) {
            return self::$PARAM_NAME;
        }

        return self::$PARAM_NAME = new self('PARAM_NAME', self::PARAM_NAME_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    public static function PARAM_DETAILS()
    {
        if (self::$PARAM_DETAILS !== null) {
            return self::$PARAM_DETAILS;
        }

        return self::$PARAM_DETAILS = new self('PARAM_DETAILS', self::PARAM_DETAILS_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    public static function PARAM_USER_LIMIT()
    {
        if (self::$PARAM_USER_LIMIT !== null) {
            return self::$PARAM_USER_LIMIT;
        }

        return self::$PARAM_USER_LIMIT = new self('PARAM_USER_LIMIT', self::PARAM_USER_LIMIT_VALUE);
    }

    /**
     * @param int $value
     * @return \EncryptServer\Protocol\Vipadmin\save_ba_parameters\Param
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 3: return self::PARAM_NAME();
            case 4: return self::PARAM_DETAILS();
            case 5: return self::PARAM_USER_LIMIT();
            default: return null;
        }
    }


}


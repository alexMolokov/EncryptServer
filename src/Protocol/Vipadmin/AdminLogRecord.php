<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.AdminLogRecord
 */
class AdminLogRecord extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * event optional int32 = 1
     *
     * @var int
     */
    protected $event = null;

    /**
     * event_status optional int32 = 2
     *
     * @var int
     */
    protected $event_status = null;

    /**
     * login optional string = 3
     *
     * @var string
     */
    protected $login = null;

    /**
     * domain optional string = 4
     *
     * @var string
     */
    protected $domain = null;

    /**
     * address optional string = 5
     *
     * @var string
     */
    protected $address = null;

    /**
     * session_id optional string = 6
     *
     * @var string
     */
    protected $session_id = null;

    /**
     * domain_id optional string = 7
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * buisness_account_id optional string = 8
     *
     * @var string
     */
    protected $buisness_account_id = null;

    /**
     * user optional string = 9
     *
     * @var string
     */
    protected $user = null;

    /**
     * time optional int32 = 10
     *
     * @var int
     */
    protected $time = null;

    /**
     * extra_code optional int32 = 11
     *
     * @var int
     */
    protected $extra_code = null;

    /**
     * Check if 'event' has a value
     *
     * @return bool
     */
    public function hasEvent()
    {
        return $this->event !== null;
    }

    /**
     * Get 'event' value
     *
     * @return int
     */
    public function getEvent()
    {
        return $this->event;
    }

    /**
     * Set 'event' value
     *
     * @param int $value
     */
    public function setEvent($value = null)
    {
        $this->event = $value;
    }

    /**
     * Check if 'event_status' has a value
     *
     * @return bool
     */
    public function hasEventStatus()
    {
        return $this->event_status !== null;
    }

    /**
     * Get 'event_status' value
     *
     * @return int
     */
    public function getEventStatus()
    {
        return $this->event_status;
    }

    /**
     * Set 'event_status' value
     *
     * @param int $value
     */
    public function setEventStatus($value = null)
    {
        $this->event_status = $value;
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value = null)
    {
        $this->login = $value;
    }

    /**
     * Check if 'domain' has a value
     *
     * @return bool
     */
    public function hasDomain()
    {
        return $this->domain !== null;
    }

    /**
     * Get 'domain' value
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * Set 'domain' value
     *
     * @param string $value
     */
    public function setDomain($value = null)
    {
        $this->domain = $value;
    }

    /**
     * Check if 'address' has a value
     *
     * @return bool
     */
    public function hasAddress()
    {
        return $this->address !== null;
    }

    /**
     * Get 'address' value
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set 'address' value
     *
     * @param string $value
     */
    public function setAddress($value = null)
    {
        $this->address = $value;
    }

    /**
     * Check if 'session_id' has a value
     *
     * @return bool
     */
    public function hasSessionId()
    {
        return $this->session_id !== null;
    }

    /**
     * Get 'session_id' value
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->session_id;
    }

    /**
     * Set 'session_id' value
     *
     * @param string $value
     */
    public function setSessionId($value = null)
    {
        $this->session_id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'buisness_account_id' has a value
     *
     * @return bool
     */
    public function hasBuisnessAccountId()
    {
        return $this->buisness_account_id !== null;
    }

    /**
     * Get 'buisness_account_id' value
     *
     * @return string
     */
    public function getBuisnessAccountId()
    {
        return $this->buisness_account_id;
    }

    /**
     * Set 'buisness_account_id' value
     *
     * @param string $value
     */
    public function setBuisnessAccountId($value = null)
    {
        $this->buisness_account_id = $value;
    }

    /**
     * Check if 'user' has a value
     *
     * @return bool
     */
    public function hasUser()
    {
        return $this->user !== null;
    }

    /**
     * Get 'user' value
     *
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set 'user' value
     *
     * @param string $value
     */
    public function setUser($value = null)
    {
        $this->user = $value;
    }

    /**
     * Check if 'time' has a value
     *
     * @return bool
     */
    public function hasTime()
    {
        return $this->time !== null;
    }

    /**
     * Get 'time' value
     *
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * Set 'time' value
     *
     * @param int $value
     */
    public function setTime($value = null)
    {
        $this->time = $value;
    }

    /**
     * Check if 'extra_code' has a value
     *
     * @return bool
     */
    public function hasExtraCode()
    {
        return $this->extra_code !== null;
    }

    /**
     * Get 'extra_code' value
     *
     * @return int
     */
    public function getExtraCode()
    {
        return $this->extra_code;
    }

    /**
     * Set 'extra_code' value
     *
     * @param int $value
     */
    public function setExtraCode($value = null)
    {
        $this->extra_code = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'event' => null,
            'event_status' => null,
            'login' => null,
            'domain' => null,
            'address' => null,
            'session_id' => null,
            'domain_id' => null,
            'buisness_account_id' => null,
            'user' => null,
            'time' => null,
            'extra_code' => null
        ], $values);

        $message->setEvent($values['event']);
        $message->setEventStatus($values['event_status']);
        $message->setLogin($values['login']);
        $message->setDomain($values['domain']);
        $message->setAddress($values['address']);
        $message->setSessionId($values['session_id']);
        $message->setDomainId($values['domain_id']);
        $message->setBuisnessAccountId($values['buisness_account_id']);
        $message->setUser($values['user']);
        $message->setTime($values['time']);
        $message->setExtraCode($values['extra_code']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'AdminLogRecord',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'event',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'event_status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'domain',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'session_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'buisness_account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'user',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'extra_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->event !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->event);
        }

        if ($this->event_status !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->event_status);
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->login);
        }

        if ($this->domain !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->domain);
        }

        if ($this->address !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->address);
        }

        if ($this->session_id !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->session_id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->buisness_account_id !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->buisness_account_id);
        }

        if ($this->user !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->user);
        }

        if ($this->time !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->time);
        }

        if ($this->extra_code !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->extra_code);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->event = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->event_status = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->address = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->session_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->buisness_account_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->user = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->extra_code = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->event !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->event);
        }

        if ($this->event_status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->event_status);
        }

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->domain !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain);
        }

        if ($this->address !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->address);
        }

        if ($this->session_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->session_id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->buisness_account_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->buisness_account_id);
        }

        if ($this->user !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->user);
        }

        if ($this->time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time);
        }

        if ($this->extra_code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->extra_code);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->event = null;
        $this->event_status = null;
        $this->login = null;
        $this->domain = null;
        $this->address = null;
        $this->session_id = null;
        $this->domain_id = null;
        $this->buisness_account_id = null;
        $this->user = null;
        $this->time = null;
        $this->extra_code = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\AdminLogRecord) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->event = ($message->event !== null) ? $message->event : $this->event;
        $this->event_status = ($message->event_status !== null) ? $message->event_status : $this->event_status;
        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->domain = ($message->domain !== null) ? $message->domain : $this->domain;
        $this->address = ($message->address !== null) ? $message->address : $this->address;
        $this->session_id = ($message->session_id !== null) ? $message->session_id : $this->session_id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->buisness_account_id = ($message->buisness_account_id !== null) ? $message->buisness_account_id : $this->buisness_account_id;
        $this->user = ($message->user !== null) ? $message->user : $this->user;
        $this->time = ($message->time !== null) ? $message->time : $this->time;
        $this->extra_code = ($message->extra_code !== null) ? $message->extra_code : $this->extra_code;
    }


}


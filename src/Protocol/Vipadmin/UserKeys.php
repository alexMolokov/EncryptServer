<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.UserKeys
 */
class UserKeys extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required string = 1
     *
     * @var string
     */
    protected $id = null;

    /**
     * version required int32 = 2
     *
     * @var int
     */
    protected $version = null;

    /**
     * current optional bool = 3
     *
     * @var bool
     */
    protected $current = null;

    /**
     * created_date optional string = 4
     *
     * @var string
     */
    protected $created_date = null;

    /**
     * created_by optional string = 5
     *
     * @var string
     */
    protected $created_by = null;

    /**
     * created_ip optional string = 6
     *
     * @var string
     */
    protected $created_ip = null;

    /**
     * deleted_date optional string = 7
     *
     * @var string
     */
    protected $deleted_date = null;

    /**
     * deleted_by optional string = 8
     *
     * @var string
     */
    protected $deleted_by = null;

    /**
     * deleted_ip optional string = 9
     *
     * @var string
     */
    protected $deleted_ip = null;

    /**
     * removed optional bool = 10
     *
     * @var bool
     */
    protected $removed = null;

    /**
     * has_pph optional bool = 11
     *
     * @var bool
     */
    protected $has_pph = null;

    /**
     * pkey optional string = 12
     *
     * @var string
     */
    protected $pkey = null;

    /**
     * cert optional string = 13
     *
     * @var string
     */
    protected $cert = null;

    /**
     * pregenerated optional bool = 14
     *
     * @var bool
     */
    protected $pregenerated = null;

    /**
     * stored_pph optional string = 15
     *
     * @var string
     */
    protected $stored_pph = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param string $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value)
    {
        $this->version = $value;
    }

    /**
     * Check if 'current' has a value
     *
     * @return bool
     */
    public function hasCurrent()
    {
        return $this->current !== null;
    }

    /**
     * Get 'current' value
     *
     * @return bool
     */
    public function getCurrent()
    {
        return $this->current;
    }

    /**
     * Set 'current' value
     *
     * @param bool $value
     */
    public function setCurrent($value = null)
    {
        $this->current = $value;
    }

    /**
     * Check if 'created_date' has a value
     *
     * @return bool
     */
    public function hasCreatedDate()
    {
        return $this->created_date !== null;
    }

    /**
     * Get 'created_date' value
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->created_date;
    }

    /**
     * Set 'created_date' value
     *
     * @param string $value
     */
    public function setCreatedDate($value = null)
    {
        $this->created_date = $value;
    }

    /**
     * Check if 'created_by' has a value
     *
     * @return bool
     */
    public function hasCreatedBy()
    {
        return $this->created_by !== null;
    }

    /**
     * Get 'created_by' value
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Set 'created_by' value
     *
     * @param string $value
     */
    public function setCreatedBy($value = null)
    {
        $this->created_by = $value;
    }

    /**
     * Check if 'created_ip' has a value
     *
     * @return bool
     */
    public function hasCreatedIp()
    {
        return $this->created_ip !== null;
    }

    /**
     * Get 'created_ip' value
     *
     * @return string
     */
    public function getCreatedIp()
    {
        return $this->created_ip;
    }

    /**
     * Set 'created_ip' value
     *
     * @param string $value
     */
    public function setCreatedIp($value = null)
    {
        $this->created_ip = $value;
    }

    /**
     * Check if 'deleted_date' has a value
     *
     * @return bool
     */
    public function hasDeletedDate()
    {
        return $this->deleted_date !== null;
    }

    /**
     * Get 'deleted_date' value
     *
     * @return string
     */
    public function getDeletedDate()
    {
        return $this->deleted_date;
    }

    /**
     * Set 'deleted_date' value
     *
     * @param string $value
     */
    public function setDeletedDate($value = null)
    {
        $this->deleted_date = $value;
    }

    /**
     * Check if 'deleted_by' has a value
     *
     * @return bool
     */
    public function hasDeletedBy()
    {
        return $this->deleted_by !== null;
    }

    /**
     * Get 'deleted_by' value
     *
     * @return string
     */
    public function getDeletedBy()
    {
        return $this->deleted_by;
    }

    /**
     * Set 'deleted_by' value
     *
     * @param string $value
     */
    public function setDeletedBy($value = null)
    {
        $this->deleted_by = $value;
    }

    /**
     * Check if 'deleted_ip' has a value
     *
     * @return bool
     */
    public function hasDeletedIp()
    {
        return $this->deleted_ip !== null;
    }

    /**
     * Get 'deleted_ip' value
     *
     * @return string
     */
    public function getDeletedIp()
    {
        return $this->deleted_ip;
    }

    /**
     * Set 'deleted_ip' value
     *
     * @param string $value
     */
    public function setDeletedIp($value = null)
    {
        $this->deleted_ip = $value;
    }

    /**
     * Check if 'removed' has a value
     *
     * @return bool
     */
    public function hasRemoved()
    {
        return $this->removed !== null;
    }

    /**
     * Get 'removed' value
     *
     * @return bool
     */
    public function getRemoved()
    {
        return $this->removed;
    }

    /**
     * Set 'removed' value
     *
     * @param bool $value
     */
    public function setRemoved($value = null)
    {
        $this->removed = $value;
    }

    /**
     * Check if 'has_pph' has a value
     *
     * @return bool
     */
    public function hasHasPph()
    {
        return $this->has_pph !== null;
    }

    /**
     * Get 'has_pph' value
     *
     * @return bool
     */
    public function getHasPph()
    {
        return $this->has_pph;
    }

    /**
     * Set 'has_pph' value
     *
     * @param bool $value
     */
    public function setHasPph($value = null)
    {
        $this->has_pph = $value;
    }

    /**
     * Check if 'pkey' has a value
     *
     * @return bool
     */
    public function hasPkey()
    {
        return $this->pkey !== null;
    }

    /**
     * Get 'pkey' value
     *
     * @return string
     */
    public function getPkey()
    {
        return $this->pkey;
    }

    /**
     * Set 'pkey' value
     *
     * @param string $value
     */
    public function setPkey($value = null)
    {
        $this->pkey = $value;
    }

    /**
     * Check if 'cert' has a value
     *
     * @return bool
     */
    public function hasCert()
    {
        return $this->cert !== null;
    }

    /**
     * Get 'cert' value
     *
     * @return string
     */
    public function getCert()
    {
        return $this->cert;
    }

    /**
     * Set 'cert' value
     *
     * @param string $value
     */
    public function setCert($value = null)
    {
        $this->cert = $value;
    }

    /**
     * Check if 'pregenerated' has a value
     *
     * @return bool
     */
    public function hasPregenerated()
    {
        return $this->pregenerated !== null;
    }

    /**
     * Get 'pregenerated' value
     *
     * @return bool
     */
    public function getPregenerated()
    {
        return $this->pregenerated;
    }

    /**
     * Set 'pregenerated' value
     *
     * @param bool $value
     */
    public function setPregenerated($value = null)
    {
        $this->pregenerated = $value;
    }

    /**
     * Check if 'stored_pph' has a value
     *
     * @return bool
     */
    public function hasStoredPph()
    {
        return $this->stored_pph !== null;
    }

    /**
     * Get 'stored_pph' value
     *
     * @return string
     */
    public function getStoredPph()
    {
        return $this->stored_pph;
    }

    /**
     * Set 'stored_pph' value
     *
     * @param string $value
     */
    public function setStoredPph($value = null)
    {
        $this->stored_pph = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['version'])) {
            throw new \InvalidArgumentException('Field "version" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'current' => null,
            'created_date' => null,
            'created_by' => null,
            'created_ip' => null,
            'deleted_date' => null,
            'deleted_by' => null,
            'deleted_ip' => null,
            'removed' => null,
            'has_pph' => null,
            'pkey' => null,
            'cert' => null,
            'pregenerated' => null,
            'stored_pph' => null
        ], $values);

        $message->setId($values['id']);
        $message->setVersion($values['version']);
        $message->setCurrent($values['current']);
        $message->setCreatedDate($values['created_date']);
        $message->setCreatedBy($values['created_by']);
        $message->setCreatedIp($values['created_ip']);
        $message->setDeletedDate($values['deleted_date']);
        $message->setDeletedBy($values['deleted_by']);
        $message->setDeletedIp($values['deleted_ip']);
        $message->setRemoved($values['removed']);
        $message->setHasPph($values['has_pph']);
        $message->setPkey($values['pkey']);
        $message->setCert($values['cert']);
        $message->setPregenerated($values['pregenerated']);
        $message->setStoredPph($values['stored_pph']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UserKeys',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'current',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'created_date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'created_by',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'created_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'deleted_date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'deleted_by',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'deleted_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'removed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'has_pph',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'pkey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'cert',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'pregenerated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'stored_pph',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\UserKeys#id" (tag 1) is required but has no value.');
        }

        if ($this->version === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\UserKeys#version" (tag 2) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->id);
        }

        if ($this->version !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->current !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->current);
        }

        if ($this->created_date !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->created_date);
        }

        if ($this->created_by !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->created_by);
        }

        if ($this->created_ip !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->created_ip);
        }

        if ($this->deleted_date !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->deleted_date);
        }

        if ($this->deleted_by !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->deleted_by);
        }

        if ($this->deleted_ip !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->deleted_ip);
        }

        if ($this->removed !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->removed);
        }

        if ($this->has_pph !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->has_pph);
        }

        if ($this->pkey !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->pkey);
        }

        if ($this->cert !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->cert);
        }

        if ($this->pregenerated !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->pregenerated);
        }

        if ($this->stored_pph !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->stored_pph);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->current = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->created_date = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->created_by = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->created_ip = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->deleted_date = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->deleted_by = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->deleted_ip = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->removed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->has_pph = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->pkey = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cert = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->pregenerated = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->stored_pph = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->id);
        }

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->current !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->created_date !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->created_date);
        }

        if ($this->created_by !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->created_by);
        }

        if ($this->created_ip !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->created_ip);
        }

        if ($this->deleted_date !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->deleted_date);
        }

        if ($this->deleted_by !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->deleted_by);
        }

        if ($this->deleted_ip !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->deleted_ip);
        }

        if ($this->removed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->has_pph !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->pkey !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->pkey);
        }

        if ($this->cert !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cert);
        }

        if ($this->pregenerated !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->stored_pph !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->stored_pph);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->version = null;
        $this->current = null;
        $this->created_date = null;
        $this->created_by = null;
        $this->created_ip = null;
        $this->deleted_date = null;
        $this->deleted_by = null;
        $this->deleted_ip = null;
        $this->removed = null;
        $this->has_pph = null;
        $this->pkey = null;
        $this->cert = null;
        $this->pregenerated = null;
        $this->stored_pph = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\UserKeys) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->current = ($message->current !== null) ? $message->current : $this->current;
        $this->created_date = ($message->created_date !== null) ? $message->created_date : $this->created_date;
        $this->created_by = ($message->created_by !== null) ? $message->created_by : $this->created_by;
        $this->created_ip = ($message->created_ip !== null) ? $message->created_ip : $this->created_ip;
        $this->deleted_date = ($message->deleted_date !== null) ? $message->deleted_date : $this->deleted_date;
        $this->deleted_by = ($message->deleted_by !== null) ? $message->deleted_by : $this->deleted_by;
        $this->deleted_ip = ($message->deleted_ip !== null) ? $message->deleted_ip : $this->deleted_ip;
        $this->removed = ($message->removed !== null) ? $message->removed : $this->removed;
        $this->has_pph = ($message->has_pph !== null) ? $message->has_pph : $this->has_pph;
        $this->pkey = ($message->pkey !== null) ? $message->pkey : $this->pkey;
        $this->cert = ($message->cert !== null) ? $message->cert : $this->cert;
        $this->pregenerated = ($message->pregenerated !== null) ? $message->pregenerated : $this->pregenerated;
        $this->stored_pph = ($message->stored_pph !== null) ? $message->stored_pph : $this->stored_pph;
    }


}


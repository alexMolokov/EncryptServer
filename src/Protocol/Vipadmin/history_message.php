<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.history_message
 */
class history_message extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * receiver required string = 1
     *
     * @var string
     */
    protected $receiver = null;

    /**
     * author required string = 2
     *
     * @var string
     */
    protected $author = null;

    /**
     * event_type optional int32 = 3
     *
     * @var int
     */
    protected $event_type = null;

    /**
     * content optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $content = null;

    /**
     * datetime optional int32 = 5
     *
     * @var int
     */
    protected $datetime = null;

    /**
     * Check if 'receiver' has a value
     *
     * @return bool
     */
    public function hasReceiver()
    {
        return $this->receiver !== null;
    }

    /**
     * Get 'receiver' value
     *
     * @return string
     */
    public function getReceiver()
    {
        return $this->receiver;
    }

    /**
     * Set 'receiver' value
     *
     * @param string $value
     */
    public function setReceiver($value)
    {
        $this->receiver = $value;
    }

    /**
     * Check if 'author' has a value
     *
     * @return bool
     */
    public function hasAuthor()
    {
        return $this->author !== null;
    }

    /**
     * Get 'author' value
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * Set 'author' value
     *
     * @param string $value
     */
    public function setAuthor($value)
    {
        $this->author = $value;
    }

    /**
     * Check if 'event_type' has a value
     *
     * @return bool
     */
    public function hasEventType()
    {
        return $this->event_type !== null;
    }

    /**
     * Get 'event_type' value
     *
     * @return int
     */
    public function getEventType()
    {
        return $this->event_type;
    }

    /**
     * Set 'event_type' value
     *
     * @param int $value
     */
    public function setEventType($value = null)
    {
        $this->event_type = $value;
    }

    /**
     * Check if 'content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->content !== null;
    }

    /**
     * Get 'content' value
     *
     * @return \Protobuf\Stream
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set 'content' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContent($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->content = $value;
    }

    /**
     * Check if 'datetime' has a value
     *
     * @return bool
     */
    public function hasDatetime()
    {
        return $this->datetime !== null;
    }

    /**
     * Get 'datetime' value
     *
     * @return int
     */
    public function getDatetime()
    {
        return $this->datetime;
    }

    /**
     * Set 'datetime' value
     *
     * @param int $value
     */
    public function setDatetime($value = null)
    {
        $this->datetime = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['receiver'])) {
            throw new \InvalidArgumentException('Field "receiver" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['author'])) {
            throw new \InvalidArgumentException('Field "author" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'event_type' => null,
            'content' => null,
            'datetime' => null
        ], $values);

        $message->setReceiver($values['receiver']);
        $message->setAuthor($values['author']);
        $message->setEventType($values['event_type']);
        $message->setContent($values['content']);
        $message->setDatetime($values['datetime']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'history_message',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'receiver',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'author',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'event_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'datetime',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->receiver === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\history_message#receiver" (tag 1) is required but has no value.');
        }

        if ($this->author === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\history_message#author" (tag 2) is required but has no value.');
        }

        if ($this->receiver !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->receiver);
        }

        if ($this->author !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->author);
        }

        if ($this->event_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->event_type);
        }

        if ($this->content !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->content);
        }

        if ($this->datetime !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->datetime);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->receiver = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->author = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->event_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->content = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->datetime = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->receiver !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->receiver);
        }

        if ($this->author !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->author);
        }

        if ($this->event_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->event_type);
        }

        if ($this->content !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->content);
        }

        if ($this->datetime !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->datetime);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->receiver = null;
        $this->author = null;
        $this->event_type = null;
        $this->content = null;
        $this->datetime = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\history_message) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->receiver = ($message->receiver !== null) ? $message->receiver : $this->receiver;
        $this->author = ($message->author !== null) ? $message->author : $this->author;
        $this->event_type = ($message->event_type !== null) ? $message->event_type : $this->event_type;
        $this->content = ($message->content !== null) ? $message->content : $this->content;
        $this->datetime = ($message->datetime !== null) ? $message->datetime : $this->datetime;
    }


}


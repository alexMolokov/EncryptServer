<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.get_user_list
 */
class get_user_list extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required int32 = 1
     *
     * @var int
     */
    protected $id = null;

    /**
     * domain_id optional string = 2
     *
     * @var string
     */
    protected $domain_id = null;

    /**
     * business_account_id optional string = 3
     *
     * @var string
     */
    protected $business_account_id = null;

    /**
     * sort_desc optional bool = 4
     *
     * @var bool
     */
    protected $sort_desc = null;

    /**
     * sort_field optional enum = 5
     *
     * @var \EncryptServer\Protocol\Vipadmin\get_user_list\Field
     */
    protected $sort_field = null;

    /**
     * offset optional int32 = 6
     *
     * @var int
     */
    protected $offset = null;

    /**
     * filter repeated message = 7
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\Filter>
     */
    protected $filter = null;

    /**
     * extra_code optional int32 = 8
     *
     * @var int
     */
    protected $extra_code = null;

    /**
     * fields_to_load repeated enum = 9
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\get_user_list\Field>
     */
    protected $fields_to_load = null;

    /**
     * page_size optional int32 = 10
     *
     * @var int
     */
    protected $page_size = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->sort_desc = true;
        $this->sort_field = \EncryptServer\Protocol\Vipadmin\get_user_list\Field::FIELD_LOGIN();
        $this->offset = '0';
        $this->page_size = '100';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param int $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'domain_id' has a value
     *
     * @return bool
     */
    public function hasDomainId()
    {
        return $this->domain_id !== null;
    }

    /**
     * Get 'domain_id' value
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->domain_id;
    }

    /**
     * Set 'domain_id' value
     *
     * @param string $value
     */
    public function setDomainId($value = null)
    {
        $this->domain_id = $value;
    }

    /**
     * Check if 'business_account_id' has a value
     *
     * @return bool
     */
    public function hasBusinessAccountId()
    {
        return $this->business_account_id !== null;
    }

    /**
     * Get 'business_account_id' value
     *
     * @return string
     */
    public function getBusinessAccountId()
    {
        return $this->business_account_id;
    }

    /**
     * Set 'business_account_id' value
     *
     * @param string $value
     */
    public function setBusinessAccountId($value = null)
    {
        $this->business_account_id = $value;
    }

    /**
     * Check if 'sort_desc' has a value
     *
     * @return bool
     */
    public function hasSortDesc()
    {
        return $this->sort_desc !== null;
    }

    /**
     * Get 'sort_desc' value
     *
     * @return bool
     */
    public function getSortDesc()
    {
        return $this->sort_desc;
    }

    /**
     * Set 'sort_desc' value
     *
     * @param bool $value
     */
    public function setSortDesc($value = null)
    {
        $this->sort_desc = $value;
    }

    /**
     * Check if 'sort_field' has a value
     *
     * @return bool
     */
    public function hasSortField()
    {
        return $this->sort_field !== null;
    }

    /**
     * Get 'sort_field' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\get_user_list\Field
     */
    public function getSortField()
    {
        return $this->sort_field;
    }

    /**
     * Set 'sort_field' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\get_user_list\Field $value
     */
    public function setSortField(\EncryptServer\Protocol\Vipadmin\get_user_list\Field $value = null)
    {
        $this->sort_field = $value;
    }

    /**
     * Check if 'offset' has a value
     *
     * @return bool
     */
    public function hasOffset()
    {
        return $this->offset !== null;
    }

    /**
     * Get 'offset' value
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->offset;
    }

    /**
     * Set 'offset' value
     *
     * @param int $value
     */
    public function setOffset($value = null)
    {
        $this->offset = $value;
    }

    /**
     * Check if 'filter' has a value
     *
     * @return bool
     */
    public function hasFilterList()
    {
        return $this->filter !== null;
    }

    /**
     * Get 'filter' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\Filter>
     */
    public function getFilterList()
    {
        return $this->filter;
    }

    /**
     * Set 'filter' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\Filter> $value
     */
    public function setFilterList(\Protobuf\Collection $value = null)
    {
        $this->filter = $value;
    }

    /**
     * Add a new element to 'filter'
     *
     * @param \EncryptServer\Protocol\Vipadmin\Filter $value
     */
    public function addFilter(\EncryptServer\Protocol\Vipadmin\Filter $value)
    {
        if ($this->filter === null) {
            $this->filter = new \Protobuf\MessageCollection();
        }

        $this->filter->add($value);
    }

    /**
     * Check if 'extra_code' has a value
     *
     * @return bool
     */
    public function hasExtraCode()
    {
        return $this->extra_code !== null;
    }

    /**
     * Get 'extra_code' value
     *
     * @return int
     */
    public function getExtraCode()
    {
        return $this->extra_code;
    }

    /**
     * Set 'extra_code' value
     *
     * @param int $value
     */
    public function setExtraCode($value = null)
    {
        $this->extra_code = $value;
    }

    /**
     * Check if 'fields_to_load' has a value
     *
     * @return bool
     */
    public function hasFieldsToLoadList()
    {
        return $this->fields_to_load !== null;
    }

    /**
     * Get 'fields_to_load' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\get_user_list\Field>
     */
    public function getFieldsToLoadList()
    {
        return $this->fields_to_load;
    }

    /**
     * Set 'fields_to_load' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\get_user_list\Field> $value
     */
    public function setFieldsToLoadList(\Protobuf\Collection $value = null)
    {
        $this->fields_to_load = $value;
    }

    /**
     * Add a new element to 'fields_to_load'
     *
     * @param \EncryptServer\Protocol\Vipadmin\get_user_list\Field $value
     */
    public function addFieldsToLoad(\EncryptServer\Protocol\Vipadmin\get_user_list\Field $value)
    {
        if ($this->fields_to_load === null) {
            $this->fields_to_load = new \Protobuf\EnumCollection();
        }

        $this->fields_to_load->add($value);
    }

    /**
     * Check if 'page_size' has a value
     *
     * @return bool
     */
    public function hasPageSize()
    {
        return $this->page_size !== null;
    }

    /**
     * Get 'page_size' value
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Set 'page_size' value
     *
     * @param int $value
     */
    public function setPageSize($value = null)
    {
        $this->page_size = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'domain_id' => null,
            'business_account_id' => null,
            'sort_desc' => true,
            'sort_field' => \EncryptServer\Protocol\Vipadmin\get_user_list\Field::FIELD_LOGIN(),
            'offset' => '0',
            'filter' => [],
            'extra_code' => null,
            'fields_to_load' => [],
            'page_size' => '100'
        ], $values);

        $message->setId($values['id']);
        $message->setDomainId($values['domain_id']);
        $message->setBusinessAccountId($values['business_account_id']);
        $message->setSortDesc($values['sort_desc']);
        $message->setSortField($values['sort_field']);
        $message->setOffset($values['offset']);
        $message->setExtraCode($values['extra_code']);
        $message->setPageSize($values['page_size']);

        foreach ($values['filter'] as $item) {
            $message->addFilter($item);
        }

        foreach ($values['fields_to_load'] as $item) {
            $message->addFieldsToLoad($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'get_user_list',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'business_account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'sort_desc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sort_field',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.get_user_list.Field',
                    'default_value' => \EncryptServer\Protocol\Vipadmin\get_user_list\Field::FIELD_LOGIN()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'offset',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.Filter'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'extra_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'fields_to_load',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.get_user_list.Field'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'page_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '100'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\get_user_list#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->id);
        }

        if ($this->domain_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->business_account_id);
        }

        if ($this->sort_desc !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->sort_desc);
        }

        if ($this->sort_field !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->sort_field->value());
        }

        if ($this->offset !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->offset);
        }

        if ($this->filter !== null) {
            foreach ($this->filter as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extra_code !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->extra_code);
        }

        if ($this->fields_to_load !== null) {
            foreach ($this->fields_to_load as $val) {
                $writer->writeVarint($stream, 72);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->page_size !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->page_size);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->business_account_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sort_desc = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->sort_field = \EncryptServer\Protocol\Vipadmin\get_user_list\Field::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->offset = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\Filter();

                if ($this->filter === null) {
                    $this->filter = new \Protobuf\MessageCollection();
                }

                $this->filter->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->extra_code = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->fields_to_load === null) {
                    $this->fields_to_load = new \Protobuf\EnumCollection();
                }

                $this->fields_to_load->add(\EncryptServer\Protocol\Vipadmin\get_user_list\Field::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->page_size = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->id);
        }

        if ($this->domain_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain_id);
        }

        if ($this->business_account_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->business_account_id);
        }

        if ($this->sort_desc !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->sort_field !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sort_field->value());
        }

        if ($this->offset !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->offset);
        }

        if ($this->filter !== null) {
            foreach ($this->filter as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extra_code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->extra_code);
        }

        if ($this->fields_to_load !== null) {
            foreach ($this->fields_to_load as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->page_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->page_size);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->domain_id = null;
        $this->business_account_id = null;
        $this->sort_desc = true;
        $this->sort_field = \EncryptServer\Protocol\Vipadmin\get_user_list\Field::FIELD_LOGIN();
        $this->offset = '0';
        $this->filter = null;
        $this->extra_code = null;
        $this->fields_to_load = null;
        $this->page_size = '100';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\get_user_list) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->domain_id = ($message->domain_id !== null) ? $message->domain_id : $this->domain_id;
        $this->business_account_id = ($message->business_account_id !== null) ? $message->business_account_id : $this->business_account_id;
        $this->sort_desc = ($message->sort_desc !== null) ? $message->sort_desc : $this->sort_desc;
        $this->sort_field = ($message->sort_field !== null) ? $message->sort_field : $this->sort_field;
        $this->offset = ($message->offset !== null) ? $message->offset : $this->offset;
        $this->filter = ($message->filter !== null) ? $message->filter : $this->filter;
        $this->extra_code = ($message->extra_code !== null) ? $message->extra_code : $this->extra_code;
        $this->fields_to_load = ($message->fields_to_load !== null) ? $message->fields_to_load : $this->fields_to_load;
        $this->page_size = ($message->page_size !== null) ? $message->page_size : $this->page_size;
    }


}


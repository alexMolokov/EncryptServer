<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.ba_ldap_policy
 */
class ba_ldap_policy extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * autoimport optional bool = 1
     *
     * @var bool
     */
    protected $autoimport = null;

    /**
     * autoupdate_profile optional bool = 2
     *
     * @var bool
     */
    protected $autoupdate_profile = null;

    /**
     * search_filter optional string = 3
     *
     * @var string
     */
    protected $search_filter = null;

    /**
     * fields_map repeated message = 5
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item>
     */
    protected $fields_map = null;

    /**
     * search_base optional string = 6
     *
     * @var string
     */
    protected $search_base = null;

    /**
     * autoimport_cl_template_id optional string = 7
     *
     * @var string
     */
    protected $autoimport_cl_template_id = null;

    /**
     * autoimport_cl_dynamic_group optional string = 8
     *
     * @var string
     */
    protected $autoimport_cl_dynamic_group = null;

    /**
     * block_filter optional string = 9
     *
     * @var string
     */
    protected $block_filter = null;

    /**
     * directory_fields_map repeated message = 10
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item>
     */
    protected $directory_fields_map = null;

    /**
     * allowed_browse_users optional bool = 11
     *
     * @var bool
     */
    protected $allowed_browse_users = null;

    /**
     * Check if 'autoimport' has a value
     *
     * @return bool
     */
    public function hasAutoimport()
    {
        return $this->autoimport !== null;
    }

    /**
     * Get 'autoimport' value
     *
     * @return bool
     */
    public function getAutoimport()
    {
        return $this->autoimport;
    }

    /**
     * Set 'autoimport' value
     *
     * @param bool $value
     */
    public function setAutoimport($value = null)
    {
        $this->autoimport = $value;
    }

    /**
     * Check if 'autoupdate_profile' has a value
     *
     * @return bool
     */
    public function hasAutoupdateProfile()
    {
        return $this->autoupdate_profile !== null;
    }

    /**
     * Get 'autoupdate_profile' value
     *
     * @return bool
     */
    public function getAutoupdateProfile()
    {
        return $this->autoupdate_profile;
    }

    /**
     * Set 'autoupdate_profile' value
     *
     * @param bool $value
     */
    public function setAutoupdateProfile($value = null)
    {
        $this->autoupdate_profile = $value;
    }

    /**
     * Check if 'search_filter' has a value
     *
     * @return bool
     */
    public function hasSearchFilter()
    {
        return $this->search_filter !== null;
    }

    /**
     * Get 'search_filter' value
     *
     * @return string
     */
    public function getSearchFilter()
    {
        return $this->search_filter;
    }

    /**
     * Set 'search_filter' value
     *
     * @param string $value
     */
    public function setSearchFilter($value = null)
    {
        $this->search_filter = $value;
    }

    /**
     * Check if 'fields_map' has a value
     *
     * @return bool
     */
    public function hasFieldsMapList()
    {
        return $this->fields_map !== null;
    }

    /**
     * Get 'fields_map' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item>
     */
    public function getFieldsMapList()
    {
        return $this->fields_map;
    }

    /**
     * Set 'fields_map' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item> $value
     */
    public function setFieldsMapList(\Protobuf\Collection $value = null)
    {
        $this->fields_map = $value;
    }

    /**
     * Add a new element to 'fields_map'
     *
     * @param \EncryptServer\Protocol\Vipadmin\ldap_fields_map_item $value
     */
    public function addFieldsMap(\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item $value)
    {
        if ($this->fields_map === null) {
            $this->fields_map = new \Protobuf\MessageCollection();
        }

        $this->fields_map->add($value);
    }

    /**
     * Check if 'search_base' has a value
     *
     * @return bool
     */
    public function hasSearchBase()
    {
        return $this->search_base !== null;
    }

    /**
     * Get 'search_base' value
     *
     * @return string
     */
    public function getSearchBase()
    {
        return $this->search_base;
    }

    /**
     * Set 'search_base' value
     *
     * @param string $value
     */
    public function setSearchBase($value = null)
    {
        $this->search_base = $value;
    }

    /**
     * Check if 'autoimport_cl_template_id' has a value
     *
     * @return bool
     */
    public function hasAutoimportClTemplateId()
    {
        return $this->autoimport_cl_template_id !== null;
    }

    /**
     * Get 'autoimport_cl_template_id' value
     *
     * @return string
     */
    public function getAutoimportClTemplateId()
    {
        return $this->autoimport_cl_template_id;
    }

    /**
     * Set 'autoimport_cl_template_id' value
     *
     * @param string $value
     */
    public function setAutoimportClTemplateId($value = null)
    {
        $this->autoimport_cl_template_id = $value;
    }

    /**
     * Check if 'autoimport_cl_dynamic_group' has a value
     *
     * @return bool
     */
    public function hasAutoimportClDynamicGroup()
    {
        return $this->autoimport_cl_dynamic_group !== null;
    }

    /**
     * Get 'autoimport_cl_dynamic_group' value
     *
     * @return string
     */
    public function getAutoimportClDynamicGroup()
    {
        return $this->autoimport_cl_dynamic_group;
    }

    /**
     * Set 'autoimport_cl_dynamic_group' value
     *
     * @param string $value
     */
    public function setAutoimportClDynamicGroup($value = null)
    {
        $this->autoimport_cl_dynamic_group = $value;
    }

    /**
     * Check if 'block_filter' has a value
     *
     * @return bool
     */
    public function hasBlockFilter()
    {
        return $this->block_filter !== null;
    }

    /**
     * Get 'block_filter' value
     *
     * @return string
     */
    public function getBlockFilter()
    {
        return $this->block_filter;
    }

    /**
     * Set 'block_filter' value
     *
     * @param string $value
     */
    public function setBlockFilter($value = null)
    {
        $this->block_filter = $value;
    }

    /**
     * Check if 'directory_fields_map' has a value
     *
     * @return bool
     */
    public function hasDirectoryFieldsMapList()
    {
        return $this->directory_fields_map !== null;
    }

    /**
     * Get 'directory_fields_map' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item>
     */
    public function getDirectoryFieldsMapList()
    {
        return $this->directory_fields_map;
    }

    /**
     * Set 'directory_fields_map' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item> $value
     */
    public function setDirectoryFieldsMapList(\Protobuf\Collection $value = null)
    {
        $this->directory_fields_map = $value;
    }

    /**
     * Add a new element to 'directory_fields_map'
     *
     * @param \EncryptServer\Protocol\Vipadmin\ldap_fields_map_item $value
     */
    public function addDirectoryFieldsMap(\EncryptServer\Protocol\Vipadmin\ldap_fields_map_item $value)
    {
        if ($this->directory_fields_map === null) {
            $this->directory_fields_map = new \Protobuf\MessageCollection();
        }

        $this->directory_fields_map->add($value);
    }

    /**
     * Check if 'allowed_browse_users' has a value
     *
     * @return bool
     */
    public function hasAllowedBrowseUsers()
    {
        return $this->allowed_browse_users !== null;
    }

    /**
     * Get 'allowed_browse_users' value
     *
     * @return bool
     */
    public function getAllowedBrowseUsers()
    {
        return $this->allowed_browse_users;
    }

    /**
     * Set 'allowed_browse_users' value
     *
     * @param bool $value
     */
    public function setAllowedBrowseUsers($value = null)
    {
        $this->allowed_browse_users = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'autoimport' => null,
            'autoupdate_profile' => null,
            'search_filter' => null,
            'fields_map' => [],
            'search_base' => null,
            'autoimport_cl_template_id' => null,
            'autoimport_cl_dynamic_group' => null,
            'block_filter' => null,
            'directory_fields_map' => [],
            'allowed_browse_users' => null
        ], $values);

        $message->setAutoimport($values['autoimport']);
        $message->setAutoupdateProfile($values['autoupdate_profile']);
        $message->setSearchFilter($values['search_filter']);
        $message->setSearchBase($values['search_base']);
        $message->setAutoimportClTemplateId($values['autoimport_cl_template_id']);
        $message->setAutoimportClDynamicGroup($values['autoimport_cl_dynamic_group']);
        $message->setBlockFilter($values['block_filter']);
        $message->setAllowedBrowseUsers($values['allowed_browse_users']);

        foreach ($values['fields_map'] as $item) {
            $message->addFieldsMap($item);
        }

        foreach ($values['directory_fields_map'] as $item) {
            $message->addDirectoryFieldsMap($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ba_ldap_policy',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'autoimport',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'autoupdate_profile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'search_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'fields_map',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ldap_fields_map_item'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'search_base',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'autoimport_cl_template_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'autoimport_cl_dynamic_group',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'block_filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'directory_fields_map',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.ldap_fields_map_item'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'allowed_browse_users',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->autoimport !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->autoimport);
        }

        if ($this->autoupdate_profile !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->autoupdate_profile);
        }

        if ($this->search_filter !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->search_filter);
        }

        if ($this->fields_map !== null) {
            foreach ($this->fields_map as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->search_base !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->search_base);
        }

        if ($this->autoimport_cl_template_id !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->autoimport_cl_template_id);
        }

        if ($this->autoimport_cl_dynamic_group !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->autoimport_cl_dynamic_group);
        }

        if ($this->block_filter !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->block_filter);
        }

        if ($this->directory_fields_map !== null) {
            foreach ($this->directory_fields_map as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->allowed_browse_users !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->allowed_browse_users);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->autoimport = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->autoupdate_profile = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->search_filter = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ldap_fields_map_item();

                if ($this->fields_map === null) {
                    $this->fields_map = new \Protobuf\MessageCollection();
                }

                $this->fields_map->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->search_base = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->autoimport_cl_template_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->autoimport_cl_dynamic_group = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->block_filter = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\ldap_fields_map_item();

                if ($this->directory_fields_map === null) {
                    $this->directory_fields_map = new \Protobuf\MessageCollection();
                }

                $this->directory_fields_map->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->allowed_browse_users = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->autoimport !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->autoupdate_profile !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->search_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->search_filter);
        }

        if ($this->fields_map !== null) {
            foreach ($this->fields_map as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->search_base !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->search_base);
        }

        if ($this->autoimport_cl_template_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->autoimport_cl_template_id);
        }

        if ($this->autoimport_cl_dynamic_group !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->autoimport_cl_dynamic_group);
        }

        if ($this->block_filter !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->block_filter);
        }

        if ($this->directory_fields_map !== null) {
            foreach ($this->directory_fields_map as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->allowed_browse_users !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->autoimport = null;
        $this->autoupdate_profile = null;
        $this->search_filter = null;
        $this->fields_map = null;
        $this->search_base = null;
        $this->autoimport_cl_template_id = null;
        $this->autoimport_cl_dynamic_group = null;
        $this->block_filter = null;
        $this->directory_fields_map = null;
        $this->allowed_browse_users = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\ba_ldap_policy) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->autoimport = ($message->autoimport !== null) ? $message->autoimport : $this->autoimport;
        $this->autoupdate_profile = ($message->autoupdate_profile !== null) ? $message->autoupdate_profile : $this->autoupdate_profile;
        $this->search_filter = ($message->search_filter !== null) ? $message->search_filter : $this->search_filter;
        $this->fields_map = ($message->fields_map !== null) ? $message->fields_map : $this->fields_map;
        $this->search_base = ($message->search_base !== null) ? $message->search_base : $this->search_base;
        $this->autoimport_cl_template_id = ($message->autoimport_cl_template_id !== null) ? $message->autoimport_cl_template_id : $this->autoimport_cl_template_id;
        $this->autoimport_cl_dynamic_group = ($message->autoimport_cl_dynamic_group !== null) ? $message->autoimport_cl_dynamic_group : $this->autoimport_cl_dynamic_group;
        $this->block_filter = ($message->block_filter !== null) ? $message->block_filter : $this->block_filter;
        $this->directory_fields_map = ($message->directory_fields_map !== null) ? $message->directory_fields_map : $this->directory_fields_map;
        $this->allowed_browse_users = ($message->allowed_browse_users !== null) ? $message->allowed_browse_users : $this->allowed_browse_users;
    }


}


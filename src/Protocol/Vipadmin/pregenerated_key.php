<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.pregenerated_key
 */
class pregenerated_key extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * pub_key optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $pub_key = null;

    /**
     * priv_key optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $priv_key = null;

    /**
     * sc optional string = 3
     *
     * @var string
     */
    protected $sc = null;

    /**
     * id optional string = 4
     *
     * @var string
     */
    protected $id = null;

    /**
     * creation_time optional int32 = 5
     *
     * @var int
     */
    protected $creation_time = null;

    /**
     * admin_priv_key optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $admin_priv_key = null;

    /**
     * admin_pph optional string = 7
     *
     * @var string
     */
    protected $admin_pph = null;

    /**
     * Check if 'pub_key' has a value
     *
     * @return bool
     */
    public function hasPubKey()
    {
        return $this->pub_key !== null;
    }

    /**
     * Get 'pub_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getPubKey()
    {
        return $this->pub_key;
    }

    /**
     * Set 'pub_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPubKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->pub_key = $value;
    }

    /**
     * Check if 'priv_key' has a value
     *
     * @return bool
     */
    public function hasPrivKey()
    {
        return $this->priv_key !== null;
    }

    /**
     * Get 'priv_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getPrivKey()
    {
        return $this->priv_key;
    }

    /**
     * Set 'priv_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPrivKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->priv_key = $value;
    }

    /**
     * Check if 'sc' has a value
     *
     * @return bool
     */
    public function hasSc()
    {
        return $this->sc !== null;
    }

    /**
     * Get 'sc' value
     *
     * @return string
     */
    public function getSc()
    {
        return $this->sc;
    }

    /**
     * Set 'sc' value
     *
     * @param string $value
     */
    public function setSc($value = null)
    {
        $this->sc = $value;
    }

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param string $value
     */
    public function setId($value = null)
    {
        $this->id = $value;
    }

    /**
     * Check if 'creation_time' has a value
     *
     * @return bool
     */
    public function hasCreationTime()
    {
        return $this->creation_time !== null;
    }

    /**
     * Get 'creation_time' value
     *
     * @return int
     */
    public function getCreationTime()
    {
        return $this->creation_time;
    }

    /**
     * Set 'creation_time' value
     *
     * @param int $value
     */
    public function setCreationTime($value = null)
    {
        $this->creation_time = $value;
    }

    /**
     * Check if 'admin_priv_key' has a value
     *
     * @return bool
     */
    public function hasAdminPrivKey()
    {
        return $this->admin_priv_key !== null;
    }

    /**
     * Get 'admin_priv_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getAdminPrivKey()
    {
        return $this->admin_priv_key;
    }

    /**
     * Set 'admin_priv_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setAdminPrivKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->admin_priv_key = $value;
    }

    /**
     * Check if 'admin_pph' has a value
     *
     * @return bool
     */
    public function hasAdminPph()
    {
        return $this->admin_pph !== null;
    }

    /**
     * Get 'admin_pph' value
     *
     * @return string
     */
    public function getAdminPph()
    {
        return $this->admin_pph;
    }

    /**
     * Set 'admin_pph' value
     *
     * @param string $value
     */
    public function setAdminPph($value = null)
    {
        $this->admin_pph = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'pub_key' => null,
            'priv_key' => null,
            'sc' => null,
            'id' => null,
            'creation_time' => null,
            'admin_priv_key' => null,
            'admin_pph' => null
        ], $values);

        $message->setPubKey($values['pub_key']);
        $message->setPrivKey($values['priv_key']);
        $message->setSc($values['sc']);
        $message->setId($values['id']);
        $message->setCreationTime($values['creation_time']);
        $message->setAdminPrivKey($values['admin_priv_key']);
        $message->setAdminPph($values['admin_pph']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'pregenerated_key',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'pub_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'priv_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'sc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'creation_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'admin_priv_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'admin_pph',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->pub_key !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->pub_key);
        }

        if ($this->priv_key !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->priv_key);
        }

        if ($this->sc !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->sc);
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->id);
        }

        if ($this->creation_time !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->creation_time);
        }

        if ($this->admin_priv_key !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->admin_priv_key);
        }

        if ($this->admin_pph !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->admin_pph);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->pub_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->priv_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sc = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->id = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->creation_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->admin_priv_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->admin_pph = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->pub_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->pub_key);
        }

        if ($this->priv_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->priv_key);
        }

        if ($this->sc !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->sc);
        }

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->id);
        }

        if ($this->creation_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->creation_time);
        }

        if ($this->admin_priv_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->admin_priv_key);
        }

        if ($this->admin_pph !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->admin_pph);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->pub_key = null;
        $this->priv_key = null;
        $this->sc = null;
        $this->id = null;
        $this->creation_time = null;
        $this->admin_priv_key = null;
        $this->admin_pph = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\pregenerated_key) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->pub_key = ($message->pub_key !== null) ? $message->pub_key : $this->pub_key;
        $this->priv_key = ($message->priv_key !== null) ? $message->priv_key : $this->priv_key;
        $this->sc = ($message->sc !== null) ? $message->sc : $this->sc;
        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->creation_time = ($message->creation_time !== null) ? $message->creation_time : $this->creation_time;
        $this->admin_priv_key = ($message->admin_priv_key !== null) ? $message->admin_priv_key : $this->admin_priv_key;
        $this->admin_pph = ($message->admin_pph !== null) ? $message->admin_pph : $this->admin_pph;
    }


}


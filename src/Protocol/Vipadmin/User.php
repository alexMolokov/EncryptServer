<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : vipadmin.proto
 */


namespace EncryptServer\Protocol\Vipadmin;

/**
 * Protobuf message : EncryptServer.Protocol.Vipadmin.User
 */
class User extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * login required string = 1
     *
     * @var string
     */
    protected $login = null;

    /**
     * nickname optional string = 2
     *
     * @var string
     */
    protected $nickname = null;

    /**
     * last_login_time optional int32 = 3
     *
     * @var int
     */
    protected $last_login_time = null;

    /**
     * created optional int32 = 4
     *
     * @var int
     */
    protected $created = null;

    /**
     * blocked optional bool = 5
     *
     * @var bool
     */
    protected $blocked = null;

    /**
     * ba_blocked optional bool = 6
     *
     * @var bool
     */
    protected $ba_blocked = null;

    /**
     * initialized optional bool = 7
     *
     * @var bool
     */
    protected $initialized = null;

    /**
     * events_count optional int32 = 8
     *
     * @var int
     */
    protected $events_count = null;

    /**
     * file_size optional int64 = 9
     *
     * @var int
     */
    protected $file_size = null;

    /**
     * online_mode optional bool = 10
     *
     * @var bool
     */
    protected $online_mode = null;

    /**
     * balance optional float = 11
     *
     * @var float
     */
    protected $balance = null;

    /**
     * last_login_ip optional string = 12
     *
     * @var string
     */
    protected $last_login_ip = null;

    /**
     * tariff optional string = 13
     *
     * @var string
     */
    protected $tariff = null;

    /**
     * desired_login optional string = 14
     *
     * @var string
     */
    protected $desired_login = null;

    /**
     * email optional string = 15
     *
     * @var string
     */
    protected $email = null;

    /**
     * comments optional string = 16
     *
     * @var string
     */
    protected $comments = null;

    /**
     * tags repeated string = 17
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * user_pack_id optional string = 18
     *
     * @var string
     */
    protected $user_pack_id = null;

    /**
     * sip_registration optional bool = 19
     *
     * @var bool
     */
    protected $sip_registration = null;

    /**
     * sip_login optional string = 20
     *
     * @var string
     */
    protected $sip_login = null;

    /**
     * ba_balance_limit optional float = 21
     *
     * @var float
     */
    protected $ba_balance_limit = null;

    /**
     * ba_balance_used optional float = 22
     *
     * @var float
     */
    protected $ba_balance_used = null;

    /**
     * business_account optional string = 23
     *
     * @var string
     */
    protected $business_account = null;

    /**
     * name1 optional string = 24
     *
     * @var string
     */
    protected $name1 = null;

    /**
     * name2 optional string = 25
     *
     * @var string
     */
    protected $name2 = null;

    /**
     * name3 optional string = 26
     *
     * @var string
     */
    protected $name3 = null;

    /**
     * security_parameters optional message = 27
     *
     * @var \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    protected $security_parameters = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->ba_balance_limit = '-1';
        $this->ba_balance_used = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value)
    {
        $this->login = $value;
    }

    /**
     * Check if 'nickname' has a value
     *
     * @return bool
     */
    public function hasNickname()
    {
        return $this->nickname !== null;
    }

    /**
     * Get 'nickname' value
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set 'nickname' value
     *
     * @param string $value
     */
    public function setNickname($value = null)
    {
        $this->nickname = $value;
    }

    /**
     * Check if 'last_login_time' has a value
     *
     * @return bool
     */
    public function hasLastLoginTime()
    {
        return $this->last_login_time !== null;
    }

    /**
     * Get 'last_login_time' value
     *
     * @return int
     */
    public function getLastLoginTime()
    {
        return $this->last_login_time;
    }

    /**
     * Set 'last_login_time' value
     *
     * @param int $value
     */
    public function setLastLoginTime($value = null)
    {
        $this->last_login_time = $value;
    }

    /**
     * Check if 'created' has a value
     *
     * @return bool
     */
    public function hasCreated()
    {
        return $this->created !== null;
    }

    /**
     * Get 'created' value
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set 'created' value
     *
     * @param int $value
     */
    public function setCreated($value = null)
    {
        $this->created = $value;
    }

    /**
     * Check if 'blocked' has a value
     *
     * @return bool
     */
    public function hasBlocked()
    {
        return $this->blocked !== null;
    }

    /**
     * Get 'blocked' value
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->blocked;
    }

    /**
     * Set 'blocked' value
     *
     * @param bool $value
     */
    public function setBlocked($value = null)
    {
        $this->blocked = $value;
    }

    /**
     * Check if 'ba_blocked' has a value
     *
     * @return bool
     */
    public function hasBaBlocked()
    {
        return $this->ba_blocked !== null;
    }

    /**
     * Get 'ba_blocked' value
     *
     * @return bool
     */
    public function getBaBlocked()
    {
        return $this->ba_blocked;
    }

    /**
     * Set 'ba_blocked' value
     *
     * @param bool $value
     */
    public function setBaBlocked($value = null)
    {
        $this->ba_blocked = $value;
    }

    /**
     * Check if 'initialized' has a value
     *
     * @return bool
     */
    public function hasInitialized()
    {
        return $this->initialized !== null;
    }

    /**
     * Get 'initialized' value
     *
     * @return bool
     */
    public function getInitialized()
    {
        return $this->initialized;
    }

    /**
     * Set 'initialized' value
     *
     * @param bool $value
     */
    public function setInitialized($value = null)
    {
        $this->initialized = $value;
    }

    /**
     * Check if 'events_count' has a value
     *
     * @return bool
     */
    public function hasEventsCount()
    {
        return $this->events_count !== null;
    }

    /**
     * Get 'events_count' value
     *
     * @return int
     */
    public function getEventsCount()
    {
        return $this->events_count;
    }

    /**
     * Set 'events_count' value
     *
     * @param int $value
     */
    public function setEventsCount($value = null)
    {
        $this->events_count = $value;
    }

    /**
     * Check if 'file_size' has a value
     *
     * @return bool
     */
    public function hasFileSize()
    {
        return $this->file_size !== null;
    }

    /**
     * Get 'file_size' value
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->file_size;
    }

    /**
     * Set 'file_size' value
     *
     * @param int $value
     */
    public function setFileSize($value = null)
    {
        $this->file_size = $value;
    }

    /**
     * Check if 'online_mode' has a value
     *
     * @return bool
     */
    public function hasOnlineMode()
    {
        return $this->online_mode !== null;
    }

    /**
     * Get 'online_mode' value
     *
     * @return bool
     */
    public function getOnlineMode()
    {
        return $this->online_mode;
    }

    /**
     * Set 'online_mode' value
     *
     * @param bool $value
     */
    public function setOnlineMode($value = null)
    {
        $this->online_mode = $value;
    }

    /**
     * Check if 'balance' has a value
     *
     * @return bool
     */
    public function hasBalance()
    {
        return $this->balance !== null;
    }

    /**
     * Get 'balance' value
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * Set 'balance' value
     *
     * @param float $value
     */
    public function setBalance($value = null)
    {
        $this->balance = $value;
    }

    /**
     * Check if 'last_login_ip' has a value
     *
     * @return bool
     */
    public function hasLastLoginIp()
    {
        return $this->last_login_ip !== null;
    }

    /**
     * Get 'last_login_ip' value
     *
     * @return string
     */
    public function getLastLoginIp()
    {
        return $this->last_login_ip;
    }

    /**
     * Set 'last_login_ip' value
     *
     * @param string $value
     */
    public function setLastLoginIp($value = null)
    {
        $this->last_login_ip = $value;
    }

    /**
     * Check if 'tariff' has a value
     *
     * @return bool
     */
    public function hasTariff()
    {
        return $this->tariff !== null;
    }

    /**
     * Get 'tariff' value
     *
     * @return string
     */
    public function getTariff()
    {
        return $this->tariff;
    }

    /**
     * Set 'tariff' value
     *
     * @param string $value
     */
    public function setTariff($value = null)
    {
        $this->tariff = $value;
    }

    /**
     * Check if 'desired_login' has a value
     *
     * @return bool
     */
    public function hasDesiredLogin()
    {
        return $this->desired_login !== null;
    }

    /**
     * Get 'desired_login' value
     *
     * @return string
     */
    public function getDesiredLogin()
    {
        return $this->desired_login;
    }

    /**
     * Set 'desired_login' value
     *
     * @param string $value
     */
    public function setDesiredLogin($value = null)
    {
        $this->desired_login = $value;
    }

    /**
     * Check if 'email' has a value
     *
     * @return bool
     */
    public function hasEmail()
    {
        return $this->email !== null;
    }

    /**
     * Get 'email' value
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set 'email' value
     *
     * @param string $value
     */
    public function setEmail($value = null)
    {
        $this->email = $value;
    }

    /**
     * Check if 'comments' has a value
     *
     * @return bool
     */
    public function hasComments()
    {
        return $this->comments !== null;
    }

    /**
     * Get 'comments' value
     *
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Set 'comments' value
     *
     * @param string $value
     */
    public function setComments($value = null)
    {
        $this->comments = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'user_pack_id' has a value
     *
     * @return bool
     */
    public function hasUserPackId()
    {
        return $this->user_pack_id !== null;
    }

    /**
     * Get 'user_pack_id' value
     *
     * @return string
     */
    public function getUserPackId()
    {
        return $this->user_pack_id;
    }

    /**
     * Set 'user_pack_id' value
     *
     * @param string $value
     */
    public function setUserPackId($value = null)
    {
        $this->user_pack_id = $value;
    }

    /**
     * Check if 'sip_registration' has a value
     *
     * @return bool
     */
    public function hasSipRegistration()
    {
        return $this->sip_registration !== null;
    }

    /**
     * Get 'sip_registration' value
     *
     * @return bool
     */
    public function getSipRegistration()
    {
        return $this->sip_registration;
    }

    /**
     * Set 'sip_registration' value
     *
     * @param bool $value
     */
    public function setSipRegistration($value = null)
    {
        $this->sip_registration = $value;
    }

    /**
     * Check if 'sip_login' has a value
     *
     * @return bool
     */
    public function hasSipLogin()
    {
        return $this->sip_login !== null;
    }

    /**
     * Get 'sip_login' value
     *
     * @return string
     */
    public function getSipLogin()
    {
        return $this->sip_login;
    }

    /**
     * Set 'sip_login' value
     *
     * @param string $value
     */
    public function setSipLogin($value = null)
    {
        $this->sip_login = $value;
    }

    /**
     * Check if 'ba_balance_limit' has a value
     *
     * @return bool
     */
    public function hasBaBalanceLimit()
    {
        return $this->ba_balance_limit !== null;
    }

    /**
     * Get 'ba_balance_limit' value
     *
     * @return float
     */
    public function getBaBalanceLimit()
    {
        return $this->ba_balance_limit;
    }

    /**
     * Set 'ba_balance_limit' value
     *
     * @param float $value
     */
    public function setBaBalanceLimit($value = null)
    {
        $this->ba_balance_limit = $value;
    }

    /**
     * Check if 'ba_balance_used' has a value
     *
     * @return bool
     */
    public function hasBaBalanceUsed()
    {
        return $this->ba_balance_used !== null;
    }

    /**
     * Get 'ba_balance_used' value
     *
     * @return float
     */
    public function getBaBalanceUsed()
    {
        return $this->ba_balance_used;
    }

    /**
     * Set 'ba_balance_used' value
     *
     * @param float $value
     */
    public function setBaBalanceUsed($value = null)
    {
        $this->ba_balance_used = $value;
    }

    /**
     * Check if 'business_account' has a value
     *
     * @return bool
     */
    public function hasBusinessAccount()
    {
        return $this->business_account !== null;
    }

    /**
     * Get 'business_account' value
     *
     * @return string
     */
    public function getBusinessAccount()
    {
        return $this->business_account;
    }

    /**
     * Set 'business_account' value
     *
     * @param string $value
     */
    public function setBusinessAccount($value = null)
    {
        $this->business_account = $value;
    }

    /**
     * Check if 'name1' has a value
     *
     * @return bool
     */
    public function hasName1()
    {
        return $this->name1 !== null;
    }

    /**
     * Get 'name1' value
     *
     * @return string
     */
    public function getName1()
    {
        return $this->name1;
    }

    /**
     * Set 'name1' value
     *
     * @param string $value
     */
    public function setName1($value = null)
    {
        $this->name1 = $value;
    }

    /**
     * Check if 'name2' has a value
     *
     * @return bool
     */
    public function hasName2()
    {
        return $this->name2 !== null;
    }

    /**
     * Get 'name2' value
     *
     * @return string
     */
    public function getName2()
    {
        return $this->name2;
    }

    /**
     * Set 'name2' value
     *
     * @param string $value
     */
    public function setName2($value = null)
    {
        $this->name2 = $value;
    }

    /**
     * Check if 'name3' has a value
     *
     * @return bool
     */
    public function hasName3()
    {
        return $this->name3 !== null;
    }

    /**
     * Get 'name3' value
     *
     * @return string
     */
    public function getName3()
    {
        return $this->name3;
    }

    /**
     * Set 'name3' value
     *
     * @param string $value
     */
    public function setName3($value = null)
    {
        $this->name3 = $value;
    }

    /**
     * Check if 'security_parameters' has a value
     *
     * @return bool
     */
    public function hasSecurityParameters()
    {
        return $this->security_parameters !== null;
    }

    /**
     * Get 'security_parameters' value
     *
     * @return \EncryptServer\Protocol\Vipadmin\SecurityTemplate
     */
    public function getSecurityParameters()
    {
        return $this->security_parameters;
    }

    /**
     * Set 'security_parameters' value
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityTemplate $value
     */
    public function setSecurityParameters(\EncryptServer\Protocol\Vipadmin\SecurityTemplate $value = null)
    {
        $this->security_parameters = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['login'])) {
            throw new \InvalidArgumentException('Field "login" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'nickname' => null,
            'last_login_time' => null,
            'created' => null,
            'blocked' => null,
            'ba_blocked' => null,
            'initialized' => null,
            'events_count' => null,
            'file_size' => null,
            'online_mode' => null,
            'balance' => null,
            'last_login_ip' => null,
            'tariff' => null,
            'desired_login' => null,
            'email' => null,
            'comments' => null,
            'tags' => [],
            'user_pack_id' => null,
            'sip_registration' => null,
            'sip_login' => null,
            'ba_balance_limit' => '-1',
            'ba_balance_used' => '0',
            'business_account' => null,
            'name1' => null,
            'name2' => null,
            'name3' => null,
            'security_parameters' => null
        ], $values);

        $message->setLogin($values['login']);
        $message->setNickname($values['nickname']);
        $message->setLastLoginTime($values['last_login_time']);
        $message->setCreated($values['created']);
        $message->setBlocked($values['blocked']);
        $message->setBaBlocked($values['ba_blocked']);
        $message->setInitialized($values['initialized']);
        $message->setEventsCount($values['events_count']);
        $message->setFileSize($values['file_size']);
        $message->setOnlineMode($values['online_mode']);
        $message->setBalance($values['balance']);
        $message->setLastLoginIp($values['last_login_ip']);
        $message->setTariff($values['tariff']);
        $message->setDesiredLogin($values['desired_login']);
        $message->setEmail($values['email']);
        $message->setComments($values['comments']);
        $message->setUserPackId($values['user_pack_id']);
        $message->setSipRegistration($values['sip_registration']);
        $message->setSipLogin($values['sip_login']);
        $message->setBaBalanceLimit($values['ba_balance_limit']);
        $message->setBaBalanceUsed($values['ba_balance_used']);
        $message->setBusinessAccount($values['business_account']);
        $message->setName1($values['name1']);
        $message->setName2($values['name2']);
        $message->setName3($values['name3']);
        $message->setSecurityParameters($values['security_parameters']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'User',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'nickname',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'last_login_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'created',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'blocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ba_blocked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'initialized',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'events_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'file_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'online_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'balance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'last_login_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'tariff',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'desired_login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'comments',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'user_pack_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'sip_registration',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'sip_login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'ba_balance_limit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '-1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'ba_balance_used',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'business_account',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'name1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'name2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'name3',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'security_parameters',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.EncryptServer.Protocol.Vipadmin.SecurityTemplate'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->login === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Vipadmin\\User#login" (tag 1) is required but has no value.');
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->login);
        }

        if ($this->nickname !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->nickname);
        }

        if ($this->last_login_time !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->last_login_time);
        }

        if ($this->created !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->created);
        }

        if ($this->blocked !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->blocked);
        }

        if ($this->ba_blocked !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->ba_blocked);
        }

        if ($this->initialized !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->initialized);
        }

        if ($this->events_count !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->events_count);
        }

        if ($this->file_size !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->file_size);
        }

        if ($this->online_mode !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->online_mode);
        }

        if ($this->balance !== null) {
            $writer->writeVarint($stream, 93);
            $writer->writeFloat($stream, $this->balance);
        }

        if ($this->last_login_ip !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->last_login_ip);
        }

        if ($this->tariff !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->tariff);
        }

        if ($this->desired_login !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->desired_login);
        }

        if ($this->email !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->email);
        }

        if ($this->comments !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->comments);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 138);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->user_pack_id !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->user_pack_id);
        }

        if ($this->sip_registration !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->sip_registration);
        }

        if ($this->sip_login !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->sip_login);
        }

        if ($this->ba_balance_limit !== null) {
            $writer->writeVarint($stream, 173);
            $writer->writeFloat($stream, $this->ba_balance_limit);
        }

        if ($this->ba_balance_used !== null) {
            $writer->writeVarint($stream, 181);
            $writer->writeFloat($stream, $this->ba_balance_used);
        }

        if ($this->business_account !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeString($stream, $this->business_account);
        }

        if ($this->name1 !== null) {
            $writer->writeVarint($stream, 194);
            $writer->writeString($stream, $this->name1);
        }

        if ($this->name2 !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeString($stream, $this->name2);
        }

        if ($this->name3 !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeString($stream, $this->name3);
        }

        if ($this->security_parameters !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeVarint($stream, $this->security_parameters->serializedSize($sizeContext));
            $this->security_parameters->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->nickname = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->last_login_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->created = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ba_blocked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->initialized = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->events_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->file_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->online_mode = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->balance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->last_login_ip = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->tariff = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->desired_login = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->comments = $reader->readString($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->user_pack_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sip_registration = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sip_login = $reader->readString($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->ba_balance_limit = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->ba_balance_used = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->business_account = $reader->readString($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name1 = $reader->readString($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name2 = $reader->readString($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name3 = $reader->readString($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityTemplate();

                $this->security_parameters = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->nickname !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->nickname);
        }

        if ($this->last_login_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->last_login_time);
        }

        if ($this->created !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->created);
        }

        if ($this->blocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ba_blocked !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->initialized !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->events_count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->events_count);
        }

        if ($this->file_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->file_size);
        }

        if ($this->online_mode !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->balance !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->last_login_ip !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->last_login_ip);
        }

        if ($this->tariff !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->tariff);
        }

        if ($this->desired_login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->desired_login);
        }

        if ($this->email !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email);
        }

        if ($this->comments !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->comments);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 2;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->user_pack_id !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->user_pack_id);
        }

        if ($this->sip_registration !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sip_login !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->sip_login);
        }

        if ($this->ba_balance_limit !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->ba_balance_used !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->business_account !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->business_account);
        }

        if ($this->name1 !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->name1);
        }

        if ($this->name2 !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->name2);
        }

        if ($this->name3 !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->name3);
        }

        if ($this->security_parameters !== null) {
            $innerSize = $this->security_parameters->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->login = null;
        $this->nickname = null;
        $this->last_login_time = null;
        $this->created = null;
        $this->blocked = null;
        $this->ba_blocked = null;
        $this->initialized = null;
        $this->events_count = null;
        $this->file_size = null;
        $this->online_mode = null;
        $this->balance = null;
        $this->last_login_ip = null;
        $this->tariff = null;
        $this->desired_login = null;
        $this->email = null;
        $this->comments = null;
        $this->tags = null;
        $this->user_pack_id = null;
        $this->sip_registration = null;
        $this->sip_login = null;
        $this->ba_balance_limit = '-1';
        $this->ba_balance_used = '0';
        $this->business_account = null;
        $this->name1 = null;
        $this->name2 = null;
        $this->name3 = null;
        $this->security_parameters = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Vipadmin\User) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->nickname = ($message->nickname !== null) ? $message->nickname : $this->nickname;
        $this->last_login_time = ($message->last_login_time !== null) ? $message->last_login_time : $this->last_login_time;
        $this->created = ($message->created !== null) ? $message->created : $this->created;
        $this->blocked = ($message->blocked !== null) ? $message->blocked : $this->blocked;
        $this->ba_blocked = ($message->ba_blocked !== null) ? $message->ba_blocked : $this->ba_blocked;
        $this->initialized = ($message->initialized !== null) ? $message->initialized : $this->initialized;
        $this->events_count = ($message->events_count !== null) ? $message->events_count : $this->events_count;
        $this->file_size = ($message->file_size !== null) ? $message->file_size : $this->file_size;
        $this->online_mode = ($message->online_mode !== null) ? $message->online_mode : $this->online_mode;
        $this->balance = ($message->balance !== null) ? $message->balance : $this->balance;
        $this->last_login_ip = ($message->last_login_ip !== null) ? $message->last_login_ip : $this->last_login_ip;
        $this->tariff = ($message->tariff !== null) ? $message->tariff : $this->tariff;
        $this->desired_login = ($message->desired_login !== null) ? $message->desired_login : $this->desired_login;
        $this->email = ($message->email !== null) ? $message->email : $this->email;
        $this->comments = ($message->comments !== null) ? $message->comments : $this->comments;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->user_pack_id = ($message->user_pack_id !== null) ? $message->user_pack_id : $this->user_pack_id;
        $this->sip_registration = ($message->sip_registration !== null) ? $message->sip_registration : $this->sip_registration;
        $this->sip_login = ($message->sip_login !== null) ? $message->sip_login : $this->sip_login;
        $this->ba_balance_limit = ($message->ba_balance_limit !== null) ? $message->ba_balance_limit : $this->ba_balance_limit;
        $this->ba_balance_used = ($message->ba_balance_used !== null) ? $message->ba_balance_used : $this->ba_balance_used;
        $this->business_account = ($message->business_account !== null) ? $message->business_account : $this->business_account;
        $this->name1 = ($message->name1 !== null) ? $message->name1 : $this->name1;
        $this->name2 = ($message->name2 !== null) ? $message->name2 : $this->name2;
        $this->name3 = ($message->name3 !== null) ? $message->name3 : $this->name3;
        $this->security_parameters = ($message->security_parameters !== null) ? $message->security_parameters : $this->security_parameters;
    }


}


<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : global.proto
 */


namespace EncryptServer\Protocol;

/**
 * Protobuf message : EncryptServer.command.User
 */
class User extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * login required string = 1
     *
     * @var string
     */
    protected $login = null;

    /**
     * domain required string = 2
     *
     * @var string
     */
    protected $domain = null;

    /**
     * protocol optional string = 3
     *
     * @var string
     */
    protected $protocol = null;

    /**
     * path optional string = 4
     *
     * @var string
     */
    protected $path = null;

    /**
     * session_id optional string = 5
     *
     * @var string
     */
    protected $session_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->protocol = 'vipole';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'login' has a value
     *
     * @return bool
     */
    public function hasLogin()
    {
        return $this->login !== null;
    }

    /**
     * Get 'login' value
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Set 'login' value
     *
     * @param string $value
     */
    public function setLogin($value)
    {
        $this->login = $value;
    }

    /**
     * Check if 'domain' has a value
     *
     * @return bool
     */
    public function hasDomain()
    {
        return $this->domain !== null;
    }

    /**
     * Get 'domain' value
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * Set 'domain' value
     *
     * @param string $value
     */
    public function setDomain($value)
    {
        $this->domain = $value;
    }

    /**
     * Check if 'protocol' has a value
     *
     * @return bool
     */
    public function hasProtocol()
    {
        return $this->protocol !== null;
    }

    /**
     * Get 'protocol' value
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->protocol;
    }

    /**
     * Set 'protocol' value
     *
     * @param string $value
     */
    public function setProtocol($value = null)
    {
        $this->protocol = $value;
    }

    /**
     * Check if 'path' has a value
     *
     * @return bool
     */
    public function hasPath()
    {
        return $this->path !== null;
    }

    /**
     * Get 'path' value
     *
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Set 'path' value
     *
     * @param string $value
     */
    public function setPath($value = null)
    {
        $this->path = $value;
    }

    /**
     * Check if 'session_id' has a value
     *
     * @return bool
     */
    public function hasSessionId()
    {
        return $this->session_id !== null;
    }

    /**
     * Get 'session_id' value
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->session_id;
    }

    /**
     * Set 'session_id' value
     *
     * @param string $value
     */
    public function setSessionId($value = null)
    {
        $this->session_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['login'])) {
            throw new \InvalidArgumentException('Field "login" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['domain'])) {
            throw new \InvalidArgumentException('Field "domain" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'protocol' => 'vipole',
            'path' => null,
            'session_id' => null
        ], $values);

        $message->setLogin($values['login']);
        $message->setDomain($values['domain']);
        $message->setProtocol($values['protocol']);
        $message->setPath($values['path']);
        $message->setSessionId($values['session_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'User',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'login',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'domain',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'protocol',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => 'vipole'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'path',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'session_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->login === null) {
            throw new \UnexpectedValueException('Field "\\Cybrus\\Protocol\\User#login" (tag 1) is required but has no value.');
        }

        if ($this->domain === null) {
            throw new \UnexpectedValueException('Field "\\Cybrus\\Protocol\\User#domain" (tag 2) is required but has no value.');
        }

        if ($this->login !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->login);
        }

        if ($this->domain !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->domain);
        }

        if ($this->protocol !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->protocol);
        }

        if ($this->path !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->path);
        }

        if ($this->session_id !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->session_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->domain = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->protocol = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->path = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->session_id = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->login !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->login);
        }

        if ($this->domain !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->domain);
        }

        if ($this->protocol !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->protocol);
        }

        if ($this->path !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->path);
        }

        if ($this->session_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->session_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->login = null;
        $this->domain = null;
        $this->protocol = 'vipole';
        $this->path = null;
        $this->session_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Cybrus\Protocol\User) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->login = ($message->login !== null) ? $message->login : $this->login;
        $this->domain = ($message->domain !== null) ? $message->domain : $this->domain;
        $this->protocol = ($message->protocol !== null) ? $message->protocol : $this->protocol;
        $this->path = ($message->path !== null) ? $message->path : $this->path;
        $this->session_id = ($message->session_id !== null) ? $message->session_id : $this->session_id;
    }


}


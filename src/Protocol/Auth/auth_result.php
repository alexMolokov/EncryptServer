<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : auth.proto
 */


namespace EncryptServer\Protocol\Auth;

/**
 * Protobuf message : encryptserver.auth_result
 */
class auth_result extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * result required enum = 1
     *
     * @var \EncryptServer\Protocol\Auth\auth_result\Result
     */
    protected $result = null;

    /**
     * session_id optional string = 2
     *
     * @var string
     */
    protected $session_id = null;

    /**
     * uri optional string = 3
     *
     * @var string
     */
    protected $uri = null;

    /**
     * port optional uint32 = 4
     *
     * @var int
     */
    protected $port = null;

    /**
     * server_time optional uint32 = 5
     *
     * @var int
     */
    protected $server_time = null;

    /**
     * server_time_utc optional uint32 = 6
     *
     * @var int
     */
    protected $server_time_utc = null;

    /**
     * ba_id optional string = 7
     *
     * @var string
     */
    protected $ba_id = null;

    /**
     * online_mode optional bool = 8
     *
     * @var bool
     */
    protected $online_mode = null;

    /**
     * online_mode_key optional string = 9
     *
     * @var string
     */
    protected $online_mode_key = null;

    /**
     * change_keys_forbidden optional bool = 10
     *
     * @var bool
     */
    protected $change_keys_forbidden = null;

    /**
     * can_change_settings optional bool = 11
     *
     * @var bool
     */
    protected $can_change_settings = null;

    /**
     * enable_inactivity_logout optional bool = 12
     *
     * @var bool
     */
    protected $enable_inactivity_logout = null;

    /**
     * enable_offline_logout optional bool = 13
     *
     * @var bool
     */
    protected $enable_offline_logout = null;

    /**
     * inactivity_logout_period optional int32 = 14
     *
     * @var int
     */
    protected $inactivity_logout_period = null;

    /**
     * offline_logout_period optional int32 = 15
     *
     * @var int
     */
    protected $offline_logout_period = null;

    /**
     * unlock_code_type optional int32 = 16
     *
     * @var int
     */
    protected $unlock_code_type = null;

    /**
     * unlock_fast_code optional string = 17
     *
     * @var string
     */
    protected $unlock_fast_code = null;

    /**
     * lock_inactivity_enable optional bool = 18
     *
     * @var bool
     */
    protected $lock_inactivity_enable = null;

    /**
     * lock_inactivity_period optional int32 = 19
     *
     * @var int
     */
    protected $lock_inactivity_period = null;

    /**
     * lock_unmount_vfs optional bool = 20
     *
     * @var bool
     */
    protected $lock_unmount_vfs = null;

    /**
     * block_reason optional int32 = 21
     *
     * @var int
     */
    protected $block_reason = null;

    /**
     * phone_enabled optional bool = 22
     *
     * @var bool
     */
    protected $phone_enabled = null;

    /**
     * permissions repeated message = 23
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    protected $permissions = null;

    /**
     * max_file_size optional int64 = 24
     *
     * @var int
     */
    protected $max_file_size = null;

    /**
     * sms_code_enabled optional bool = 25
     *
     * @var bool
     */
    protected $sms_code_enabled = null;

    /**
     * sms_code_mode optional bool = 26
     *
     * @var bool
     */
    protected $sms_code_mode = null;

    /**
     * sms_code_valid_period optional int32 = 27
     *
     * @var int
     */
    protected $sms_code_valid_period = null;

    /**
     * ba_pack_id optional string = 28
     *
     * @var string
     */
    protected $ba_pack_id = null;

    /**
     * security_fields repeated message = 29
     *
     * @var \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    protected $security_fields = null;

    /**
     * admin_account optional bool = 30
     *
     * @var bool
     */
    protected $admin_account = null;

    /**
     * need_plaintext_password optional bool = 31
     *
     * @var bool
     */
    protected $need_plaintext_password = null;

    /**
     * secret_phrase_mode optional int32 = 32
     *
     * @var int
     */
    protected $secret_phrase_mode = null;

    /**
     * account_keys_state optional int32 = 33
     *
     * @var int
     */
    protected $account_keys_state = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->can_change_settings = true;
        $this->enable_inactivity_logout = false;
        $this->enable_offline_logout = false;
        $this->inactivity_logout_period = '30';
        $this->offline_logout_period = '30';
        $this->unlock_code_type = '0';
        $this->lock_inactivity_enable = false;
        $this->lock_inactivity_period = '30';
        $this->lock_unmount_vfs = false;
        $this->sms_code_enabled = false;
        $this->sms_code_mode = false;
        $this->sms_code_valid_period = '300';
        $this->admin_account = true;
        $this->need_plaintext_password = false;
        $this->secret_phrase_mode = '0';
        $this->account_keys_state = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'result' has a value
     *
     * @return bool
     */
    public function hasResult()
    {
        return $this->result !== null;
    }

    /**
     * Get 'result' value
     *
     * @return \EncryptServer\Protocol\Auth\auth_result\Result
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Set 'result' value
     *
     * @param \EncryptServer\Protocol\Auth\auth_result\Result $value
     */
    public function setResult(\EncryptServer\Protocol\Auth\auth_result\Result $value)
    {
        $this->result = $value;
    }

    /**
     * Check if 'session_id' has a value
     *
     * @return bool
     */
    public function hasSessionId()
    {
        return $this->session_id !== null;
    }

    /**
     * Get 'session_id' value
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->session_id;
    }

    /**
     * Set 'session_id' value
     *
     * @param string $value
     */
    public function setSessionId($value = null)
    {
        $this->session_id = $value;
    }

    /**
     * Check if 'uri' has a value
     *
     * @return bool
     */
    public function hasUri()
    {
        return $this->uri !== null;
    }

    /**
     * Get 'uri' value
     *
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Set 'uri' value
     *
     * @param string $value
     */
    public function setUri($value = null)
    {
        $this->uri = $value;
    }

    /**
     * Check if 'port' has a value
     *
     * @return bool
     */
    public function hasPort()
    {
        return $this->port !== null;
    }

    /**
     * Get 'port' value
     *
     * @return int
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * Set 'port' value
     *
     * @param int $value
     */
    public function setPort($value = null)
    {
        $this->port = $value;
    }

    /**
     * Check if 'server_time' has a value
     *
     * @return bool
     */
    public function hasServerTime()
    {
        return $this->server_time !== null;
    }

    /**
     * Get 'server_time' value
     *
     * @return int
     */
    public function getServerTime()
    {
        return $this->server_time;
    }

    /**
     * Set 'server_time' value
     *
     * @param int $value
     */
    public function setServerTime($value = null)
    {
        $this->server_time = $value;
    }

    /**
     * Check if 'server_time_utc' has a value
     *
     * @return bool
     */
    public function hasServerTimeUtc()
    {
        return $this->server_time_utc !== null;
    }

    /**
     * Get 'server_time_utc' value
     *
     * @return int
     */
    public function getServerTimeUtc()
    {
        return $this->server_time_utc;
    }

    /**
     * Set 'server_time_utc' value
     *
     * @param int $value
     */
    public function setServerTimeUtc($value = null)
    {
        $this->server_time_utc = $value;
    }

    /**
     * Check if 'ba_id' has a value
     *
     * @return bool
     */
    public function hasBaId()
    {
        return $this->ba_id !== null;
    }

    /**
     * Get 'ba_id' value
     *
     * @return string
     */
    public function getBaId()
    {
        return $this->ba_id;
    }

    /**
     * Set 'ba_id' value
     *
     * @param string $value
     */
    public function setBaId($value = null)
    {
        $this->ba_id = $value;
    }

    /**
     * Check if 'online_mode' has a value
     *
     * @return bool
     */
    public function hasOnlineMode()
    {
        return $this->online_mode !== null;
    }

    /**
     * Get 'online_mode' value
     *
     * @return bool
     */
    public function getOnlineMode()
    {
        return $this->online_mode;
    }

    /**
     * Set 'online_mode' value
     *
     * @param bool $value
     */
    public function setOnlineMode($value = null)
    {
        $this->online_mode = $value;
    }

    /**
     * Check if 'online_mode_key' has a value
     *
     * @return bool
     */
    public function hasOnlineModeKey()
    {
        return $this->online_mode_key !== null;
    }

    /**
     * Get 'online_mode_key' value
     *
     * @return string
     */
    public function getOnlineModeKey()
    {
        return $this->online_mode_key;
    }

    /**
     * Set 'online_mode_key' value
     *
     * @param string $value
     */
    public function setOnlineModeKey($value = null)
    {
        $this->online_mode_key = $value;
    }

    /**
     * Check if 'change_keys_forbidden' has a value
     *
     * @return bool
     */
    public function hasChangeKeysForbidden()
    {
        return $this->change_keys_forbidden !== null;
    }

    /**
     * Get 'change_keys_forbidden' value
     *
     * @return bool
     */
    public function getChangeKeysForbidden()
    {
        return $this->change_keys_forbidden;
    }

    /**
     * Set 'change_keys_forbidden' value
     *
     * @param bool $value
     */
    public function setChangeKeysForbidden($value = null)
    {
        $this->change_keys_forbidden = $value;
    }

    /**
     * Check if 'can_change_settings' has a value
     *
     * @return bool
     */
    public function hasCanChangeSettings()
    {
        return $this->can_change_settings !== null;
    }

    /**
     * Get 'can_change_settings' value
     *
     * @return bool
     */
    public function getCanChangeSettings()
    {
        return $this->can_change_settings;
    }

    /**
     * Set 'can_change_settings' value
     *
     * @param bool $value
     */
    public function setCanChangeSettings($value = null)
    {
        $this->can_change_settings = $value;
    }

    /**
     * Check if 'enable_inactivity_logout' has a value
     *
     * @return bool
     */
    public function hasEnableInactivityLogout()
    {
        return $this->enable_inactivity_logout !== null;
    }

    /**
     * Get 'enable_inactivity_logout' value
     *
     * @return bool
     */
    public function getEnableInactivityLogout()
    {
        return $this->enable_inactivity_logout;
    }

    /**
     * Set 'enable_inactivity_logout' value
     *
     * @param bool $value
     */
    public function setEnableInactivityLogout($value = null)
    {
        $this->enable_inactivity_logout = $value;
    }

    /**
     * Check if 'enable_offline_logout' has a value
     *
     * @return bool
     */
    public function hasEnableOfflineLogout()
    {
        return $this->enable_offline_logout !== null;
    }

    /**
     * Get 'enable_offline_logout' value
     *
     * @return bool
     */
    public function getEnableOfflineLogout()
    {
        return $this->enable_offline_logout;
    }

    /**
     * Set 'enable_offline_logout' value
     *
     * @param bool $value
     */
    public function setEnableOfflineLogout($value = null)
    {
        $this->enable_offline_logout = $value;
    }

    /**
     * Check if 'inactivity_logout_period' has a value
     *
     * @return bool
     */
    public function hasInactivityLogoutPeriod()
    {
        return $this->inactivity_logout_period !== null;
    }

    /**
     * Get 'inactivity_logout_period' value
     *
     * @return int
     */
    public function getInactivityLogoutPeriod()
    {
        return $this->inactivity_logout_period;
    }

    /**
     * Set 'inactivity_logout_period' value
     *
     * @param int $value
     */
    public function setInactivityLogoutPeriod($value = null)
    {
        $this->inactivity_logout_period = $value;
    }

    /**
     * Check if 'offline_logout_period' has a value
     *
     * @return bool
     */
    public function hasOfflineLogoutPeriod()
    {
        return $this->offline_logout_period !== null;
    }

    /**
     * Get 'offline_logout_period' value
     *
     * @return int
     */
    public function getOfflineLogoutPeriod()
    {
        return $this->offline_logout_period;
    }

    /**
     * Set 'offline_logout_period' value
     *
     * @param int $value
     */
    public function setOfflineLogoutPeriod($value = null)
    {
        $this->offline_logout_period = $value;
    }

    /**
     * Check if 'unlock_code_type' has a value
     *
     * @return bool
     */
    public function hasUnlockCodeType()
    {
        return $this->unlock_code_type !== null;
    }

    /**
     * Get 'unlock_code_type' value
     *
     * @return int
     */
    public function getUnlockCodeType()
    {
        return $this->unlock_code_type;
    }

    /**
     * Set 'unlock_code_type' value
     *
     * @param int $value
     */
    public function setUnlockCodeType($value = null)
    {
        $this->unlock_code_type = $value;
    }

    /**
     * Check if 'unlock_fast_code' has a value
     *
     * @return bool
     */
    public function hasUnlockFastCode()
    {
        return $this->unlock_fast_code !== null;
    }

    /**
     * Get 'unlock_fast_code' value
     *
     * @return string
     */
    public function getUnlockFastCode()
    {
        return $this->unlock_fast_code;
    }

    /**
     * Set 'unlock_fast_code' value
     *
     * @param string $value
     */
    public function setUnlockFastCode($value = null)
    {
        $this->unlock_fast_code = $value;
    }

    /**
     * Check if 'lock_inactivity_enable' has a value
     *
     * @return bool
     */
    public function hasLockInactivityEnable()
    {
        return $this->lock_inactivity_enable !== null;
    }

    /**
     * Get 'lock_inactivity_enable' value
     *
     * @return bool
     */
    public function getLockInactivityEnable()
    {
        return $this->lock_inactivity_enable;
    }

    /**
     * Set 'lock_inactivity_enable' value
     *
     * @param bool $value
     */
    public function setLockInactivityEnable($value = null)
    {
        $this->lock_inactivity_enable = $value;
    }

    /**
     * Check if 'lock_inactivity_period' has a value
     *
     * @return bool
     */
    public function hasLockInactivityPeriod()
    {
        return $this->lock_inactivity_period !== null;
    }

    /**
     * Get 'lock_inactivity_period' value
     *
     * @return int
     */
    public function getLockInactivityPeriod()
    {
        return $this->lock_inactivity_period;
    }

    /**
     * Set 'lock_inactivity_period' value
     *
     * @param int $value
     */
    public function setLockInactivityPeriod($value = null)
    {
        $this->lock_inactivity_period = $value;
    }

    /**
     * Check if 'lock_unmount_vfs' has a value
     *
     * @return bool
     */
    public function hasLockUnmountVfs()
    {
        return $this->lock_unmount_vfs !== null;
    }

    /**
     * Get 'lock_unmount_vfs' value
     *
     * @return bool
     */
    public function getLockUnmountVfs()
    {
        return $this->lock_unmount_vfs;
    }

    /**
     * Set 'lock_unmount_vfs' value
     *
     * @param bool $value
     */
    public function setLockUnmountVfs($value = null)
    {
        $this->lock_unmount_vfs = $value;
    }

    /**
     * Check if 'block_reason' has a value
     *
     * @return bool
     */
    public function hasBlockReason()
    {
        return $this->block_reason !== null;
    }

    /**
     * Get 'block_reason' value
     *
     * @return int
     */
    public function getBlockReason()
    {
        return $this->block_reason;
    }

    /**
     * Set 'block_reason' value
     *
     * @param int $value
     */
    public function setBlockReason($value = null)
    {
        $this->block_reason = $value;
    }

    /**
     * Check if 'phone_enabled' has a value
     *
     * @return bool
     */
    public function hasPhoneEnabled()
    {
        return $this->phone_enabled !== null;
    }

    /**
     * Get 'phone_enabled' value
     *
     * @return bool
     */
    public function getPhoneEnabled()
    {
        return $this->phone_enabled;
    }

    /**
     * Set 'phone_enabled' value
     *
     * @param bool $value
     */
    public function setPhoneEnabled($value = null)
    {
        $this->phone_enabled = $value;
    }

    /**
     * Check if 'permissions' has a value
     *
     * @return bool
     */
    public function hasPermissionsList()
    {
        return $this->permissions !== null;
    }

    /**
     * Get 'permissions' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    public function getPermissionsList()
    {
        return $this->permissions;
    }

    /**
     * Set 'permissions' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField> $value
     */
    public function setPermissionsList(\Protobuf\Collection $value = null)
    {
        $this->permissions = $value;
    }

    /**
     * Add a new element to 'permissions'
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityField $value
     */
    public function addPermissions(\EncryptServer\Protocol\Vipadmin\SecurityField $value)
    {
        if ($this->permissions === null) {
            $this->permissions = new \Protobuf\MessageCollection();
        }

        $this->permissions->add($value);
    }

    /**
     * Check if 'max_file_size' has a value
     *
     * @return bool
     */
    public function hasMaxFileSize()
    {
        return $this->max_file_size !== null;
    }

    /**
     * Get 'max_file_size' value
     *
     * @return int
     */
    public function getMaxFileSize()
    {
        return $this->max_file_size;
    }

    /**
     * Set 'max_file_size' value
     *
     * @param int $value
     */
    public function setMaxFileSize($value = null)
    {
        $this->max_file_size = $value;
    }

    /**
     * Check if 'sms_code_enabled' has a value
     *
     * @return bool
     */
    public function hasSmsCodeEnabled()
    {
        return $this->sms_code_enabled !== null;
    }

    /**
     * Get 'sms_code_enabled' value
     *
     * @return bool
     */
    public function getSmsCodeEnabled()
    {
        return $this->sms_code_enabled;
    }

    /**
     * Set 'sms_code_enabled' value
     *
     * @param bool $value
     */
    public function setSmsCodeEnabled($value = null)
    {
        $this->sms_code_enabled = $value;
    }

    /**
     * Check if 'sms_code_mode' has a value
     *
     * @return bool
     */
    public function hasSmsCodeMode()
    {
        return $this->sms_code_mode !== null;
    }

    /**
     * Get 'sms_code_mode' value
     *
     * @return bool
     */
    public function getSmsCodeMode()
    {
        return $this->sms_code_mode;
    }

    /**
     * Set 'sms_code_mode' value
     *
     * @param bool $value
     */
    public function setSmsCodeMode($value = null)
    {
        $this->sms_code_mode = $value;
    }

    /**
     * Check if 'sms_code_valid_period' has a value
     *
     * @return bool
     */
    public function hasSmsCodeValidPeriod()
    {
        return $this->sms_code_valid_period !== null;
    }

    /**
     * Get 'sms_code_valid_period' value
     *
     * @return int
     */
    public function getSmsCodeValidPeriod()
    {
        return $this->sms_code_valid_period;
    }

    /**
     * Set 'sms_code_valid_period' value
     *
     * @param int $value
     */
    public function setSmsCodeValidPeriod($value = null)
    {
        $this->sms_code_valid_period = $value;
    }

    /**
     * Check if 'ba_pack_id' has a value
     *
     * @return bool
     */
    public function hasBaPackId()
    {
        return $this->ba_pack_id !== null;
    }

    /**
     * Get 'ba_pack_id' value
     *
     * @return string
     */
    public function getBaPackId()
    {
        return $this->ba_pack_id;
    }

    /**
     * Set 'ba_pack_id' value
     *
     * @param string $value
     */
    public function setBaPackId($value = null)
    {
        $this->ba_pack_id = $value;
    }

    /**
     * Check if 'security_fields' has a value
     *
     * @return bool
     */
    public function hasSecurityFieldsList()
    {
        return $this->security_fields !== null;
    }

    /**
     * Get 'security_fields' value
     *
     * @return \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField>
     */
    public function getSecurityFieldsList()
    {
        return $this->security_fields;
    }

    /**
     * Set 'security_fields' value
     *
     * @param \Protobuf\Collection<\EncryptServer\Protocol\Vipadmin\SecurityField> $value
     */
    public function setSecurityFieldsList(\Protobuf\Collection $value = null)
    {
        $this->security_fields = $value;
    }

    /**
     * Add a new element to 'security_fields'
     *
     * @param \EncryptServer\Protocol\Vipadmin\SecurityField $value
     */
    public function addSecurityFields(\EncryptServer\Protocol\Vipadmin\SecurityField $value)
    {
        if ($this->security_fields === null) {
            $this->security_fields = new \Protobuf\MessageCollection();
        }

        $this->security_fields->add($value);
    }

    /**
     * Check if 'admin_account' has a value
     *
     * @return bool
     */
    public function hasAdminAccount()
    {
        return $this->admin_account !== null;
    }

    /**
     * Get 'admin_account' value
     *
     * @return bool
     */
    public function getAdminAccount()
    {
        return $this->admin_account;
    }

    /**
     * Set 'admin_account' value
     *
     * @param bool $value
     */
    public function setAdminAccount($value = null)
    {
        $this->admin_account = $value;
    }

    /**
     * Check if 'need_plaintext_password' has a value
     *
     * @return bool
     */
    public function hasNeedPlaintextPassword()
    {
        return $this->need_plaintext_password !== null;
    }

    /**
     * Get 'need_plaintext_password' value
     *
     * @return bool
     */
    public function getNeedPlaintextPassword()
    {
        return $this->need_plaintext_password;
    }

    /**
     * Set 'need_plaintext_password' value
     *
     * @param bool $value
     */
    public function setNeedPlaintextPassword($value = null)
    {
        $this->need_plaintext_password = $value;
    }

    /**
     * Check if 'secret_phrase_mode' has a value
     *
     * @return bool
     */
    public function hasSecretPhraseMode()
    {
        return $this->secret_phrase_mode !== null;
    }

    /**
     * Get 'secret_phrase_mode' value
     *
     * @return int
     */
    public function getSecretPhraseMode()
    {
        return $this->secret_phrase_mode;
    }

    /**
     * Set 'secret_phrase_mode' value
     *
     * @param int $value
     */
    public function setSecretPhraseMode($value = null)
    {
        $this->secret_phrase_mode = $value;
    }

    /**
     * Check if 'account_keys_state' has a value
     *
     * @return bool
     */
    public function hasAccountKeysState()
    {
        return $this->account_keys_state !== null;
    }

    /**
     * Get 'account_keys_state' value
     *
     * @return int
     */
    public function getAccountKeysState()
    {
        return $this->account_keys_state;
    }

    /**
     * Set 'account_keys_state' value
     *
     * @param int $value
     */
    public function setAccountKeysState($value = null)
    {
        $this->account_keys_state = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['result'])) {
            throw new \InvalidArgumentException('Field "result" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'session_id' => null,
            'uri' => null,
            'port' => null,
            'server_time' => null,
            'server_time_utc' => null,
            'ba_id' => null,
            'online_mode' => null,
            'online_mode_key' => null,
            'change_keys_forbidden' => null,
            'can_change_settings' => true,
            'enable_inactivity_logout' => false,
            'enable_offline_logout' => false,
            'inactivity_logout_period' => '30',
            'offline_logout_period' => '30',
            'unlock_code_type' => '0',
            'unlock_fast_code' => null,
            'lock_inactivity_enable' => false,
            'lock_inactivity_period' => '30',
            'lock_unmount_vfs' => false,
            'block_reason' => null,
            'phone_enabled' => null,
            'permissions' => [],
            'max_file_size' => null,
            'sms_code_enabled' => false,
            'sms_code_mode' => false,
            'sms_code_valid_period' => '300',
            'ba_pack_id' => null,
            'security_fields' => [],
            'admin_account' => true,
            'need_plaintext_password' => false,
            'secret_phrase_mode' => '0',
            'account_keys_state' => '0'
        ], $values);

        $message->setResult($values['result']);
        $message->setSessionId($values['session_id']);
        $message->setUri($values['uri']);
        $message->setPort($values['port']);
        $message->setServerTime($values['server_time']);
        $message->setServerTimeUtc($values['server_time_utc']);
        $message->setBaId($values['ba_id']);
        $message->setOnlineMode($values['online_mode']);
        $message->setOnlineModeKey($values['online_mode_key']);
        $message->setChangeKeysForbidden($values['change_keys_forbidden']);
        $message->setCanChangeSettings($values['can_change_settings']);
        $message->setEnableInactivityLogout($values['enable_inactivity_logout']);
        $message->setEnableOfflineLogout($values['enable_offline_logout']);
        $message->setInactivityLogoutPeriod($values['inactivity_logout_period']);
        $message->setOfflineLogoutPeriod($values['offline_logout_period']);
        $message->setUnlockCodeType($values['unlock_code_type']);
        $message->setUnlockFastCode($values['unlock_fast_code']);
        $message->setLockInactivityEnable($values['lock_inactivity_enable']);
        $message->setLockInactivityPeriod($values['lock_inactivity_period']);
        $message->setLockUnmountVfs($values['lock_unmount_vfs']);
        $message->setBlockReason($values['block_reason']);
        $message->setPhoneEnabled($values['phone_enabled']);
        $message->setMaxFileSize($values['max_file_size']);
        $message->setSmsCodeEnabled($values['sms_code_enabled']);
        $message->setSmsCodeMode($values['sms_code_mode']);
        $message->setSmsCodeValidPeriod($values['sms_code_valid_period']);
        $message->setBaPackId($values['ba_pack_id']);
        $message->setAdminAccount($values['admin_account']);
        $message->setNeedPlaintextPassword($values['need_plaintext_password']);
        $message->setSecretPhraseMode($values['secret_phrase_mode']);
        $message->setAccountKeysState($values['account_keys_state']);

        foreach ($values['permissions'] as $item) {
            $message->addPermissions($item);
        }

        foreach ($values['security_fields'] as $item) {
            $message->addSecurityFields($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'auth_result',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'result',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.encryptserver.auth_result.Result'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'session_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'uri',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'server_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'server_time_utc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ba_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'online_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'online_mode_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'change_keys_forbidden',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'can_change_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'enable_inactivity_logout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'enable_offline_logout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'inactivity_logout_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '30'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'offline_logout_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '30'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'unlock_code_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'unlock_fast_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'lock_inactivity_enable',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'lock_inactivity_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '30'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'lock_unmount_vfs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'block_reason',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'phone_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'permissions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.encryptserver.vipadmin.SecurityField'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'max_file_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'sms_code_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'sms_code_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'sms_code_valid_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '300'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'ba_pack_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'security_fields',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.encryptserver.vipadmin.SecurityField'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'admin_account',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'need_plaintext_password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'secret_phrase_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 33,
                    'name' => 'account_keys_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->result === null) {
            throw new \UnexpectedValueException('Field "\\EncryptServer\\Protocol\\Auth\\auth_result#result" (tag 1) is required but has no value.');
        }

        if ($this->result !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->result->value());
        }

        if ($this->session_id !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->session_id);
        }

        if ($this->uri !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->uri);
        }

        if ($this->port !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->port);
        }

        if ($this->server_time !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->server_time);
        }

        if ($this->server_time_utc !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->server_time_utc);
        }

        if ($this->ba_id !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->ba_id);
        }

        if ($this->online_mode !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->online_mode);
        }

        if ($this->online_mode_key !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->online_mode_key);
        }

        if ($this->change_keys_forbidden !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->change_keys_forbidden);
        }

        if ($this->can_change_settings !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->can_change_settings);
        }

        if ($this->enable_inactivity_logout !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->enable_inactivity_logout);
        }

        if ($this->enable_offline_logout !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->enable_offline_logout);
        }

        if ($this->inactivity_logout_period !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->inactivity_logout_period);
        }

        if ($this->offline_logout_period !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->offline_logout_period);
        }

        if ($this->unlock_code_type !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->unlock_code_type);
        }

        if ($this->unlock_fast_code !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->unlock_fast_code);
        }

        if ($this->lock_inactivity_enable !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->lock_inactivity_enable);
        }

        if ($this->lock_inactivity_period !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->lock_inactivity_period);
        }

        if ($this->lock_unmount_vfs !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->lock_unmount_vfs);
        }

        if ($this->block_reason !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->block_reason);
        }

        if ($this->phone_enabled !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeBool($stream, $this->phone_enabled);
        }

        if ($this->permissions !== null) {
            foreach ($this->permissions as $val) {
                $writer->writeVarint($stream, 186);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->max_file_size !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->max_file_size);
        }

        if ($this->sms_code_enabled !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeBool($stream, $this->sms_code_enabled);
        }

        if ($this->sms_code_mode !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeBool($stream, $this->sms_code_mode);
        }

        if ($this->sms_code_valid_period !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeVarint($stream, $this->sms_code_valid_period);
        }

        if ($this->ba_pack_id !== null) {
            $writer->writeVarint($stream, 226);
            $writer->writeString($stream, $this->ba_pack_id);
        }

        if ($this->security_fields !== null) {
            foreach ($this->security_fields as $val) {
                $writer->writeVarint($stream, 234);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->admin_account !== null) {
            $writer->writeVarint($stream, 240);
            $writer->writeBool($stream, $this->admin_account);
        }

        if ($this->need_plaintext_password !== null) {
            $writer->writeVarint($stream, 248);
            $writer->writeBool($stream, $this->need_plaintext_password);
        }

        if ($this->secret_phrase_mode !== null) {
            $writer->writeVarint($stream, 256);
            $writer->writeVarint($stream, $this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $writer->writeVarint($stream, 264);
            $writer->writeVarint($stream, $this->account_keys_state);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->result = \EncryptServer\Protocol\Auth\auth_result\Result::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->session_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->uri = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->server_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->server_time_utc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ba_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->online_mode = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->online_mode_key = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->change_keys_forbidden = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->can_change_settings = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->enable_inactivity_logout = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->enable_offline_logout = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->inactivity_logout_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->offline_logout_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->unlock_code_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->unlock_fast_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->lock_inactivity_enable = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->lock_inactivity_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->lock_unmount_vfs = $reader->readBool($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->block_reason = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->phone_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityField();

                if ($this->permissions === null) {
                    $this->permissions = new \Protobuf\MessageCollection();
                }

                $this->permissions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->max_file_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sms_code_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sms_code_mode = $reader->readBool($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->sms_code_valid_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ba_pack_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \EncryptServer\Protocol\Vipadmin\SecurityField();

                if ($this->security_fields === null) {
                    $this->security_fields = new \Protobuf\MessageCollection();
                }

                $this->security_fields->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->admin_account = $reader->readBool($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->need_plaintext_password = $reader->readBool($stream);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->secret_phrase_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->account_keys_state = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->result !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->result->value());
        }

        if ($this->session_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->session_id);
        }

        if ($this->uri !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->uri);
        }

        if ($this->port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->port);
        }

        if ($this->server_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_time);
        }

        if ($this->server_time_utc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_time_utc);
        }

        if ($this->ba_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ba_id);
        }

        if ($this->online_mode !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->online_mode_key !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->online_mode_key);
        }

        if ($this->change_keys_forbidden !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->can_change_settings !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->enable_inactivity_logout !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->enable_offline_logout !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->inactivity_logout_period !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->inactivity_logout_period);
        }

        if ($this->offline_logout_period !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->offline_logout_period);
        }

        if ($this->unlock_code_type !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->unlock_code_type);
        }

        if ($this->unlock_fast_code !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->unlock_fast_code);
        }

        if ($this->lock_inactivity_enable !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->lock_inactivity_period !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->lock_inactivity_period);
        }

        if ($this->lock_unmount_vfs !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->block_reason !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->block_reason);
        }

        if ($this->phone_enabled !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->permissions !== null) {
            foreach ($this->permissions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->max_file_size !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->max_file_size);
        }

        if ($this->sms_code_enabled !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sms_code_mode !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sms_code_valid_period !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->sms_code_valid_period);
        }

        if ($this->ba_pack_id !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ba_pack_id);
        }

        if ($this->security_fields !== null) {
            foreach ($this->security_fields as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->admin_account !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->need_plaintext_password !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->secret_phrase_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->secret_phrase_mode);
        }

        if ($this->account_keys_state !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->account_keys_state);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->result = null;
        $this->session_id = null;
        $this->uri = null;
        $this->port = null;
        $this->server_time = null;
        $this->server_time_utc = null;
        $this->ba_id = null;
        $this->online_mode = null;
        $this->online_mode_key = null;
        $this->change_keys_forbidden = null;
        $this->can_change_settings = true;
        $this->enable_inactivity_logout = false;
        $this->enable_offline_logout = false;
        $this->inactivity_logout_period = '30';
        $this->offline_logout_period = '30';
        $this->unlock_code_type = '0';
        $this->unlock_fast_code = null;
        $this->lock_inactivity_enable = false;
        $this->lock_inactivity_period = '30';
        $this->lock_unmount_vfs = false;
        $this->block_reason = null;
        $this->phone_enabled = null;
        $this->permissions = null;
        $this->max_file_size = null;
        $this->sms_code_enabled = false;
        $this->sms_code_mode = false;
        $this->sms_code_valid_period = '300';
        $this->ba_pack_id = null;
        $this->security_fields = null;
        $this->admin_account = true;
        $this->need_plaintext_password = false;
        $this->secret_phrase_mode = '0';
        $this->account_keys_state = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \EncryptServer\Protocol\Auth\auth_result) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->result = ($message->result !== null) ? $message->result : $this->result;
        $this->session_id = ($message->session_id !== null) ? $message->session_id : $this->session_id;
        $this->uri = ($message->uri !== null) ? $message->uri : $this->uri;
        $this->port = ($message->port !== null) ? $message->port : $this->port;
        $this->server_time = ($message->server_time !== null) ? $message->server_time : $this->server_time;
        $this->server_time_utc = ($message->server_time_utc !== null) ? $message->server_time_utc : $this->server_time_utc;
        $this->ba_id = ($message->ba_id !== null) ? $message->ba_id : $this->ba_id;
        $this->online_mode = ($message->online_mode !== null) ? $message->online_mode : $this->online_mode;
        $this->online_mode_key = ($message->online_mode_key !== null) ? $message->online_mode_key : $this->online_mode_key;
        $this->change_keys_forbidden = ($message->change_keys_forbidden !== null) ? $message->change_keys_forbidden : $this->change_keys_forbidden;
        $this->can_change_settings = ($message->can_change_settings !== null) ? $message->can_change_settings : $this->can_change_settings;
        $this->enable_inactivity_logout = ($message->enable_inactivity_logout !== null) ? $message->enable_inactivity_logout : $this->enable_inactivity_logout;
        $this->enable_offline_logout = ($message->enable_offline_logout !== null) ? $message->enable_offline_logout : $this->enable_offline_logout;
        $this->inactivity_logout_period = ($message->inactivity_logout_period !== null) ? $message->inactivity_logout_period : $this->inactivity_logout_period;
        $this->offline_logout_period = ($message->offline_logout_period !== null) ? $message->offline_logout_period : $this->offline_logout_period;
        $this->unlock_code_type = ($message->unlock_code_type !== null) ? $message->unlock_code_type : $this->unlock_code_type;
        $this->unlock_fast_code = ($message->unlock_fast_code !== null) ? $message->unlock_fast_code : $this->unlock_fast_code;
        $this->lock_inactivity_enable = ($message->lock_inactivity_enable !== null) ? $message->lock_inactivity_enable : $this->lock_inactivity_enable;
        $this->lock_inactivity_period = ($message->lock_inactivity_period !== null) ? $message->lock_inactivity_period : $this->lock_inactivity_period;
        $this->lock_unmount_vfs = ($message->lock_unmount_vfs !== null) ? $message->lock_unmount_vfs : $this->lock_unmount_vfs;
        $this->block_reason = ($message->block_reason !== null) ? $message->block_reason : $this->block_reason;
        $this->phone_enabled = ($message->phone_enabled !== null) ? $message->phone_enabled : $this->phone_enabled;
        $this->permissions = ($message->permissions !== null) ? $message->permissions : $this->permissions;
        $this->max_file_size = ($message->max_file_size !== null) ? $message->max_file_size : $this->max_file_size;
        $this->sms_code_enabled = ($message->sms_code_enabled !== null) ? $message->sms_code_enabled : $this->sms_code_enabled;
        $this->sms_code_mode = ($message->sms_code_mode !== null) ? $message->sms_code_mode : $this->sms_code_mode;
        $this->sms_code_valid_period = ($message->sms_code_valid_period !== null) ? $message->sms_code_valid_period : $this->sms_code_valid_period;
        $this->ba_pack_id = ($message->ba_pack_id !== null) ? $message->ba_pack_id : $this->ba_pack_id;
        $this->security_fields = ($message->security_fields !== null) ? $message->security_fields : $this->security_fields;
        $this->admin_account = ($message->admin_account !== null) ? $message->admin_account : $this->admin_account;
        $this->need_plaintext_password = ($message->need_plaintext_password !== null) ? $message->need_plaintext_password : $this->need_plaintext_password;
        $this->secret_phrase_mode = ($message->secret_phrase_mode !== null) ? $message->secret_phrase_mode : $this->secret_phrase_mode;
        $this->account_keys_state = ($message->account_keys_state !== null) ? $message->account_keys_state : $this->account_keys_state;
    }


}


<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : auth.proto
 */


namespace EncryptServer\Protocol\Auth\features_response;

/**
 * Protobuf enum : encryptserver.features_response.ServerFeature
 */
class ServerFeature extends \Protobuf\Enum
{

    /**
     * Dummy = 0
     */
    const Dummy_VALUE = 0;

    /**
     * ConferencePermissionSettings = 1
     */
    const ConferencePermissionSettings_VALUE = 1;

    /**
     * LdapIsSupported = 2
     */
    const LdapIsSupported_VALUE = 2;

    /**
     * GetSelfOnlineSessions = 3
     */
    const GetSelfOnlineSessions_VALUE = 3;

    /**
     * GroupsForGroupChats = 4
     */
    const GroupsForGroupChats_VALUE = 4;

    /**
     * GroupChatAvatars = 5
     */
    const GroupChatAvatars_VALUE = 5;

    /**
     * ContactLastSeen = 6
     */
    const ContactLastSeen_VALUE = 6;

    /**
     * UserKeysPreliminaryInit = 7
     */
    const UserKeysPreliminaryInit_VALUE = 7;

    /**
     * AdminCanViewUserData = 8
     */
    const AdminCanViewUserData_VALUE = 8;

    /**
     * ConferenceGlobalBurningMode = 9
     */
    const ConferenceGlobalBurningMode_VALUE = 9;

    /**
     * ReadConfirmationsSupported = 10
     */
    const ReadConfirmationsSupported_VALUE = 10;

    /**
     * UserBrowse = 11
     */
    const UserBrowse_VALUE = 11;

    /**
     * BulkDeletionFilesystem = 12
     */
    const BulkDeletionFilesystem_VALUE = 12;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $Dummy = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $ConferencePermissionSettings = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $LdapIsSupported = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $GetSelfOnlineSessions = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $GroupsForGroupChats = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $GroupChatAvatars = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $ContactLastSeen = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $UserKeysPreliminaryInit = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $AdminCanViewUserData = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $ConferenceGlobalBurningMode = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $ReadConfirmationsSupported = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $UserBrowse = null;

    /**
     * @var \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    protected static $BulkDeletionFilesystem = null;

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function Dummy()
    {
        if (self::$Dummy !== null) {
            return self::$Dummy;
        }

        return self::$Dummy = new self('Dummy', self::Dummy_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function ConferencePermissionSettings()
    {
        if (self::$ConferencePermissionSettings !== null) {
            return self::$ConferencePermissionSettings;
        }

        return self::$ConferencePermissionSettings = new self('ConferencePermissionSettings', self::ConferencePermissionSettings_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function LdapIsSupported()
    {
        if (self::$LdapIsSupported !== null) {
            return self::$LdapIsSupported;
        }

        return self::$LdapIsSupported = new self('LdapIsSupported', self::LdapIsSupported_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function GetSelfOnlineSessions()
    {
        if (self::$GetSelfOnlineSessions !== null) {
            return self::$GetSelfOnlineSessions;
        }

        return self::$GetSelfOnlineSessions = new self('GetSelfOnlineSessions', self::GetSelfOnlineSessions_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function GroupsForGroupChats()
    {
        if (self::$GroupsForGroupChats !== null) {
            return self::$GroupsForGroupChats;
        }

        return self::$GroupsForGroupChats = new self('GroupsForGroupChats', self::GroupsForGroupChats_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function GroupChatAvatars()
    {
        if (self::$GroupChatAvatars !== null) {
            return self::$GroupChatAvatars;
        }

        return self::$GroupChatAvatars = new self('GroupChatAvatars', self::GroupChatAvatars_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function ContactLastSeen()
    {
        if (self::$ContactLastSeen !== null) {
            return self::$ContactLastSeen;
        }

        return self::$ContactLastSeen = new self('ContactLastSeen', self::ContactLastSeen_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function UserKeysPreliminaryInit()
    {
        if (self::$UserKeysPreliminaryInit !== null) {
            return self::$UserKeysPreliminaryInit;
        }

        return self::$UserKeysPreliminaryInit = new self('UserKeysPreliminaryInit', self::UserKeysPreliminaryInit_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function AdminCanViewUserData()
    {
        if (self::$AdminCanViewUserData !== null) {
            return self::$AdminCanViewUserData;
        }

        return self::$AdminCanViewUserData = new self('AdminCanViewUserData', self::AdminCanViewUserData_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function ConferenceGlobalBurningMode()
    {
        if (self::$ConferenceGlobalBurningMode !== null) {
            return self::$ConferenceGlobalBurningMode;
        }

        return self::$ConferenceGlobalBurningMode = new self('ConferenceGlobalBurningMode', self::ConferenceGlobalBurningMode_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function ReadConfirmationsSupported()
    {
        if (self::$ReadConfirmationsSupported !== null) {
            return self::$ReadConfirmationsSupported;
        }

        return self::$ReadConfirmationsSupported = new self('ReadConfirmationsSupported', self::ReadConfirmationsSupported_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function UserBrowse()
    {
        if (self::$UserBrowse !== null) {
            return self::$UserBrowse;
        }

        return self::$UserBrowse = new self('UserBrowse', self::UserBrowse_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function BulkDeletionFilesystem()
    {
        if (self::$BulkDeletionFilesystem !== null) {
            return self::$BulkDeletionFilesystem;
        }

        return self::$BulkDeletionFilesystem = new self('BulkDeletionFilesystem', self::BulkDeletionFilesystem_VALUE);
    }

    /**
     * @param int $value
     * @return \EncryptServer\Protocol\Auth\features_response\ServerFeature
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::Dummy();
            case 1: return self::ConferencePermissionSettings();
            case 2: return self::LdapIsSupported();
            case 3: return self::GetSelfOnlineSessions();
            case 4: return self::GroupsForGroupChats();
            case 5: return self::GroupChatAvatars();
            case 6: return self::ContactLastSeen();
            case 7: return self::UserKeysPreliminaryInit();
            case 8: return self::AdminCanViewUserData();
            case 9: return self::ConferenceGlobalBurningMode();
            case 10: return self::ReadConfirmationsSupported();
            case 11: return self::UserBrowse();
            case 12: return self::BulkDeletionFilesystem();
            default: return null;
        }
    }


}


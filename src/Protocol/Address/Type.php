<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : global.proto
 */


namespace EncryptServer\Protocol\Address;

/**
 * Protobuf enum : EncryptServer.command.Address.Type
 */
class Type extends \Protobuf\Enum
{

    /**
     * TYPE_USER = 1
     */
    const TYPE_USER_VALUE = 1;

    /**
     * TYPE_SERVICE = 2
     */
    const TYPE_SERVICE_VALUE = 2;

    /**
     * TYPE_OTHER = 3
     */
    const TYPE_OTHER_VALUE = 3;

    /**
     * @var \EncryptServer\Protocol\Address\Type
     */
    protected static $TYPE_USER = null;

    /**
     * @var \EncryptServer\Protocol\Address\Type
     */
    protected static $TYPE_SERVICE = null;

    /**
     * @var \EncryptServer\Protocol\Address\Type
     */
    protected static $TYPE_OTHER = null;

    /**
     * @return \EncryptServer\Protocol\Address\Type
     */
    public static function TYPE_USER()
    {
        if (self::$TYPE_USER !== null) {
            return self::$TYPE_USER;
        }

        return self::$TYPE_USER = new self('TYPE_USER', self::TYPE_USER_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Address\Type
     */
    public static function TYPE_SERVICE()
    {
        if (self::$TYPE_SERVICE !== null) {
            return self::$TYPE_SERVICE;
        }

        return self::$TYPE_SERVICE = new self('TYPE_SERVICE', self::TYPE_SERVICE_VALUE);
    }

    /**
     * @return \EncryptServer\Protocol\Address\Type
     */
    public static function TYPE_OTHER()
    {
        if (self::$TYPE_OTHER !== null) {
            return self::$TYPE_OTHER;
        }

        return self::$TYPE_OTHER = new self('TYPE_OTHER', self::TYPE_OTHER_VALUE);
    }

    /**
     * @param int $value
     * @return \EncryptServer\Protocol\Address\Type
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::TYPE_USER();
            case 2: return self::TYPE_SERVICE();
            case 3: return self::TYPE_OTHER();
            default: return null;
        }
    }


}

